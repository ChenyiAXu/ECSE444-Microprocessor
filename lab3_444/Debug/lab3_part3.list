
lab3_part3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c54  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004ddc  08004ddc  00014ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e1c  08004e1c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004e1c  08004e1c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e1c  08004e1c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e1c  08004e1c  00014e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e20  08004e20  00014e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004e24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011e1c  2000000c  08004e30  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20011e28  08004e30  00021e28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fc38  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000245c  00000000  00000000  0002fcb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001078  00000000  00000000  00032118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cb0  00000000  00000000  00033190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025d5c  00000000  00000000  00033e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011950  00000000  00000000  00059b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ecac8  00000000  00000000  0006b4ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004638  00000000  00000000  00157fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0015c5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004dc4 	.word	0x08004dc4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004dc4 	.word	0x08004dc4

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr
 80007d4:	0000      	movs	r0, r0
	...

080007d8 <get_C6>:
  uint32_t B6[22];
  uint32_t B5[45];
  //uint16_t *notes[] = {C6, E6, G6, A6, B6, B5};
  // Initialize each note array
  //sample n = 44.1k/1046.5 = 42
 void get_C6(){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
  for(int i =0; i<42; i++){
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	e01e      	b.n	8000822 <get_C6+0x4a>
  	C6[i] = 0.33*i*98;
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f7ff ff6b 	bl	80006c0 <__aeabi_i2d>
 80007ea:	a315      	add	r3, pc, #84	; (adr r3, 8000840 <get_C6+0x68>)
 80007ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007f0:	f7ff fcea 	bl	80001c8 <__aeabi_dmul>
 80007f4:	4602      	mov	r2, r0
 80007f6:	460b      	mov	r3, r1
 80007f8:	4610      	mov	r0, r2
 80007fa:	4619      	mov	r1, r3
 80007fc:	f04f 0200 	mov.w	r2, #0
 8000800:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <get_C6+0x60>)
 8000802:	f7ff fce1 	bl	80001c8 <__aeabi_dmul>
 8000806:	4602      	mov	r2, r0
 8000808:	460b      	mov	r3, r1
 800080a:	4610      	mov	r0, r2
 800080c:	4619      	mov	r1, r3
 800080e:	f7ff ffc1 	bl	8000794 <__aeabi_d2uiz>
 8000812:	4602      	mov	r2, r0
 8000814:	4909      	ldr	r1, [pc, #36]	; (800083c <get_C6+0x64>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i =0; i<42; i++){
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3301      	adds	r3, #1
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2b29      	cmp	r3, #41	; 0x29
 8000826:	dddd      	ble.n	80007e4 <get_C6+0xc>
  	}
  }
 8000828:	bf00      	nop
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	f3af 8000 	nop.w
 8000838:	40588000 	.word	0x40588000
 800083c:	20011ae8 	.word	0x20011ae8
 8000840:	51eb851f 	.word	0x51eb851f
 8000844:	3fd51eb8 	.word	0x3fd51eb8

08000848 <get_E6>:
 void get_E6(){
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
  for(int i = 0; i < 34; i++){
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	e01e      	b.n	8000892 <get_E6+0x4a>
  	E6[i] = 0.33*i*120;
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ff33 	bl	80006c0 <__aeabi_i2d>
 800085a:	a315      	add	r3, pc, #84	; (adr r3, 80008b0 <get_E6+0x68>)
 800085c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000860:	f7ff fcb2 	bl	80001c8 <__aeabi_dmul>
 8000864:	4602      	mov	r2, r0
 8000866:	460b      	mov	r3, r1
 8000868:	4610      	mov	r0, r2
 800086a:	4619      	mov	r1, r3
 800086c:	f04f 0200 	mov.w	r2, #0
 8000870:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <get_E6+0x60>)
 8000872:	f7ff fca9 	bl	80001c8 <__aeabi_dmul>
 8000876:	4602      	mov	r2, r0
 8000878:	460b      	mov	r3, r1
 800087a:	4610      	mov	r0, r2
 800087c:	4619      	mov	r1, r3
 800087e:	f7ff ff89 	bl	8000794 <__aeabi_d2uiz>
 8000882:	4602      	mov	r2, r0
 8000884:	4909      	ldr	r1, [pc, #36]	; (80008ac <get_E6+0x64>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i = 0; i < 34; i++){
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3301      	adds	r3, #1
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2b21      	cmp	r3, #33	; 0x21
 8000896:	dddd      	ble.n	8000854 <get_E6+0xc>
  	}
 }
 8000898:	bf00      	nop
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	f3af 8000 	nop.w
 80008a8:	405e0000 	.word	0x405e0000
 80008ac:	20011b90 	.word	0x20011b90
 80008b0:	51eb851f 	.word	0x51eb851f
 80008b4:	3fd51eb8 	.word	0x3fd51eb8

080008b8 <get_G6>:
 void get_G6(){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
  for(int i = 0; i < 28; i++){
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	e01e      	b.n	8000902 <get_G6+0x4a>
  	G6[i] = 0.33*i*146;
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f7ff fefb 	bl	80006c0 <__aeabi_i2d>
 80008ca:	a315      	add	r3, pc, #84	; (adr r3, 8000920 <get_G6+0x68>)
 80008cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008d0:	f7ff fc7a 	bl	80001c8 <__aeabi_dmul>
 80008d4:	4602      	mov	r2, r0
 80008d6:	460b      	mov	r3, r1
 80008d8:	4610      	mov	r0, r2
 80008da:	4619      	mov	r1, r3
 80008dc:	f04f 0200 	mov.w	r2, #0
 80008e0:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <get_G6+0x60>)
 80008e2:	f7ff fc71 	bl	80001c8 <__aeabi_dmul>
 80008e6:	4602      	mov	r2, r0
 80008e8:	460b      	mov	r3, r1
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	f7ff ff51 	bl	8000794 <__aeabi_d2uiz>
 80008f2:	4602      	mov	r2, r0
 80008f4:	4909      	ldr	r1, [pc, #36]	; (800091c <get_G6+0x64>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i = 0; i < 28; i++){
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3301      	adds	r3, #1
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b1b      	cmp	r3, #27
 8000906:	dddd      	ble.n	80008c4 <get_G6+0xc>
  	}
 }
 8000908:	bf00      	nop
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	f3af 8000 	nop.w
 8000918:	40624000 	.word	0x40624000
 800091c:	20011c18 	.word	0x20011c18
 8000920:	51eb851f 	.word	0x51eb851f
 8000924:	3fd51eb8 	.word	0x3fd51eb8

08000928 <get_A6>:
void get_A6(){
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 25; i++){
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	e01e      	b.n	8000972 <get_A6+0x4a>
  	A6[i] = 0.33*i*164;
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff fec3 	bl	80006c0 <__aeabi_i2d>
 800093a:	a315      	add	r3, pc, #84	; (adr r3, 8000990 <get_A6+0x68>)
 800093c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000940:	f7ff fc42 	bl	80001c8 <__aeabi_dmul>
 8000944:	4602      	mov	r2, r0
 8000946:	460b      	mov	r3, r1
 8000948:	4610      	mov	r0, r2
 800094a:	4619      	mov	r1, r3
 800094c:	f04f 0200 	mov.w	r2, #0
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <get_A6+0x60>)
 8000952:	f7ff fc39 	bl	80001c8 <__aeabi_dmul>
 8000956:	4602      	mov	r2, r0
 8000958:	460b      	mov	r3, r1
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	f7ff ff19 	bl	8000794 <__aeabi_d2uiz>
 8000962:	4602      	mov	r2, r0
 8000964:	4909      	ldr	r1, [pc, #36]	; (800098c <get_A6+0x64>)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < 25; i++){
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3301      	adds	r3, #1
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2b18      	cmp	r3, #24
 8000976:	dddd      	ble.n	8000934 <get_A6+0xc>
  	}
}
 8000978:	bf00      	nop
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	f3af 8000 	nop.w
 8000988:	40648000 	.word	0x40648000
 800098c:	20011c88 	.word	0x20011c88
 8000990:	51eb851f 	.word	0x51eb851f
 8000994:	3fd51eb8 	.word	0x3fd51eb8

08000998 <get_B6>:

void get_B6(){
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
  for(int i = 0; i < 22; i++){
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	e015      	b.n	80009d0 <get_B6+0x38>
  	B6[i] = 0.33*186*i;
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff fe8b 	bl	80006c0 <__aeabi_i2d>
 80009aa:	a30e      	add	r3, pc, #56	; (adr r3, 80009e4 <get_B6+0x4c>)
 80009ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009b0:	f7ff fc0a 	bl	80001c8 <__aeabi_dmul>
 80009b4:	4602      	mov	r2, r0
 80009b6:	460b      	mov	r3, r1
 80009b8:	4610      	mov	r0, r2
 80009ba:	4619      	mov	r1, r3
 80009bc:	f7ff feea 	bl	8000794 <__aeabi_d2uiz>
 80009c0:	4602      	mov	r2, r0
 80009c2:	4907      	ldr	r1, [pc, #28]	; (80009e0 <get_B6+0x48>)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i = 0; i < 22; i++){
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	3301      	adds	r3, #1
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b15      	cmp	r3, #21
 80009d4:	dde6      	ble.n	80009a4 <get_B6+0xc>
  	}
}
 80009d6:	bf00      	nop
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20011cec 	.word	0x20011cec
 80009e4:	d70a3d71 	.word	0xd70a3d71
 80009e8:	404eb0a3 	.word	0x404eb0a3
 80009ec:	00000000 	.word	0x00000000

080009f0 <get_B5>:
void get_B5(){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
  for(int i = 0; i < 45; i++){
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	e01e      	b.n	8000a3a <get_B5+0x4a>
  	B5[i] = 0.33*i*91;
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff fe5f 	bl	80006c0 <__aeabi_i2d>
 8000a02:	a314      	add	r3, pc, #80	; (adr r3, 8000a54 <get_B5+0x64>)
 8000a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a08:	f7ff fbde 	bl	80001c8 <__aeabi_dmul>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	460b      	mov	r3, r1
 8000a10:	4610      	mov	r0, r2
 8000a12:	4619      	mov	r1, r3
 8000a14:	a311      	add	r3, pc, #68	; (adr r3, 8000a5c <get_B5+0x6c>)
 8000a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a1a:	f7ff fbd5 	bl	80001c8 <__aeabi_dmul>
 8000a1e:	4602      	mov	r2, r0
 8000a20:	460b      	mov	r3, r1
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	f7ff feb5 	bl	8000794 <__aeabi_d2uiz>
 8000a2a:	4602      	mov	r2, r0
 8000a2c:	4908      	ldr	r1, [pc, #32]	; (8000a50 <get_B5+0x60>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i = 0; i < 45; i++){
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3301      	adds	r3, #1
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2b2c      	cmp	r3, #44	; 0x2c
 8000a3e:	dddd      	ble.n	80009fc <get_B5+0xc>
  	}
}
 8000a40:	bf00      	nop
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	f3af 8000 	nop.w
 8000a50:	20011d44 	.word	0x20011d44
 8000a54:	51eb851f 	.word	0x51eb851f
 8000a58:	3fd51eb8 	.word	0x3fd51eb8
 8000a5c:	00000000 	.word	0x00000000
 8000a60:	4056c000 	.word	0x4056c000

08000a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a68:	f000 fddb 	bl	8001622 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6c:	f000 f81c 	bl	8000aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a70:	f000 f978 	bl	8000d64 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a74:	f000 f950 	bl	8000d18 <MX_DMA_Init>
  MX_TIM2_Init();
 8000a78:	f000 f900 	bl	8000c7c <MX_TIM2_Init>
  MX_DAC1_Init();
 8000a7c:	f000 f866 	bl	8000b4c <MX_DAC1_Init>
  MX_DFSDM1_Init();
 8000a80:	f000 f896 	bl	8000bb0 <MX_DFSDM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000a84:	4807      	ldr	r0, [pc, #28]	; (8000aa4 <main+0x40>)
 8000a86:	f003 fd29 	bl	80044dc <HAL_TIM_Base_Start_IT>

  get_B5();
 8000a8a:	f7ff ffb1 	bl	80009f0 <get_B5>
  get_C6();
 8000a8e:	f7ff fea3 	bl	80007d8 <get_C6>
  get_E6();
 8000a92:	f7ff fed9 	bl	8000848 <get_E6>
  get_G6();
 8000a96:	f7ff ff0f 	bl	80008b8 <get_G6>
  get_A6();
 8000a9a:	f7ff ff45 	bl	8000928 <get_A6>
  get_B6();
 8000a9e:	f7ff ff7b 	bl	8000998 <get_B6>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <main+0x3e>
 8000aa4:	20000158 	.word	0x20000158

08000aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b096      	sub	sp, #88	; 0x58
 8000aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	2244      	movs	r2, #68	; 0x44
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f004 f958 	bl	8004d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abc:	463b      	mov	r3, r7
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000aca:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ace:	f002 f9d3 	bl	8002e78 <HAL_PWREx_ControlVoltageScaling>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ad8:	f000 fb40 	bl	800115c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000adc:	2310      	movs	r3, #16
 8000ade:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ae8:	2360      	movs	r3, #96	; 0x60
 8000aea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aec:	2302      	movs	r3, #2
 8000aee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000af0:	2301      	movs	r3, #1
 8000af2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000af4:	2301      	movs	r3, #1
 8000af6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000af8:	2328      	movs	r3, #40	; 0x28
 8000afa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000afc:	2307      	movs	r3, #7
 8000afe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b00:	2302      	movs	r3, #2
 8000b02:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b04:	2302      	movs	r3, #2
 8000b06:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f002 fa09 	bl	8002f24 <HAL_RCC_OscConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000b18:	f000 fb20 	bl	800115c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b20:	2303      	movs	r3, #3
 8000b22:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b30:	463b      	mov	r3, r7
 8000b32:	2104      	movs	r1, #4
 8000b34:	4618      	mov	r0, r3
 8000b36:	f002 fdd1 	bl	80036dc <HAL_RCC_ClockConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000b40:	f000 fb0c 	bl	800115c <Error_Handler>
  }
}
 8000b44:	bf00      	nop
 8000b46:	3758      	adds	r7, #88	; 0x58
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	; 0x28
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2224      	movs	r2, #36	; 0x24
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f004 f907 	bl	8004d6c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b5e:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_DAC1_Init+0x5c>)
 8000b60:	4a12      	ldr	r2, [pc, #72]	; (8000bac <MX_DAC1_Init+0x60>)
 8000b62:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b64:	4810      	ldr	r0, [pc, #64]	; (8000ba8 <MX_DAC1_Init+0x5c>)
 8000b66:	f000 ff06 	bl	8001976 <HAL_DAC_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b70:	f000 faf4 	bl	800115c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000b78:	2324      	movs	r3, #36	; 0x24
 8000b7a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <MX_DAC1_Init+0x5c>)
 8000b90:	f001 f843 	bl	8001c1a <HAL_DAC_ConfigChannel>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000b9a:	f000 fadf 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	3728      	adds	r7, #40	; 0x28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000028 	.word	0x20000028
 8000bac:	40007400 	.word	0x40007400

08000bb0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000bb4:	4b2c      	ldr	r3, [pc, #176]	; (8000c68 <MX_DFSDM1_Init+0xb8>)
 8000bb6:	4a2d      	ldr	r2, [pc, #180]	; (8000c6c <MX_DFSDM1_Init+0xbc>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000bba:	4b2b      	ldr	r3, [pc, #172]	; (8000c68 <MX_DFSDM1_Init+0xb8>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000bc0:	4b29      	ldr	r3, [pc, #164]	; (8000c68 <MX_DFSDM1_Init+0xb8>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000bc6:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <MX_DFSDM1_Init+0xb8>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000bcc:	4b26      	ldr	r3, [pc, #152]	; (8000c68 <MX_DFSDM1_Init+0xb8>)
 8000bce:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000bd2:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 70;
 8000bd4:	4b24      	ldr	r3, [pc, #144]	; (8000c68 <MX_DFSDM1_Init+0xb8>)
 8000bd6:	2246      	movs	r2, #70	; 0x46
 8000bd8:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000bda:	4b23      	ldr	r3, [pc, #140]	; (8000c68 <MX_DFSDM1_Init+0xb8>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000be0:	4821      	ldr	r0, [pc, #132]	; (8000c68 <MX_DFSDM1_Init+0xb8>)
 8000be2:	f001 fa8b 	bl	80020fc <HAL_DFSDM_FilterInit>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000bec:	f000 fab6 	bl	800115c <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000bf0:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <MX_DFSDM1_Init+0xc0>)
 8000bf2:	4a20      	ldr	r2, [pc, #128]	; (8000c74 <MX_DFSDM1_Init+0xc4>)
 8000bf4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000bf6:	4b1e      	ldr	r3, [pc, #120]	; (8000c70 <MX_DFSDM1_Init+0xc0>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000bfc:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <MX_DFSDM1_Init+0xc0>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 33;
 8000c02:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <MX_DFSDM1_Init+0xc0>)
 8000c04:	2221      	movs	r2, #33	; 0x21
 8000c06:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000c08:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <MX_DFSDM1_Init+0xc0>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <MX_DFSDM1_Init+0xc0>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000c14:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_DFSDM1_Init+0xc0>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <MX_DFSDM1_Init+0xc0>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000c20:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <MX_DFSDM1_Init+0xc0>)
 8000c22:	2204      	movs	r2, #4
 8000c24:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <MX_DFSDM1_Init+0xc0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000c2c:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <MX_DFSDM1_Init+0xc0>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_DFSDM1_Init+0xc0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000c38:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <MX_DFSDM1_Init+0xc0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000c3e:	480c      	ldr	r0, [pc, #48]	; (8000c70 <MX_DFSDM1_Init+0xc0>)
 8000c40:	f001 f99c 	bl	8001f7c <HAL_DFSDM_ChannelInit>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8000c4a:	f000 fa87 	bl	800115c <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	4909      	ldr	r1, [pc, #36]	; (8000c78 <MX_DFSDM1_Init+0xc8>)
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <MX_DFSDM1_Init+0xb8>)
 8000c54:	f001 fb2c 	bl	80022b0 <HAL_DFSDM_FilterConfigRegChannel>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8000c5e:	f000 fa7d 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000084 	.word	0x20000084
 8000c6c:	40016100 	.word	0x40016100
 8000c70:	200000d8 	.word	0x200000d8
 8000c74:	40016040 	.word	0x40016040
 8000c78:	00020004 	.word	0x00020004

08000c7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c82:	f107 0310 	add.w	r3, r7, #16
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c9a:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <MX_TIM2_Init+0x98>)
 8000c9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ca0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ca2:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <MX_TIM2_Init+0x98>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <MX_TIM2_Init+0x98>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1860;
 8000cae:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <MX_TIM2_Init+0x98>)
 8000cb0:	f240 7244 	movw	r2, #1860	; 0x744
 8000cb4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb6:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <MX_TIM2_Init+0x98>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cbc:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <MX_TIM2_Init+0x98>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cc2:	4814      	ldr	r0, [pc, #80]	; (8000d14 <MX_TIM2_Init+0x98>)
 8000cc4:	f003 fbb2 	bl	800442c <HAL_TIM_Base_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000cce:	f000 fa45 	bl	800115c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480d      	ldr	r0, [pc, #52]	; (8000d14 <MX_TIM2_Init+0x98>)
 8000ce0:	f003 fd6e 	bl	80047c0 <HAL_TIM_ConfigClockSource>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000cea:	f000 fa37 	bl	800115c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cee:	2320      	movs	r3, #32
 8000cf0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4806      	ldr	r0, [pc, #24]	; (8000d14 <MX_TIM2_Init+0x98>)
 8000cfc:	f003 ff90 	bl	8004c20 <HAL_TIMEx_MasterConfigSynchronization>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d06:	f000 fa29 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	3720      	adds	r7, #32
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000158 	.word	0x20000158

08000d18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <MX_DMA_Init+0x48>)
 8000d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d22:	4a0f      	ldr	r2, [pc, #60]	; (8000d60 <MX_DMA_Init+0x48>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6493      	str	r3, [r2, #72]	; 0x48
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <MX_DMA_Init+0x48>)
 8000d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2100      	movs	r1, #0
 8000d3a:	200d      	movs	r0, #13
 8000d3c:	f000 fde5 	bl	800190a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000d40:	200d      	movs	r0, #13
 8000d42:	f000 fdfe 	bl	8001942 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	200e      	movs	r0, #14
 8000d4c:	f000 fddd 	bl	800190a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000d50:	200e      	movs	r0, #14
 8000d52:	f000 fdf6 	bl	8001942 <HAL_NVIC_EnableIRQ>

}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40021000 	.word	0x40021000

08000d64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	; 0x28
 8000d68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7a:	4b2f      	ldr	r3, [pc, #188]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	4a2e      	ldr	r2, [pc, #184]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000d80:	f043 0304 	orr.w	r3, r3, #4
 8000d84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d86:	4b2c      	ldr	r3, [pc, #176]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	f003 0304 	and.w	r3, r3, #4
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	4b29      	ldr	r3, [pc, #164]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	4a28      	ldr	r2, [pc, #160]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9e:	4b26      	ldr	r3, [pc, #152]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000daa:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	4a22      	ldr	r2, [pc, #136]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000db0:	f043 0310 	orr.w	r3, r3, #16
 8000db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	f003 0310 	and.w	r3, r3, #16
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	4a1c      	ldr	r2, [pc, #112]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dce:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000de0:	4816      	ldr	r0, [pc, #88]	; (8000e3c <MX_GPIO_Init+0xd8>)
 8000de2:	f001 fff1 	bl	8002dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PushButton_Pin */
  GPIO_InitStruct.Pin = PushButton_Pin;
 8000de6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PushButton_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4810      	ldr	r0, [pc, #64]	; (8000e40 <MX_GPIO_Init+0xdc>)
 8000dfe:	f001 fe39 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4808      	ldr	r0, [pc, #32]	; (8000e3c <MX_GPIO_Init+0xd8>)
 8000e1c:	f001 fe2a 	bl	8002a74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2100      	movs	r1, #0
 8000e24:	2028      	movs	r0, #40	; 0x28
 8000e26:	f000 fd70 	bl	800190a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e2a:	2028      	movs	r0, #40	; 0x28
 8000e2c:	f000 fd89 	bl	8001942 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e30:	bf00      	nop
 8000e32:	3728      	adds	r7, #40	; 0x28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	48000400 	.word	0x48000400
 8000e40:	48000800 	.word	0x48000800

08000e44 <HAL_GPIO_EXTI_Callback>:
//}

////part 3 end
//part 4 start

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af02      	add	r7, sp, #8
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_PIN == GPIO_PIN_13){
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e54:	f040 80c4 	bne.w	8000fe0 <HAL_GPIO_EXTI_Callback+0x19c>
		if(pressed == 0){
 8000e58:	4b63      	ldr	r3, [pc, #396]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d10d      	bne.n	8000e7c <HAL_GPIO_EXTI_Callback+0x38>
			//(filter, data, length)
			//start recording a fixed length
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000e60:	2100      	movs	r1, #0
 8000e62:	4862      	ldr	r0, [pc, #392]	; (8000fec <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000e64:	f000 fe76 	bl	8001b54 <HAL_DAC_Stop_DMA>
			//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
			HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, RecBuff, AUDIO_REC);
 8000e68:	f242 3228 	movw	r2, #9000	; 0x2328
 8000e6c:	4960      	ldr	r1, [pc, #384]	; (8000ff0 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000e6e:	4861      	ldr	r0, [pc, #388]	; (8000ff4 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000e70:	f001 fa64 	bl	800233c <HAL_DFSDM_FilterRegularStart_DMA>
			pressed = 1;
 8000e74:	4b5c      	ldr	r3, [pc, #368]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	701a      	strb	r2, [r3, #0]
		 HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
		 HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, B5, 45, DAC_ALIGN_12B_R);
		 pressed =0;
		}
	}
}
 8000e7a:	e0b1      	b.n	8000fe0 <HAL_GPIO_EXTI_Callback+0x19c>
		}else if (pressed == 1){
 8000e7c:	4b5a      	ldr	r3, [pc, #360]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d116      	bne.n	8000eb2 <HAL_GPIO_EXTI_Callback+0x6e>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000e84:	2100      	movs	r1, #0
 8000e86:	4859      	ldr	r0, [pc, #356]	; (8000fec <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000e88:	f000 fe64 	bl	8001b54 <HAL_DAC_Stop_DMA>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e92:	4859      	ldr	r0, [pc, #356]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000e94:	f001 ff98 	bl	8002dc8 <HAL_GPIO_WritePin>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, PlayBuff, AUDIO_REC, DAC_ALIGN_12B_R);
 8000e98:	2300      	movs	r3, #0
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	f242 3328 	movw	r3, #9000	; 0x2328
 8000ea0:	4a56      	ldr	r2, [pc, #344]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4851      	ldr	r0, [pc, #324]	; (8000fec <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000ea6:	f000 fd89 	bl	80019bc <HAL_DAC_Start_DMA>
			pressed = 2;
 8000eaa:	4b4f      	ldr	r3, [pc, #316]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000eac:	2202      	movs	r2, #2
 8000eae:	701a      	strb	r2, [r3, #0]
}
 8000eb0:	e096      	b.n	8000fe0 <HAL_GPIO_EXTI_Callback+0x19c>
		}else if (pressed == 2){
 8000eb2:	4b4d      	ldr	r3, [pc, #308]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d115      	bne.n	8000ee6 <HAL_GPIO_EXTI_Callback+0xa2>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ec0:	484d      	ldr	r0, [pc, #308]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000ec2:	f001 ff81 	bl	8002dc8 <HAL_GPIO_WritePin>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4848      	ldr	r0, [pc, #288]	; (8000fec <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000eca:	f000 fe43 	bl	8001b54 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, C6, 42, DAC_ALIGN_12B_R);
 8000ece:	2300      	movs	r3, #0
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	232a      	movs	r3, #42	; 0x2a
 8000ed4:	4a4a      	ldr	r2, [pc, #296]	; (8001000 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4844      	ldr	r0, [pc, #272]	; (8000fec <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000eda:	f000 fd6f 	bl	80019bc <HAL_DAC_Start_DMA>
			pressed = 3;
 8000ede:	4b42      	ldr	r3, [pc, #264]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	701a      	strb	r2, [r3, #0]
}
 8000ee4:	e07c      	b.n	8000fe0 <HAL_GPIO_EXTI_Callback+0x19c>
		}else if (pressed == 3){
 8000ee6:	4b40      	ldr	r3, [pc, #256]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b03      	cmp	r3, #3
 8000eec:	d115      	bne.n	8000f1a <HAL_GPIO_EXTI_Callback+0xd6>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ef4:	4840      	ldr	r0, [pc, #256]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000ef6:	f001 ff67 	bl	8002dc8 <HAL_GPIO_WritePin>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000efa:	2100      	movs	r1, #0
 8000efc:	483b      	ldr	r0, [pc, #236]	; (8000fec <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000efe:	f000 fe29 	bl	8001b54 <HAL_DAC_Stop_DMA>
		    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, E6, 34, DAC_ALIGN_12B_R);
 8000f02:	2300      	movs	r3, #0
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2322      	movs	r3, #34	; 0x22
 8000f08:	4a3e      	ldr	r2, [pc, #248]	; (8001004 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4837      	ldr	r0, [pc, #220]	; (8000fec <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000f0e:	f000 fd55 	bl	80019bc <HAL_DAC_Start_DMA>
			pressed = 4;
 8000f12:	4b35      	ldr	r3, [pc, #212]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000f14:	2204      	movs	r2, #4
 8000f16:	701a      	strb	r2, [r3, #0]
}
 8000f18:	e062      	b.n	8000fe0 <HAL_GPIO_EXTI_Callback+0x19c>
		}else if (pressed == 4){
 8000f1a:	4b33      	ldr	r3, [pc, #204]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	d115      	bne.n	8000f4e <HAL_GPIO_EXTI_Callback+0x10a>
		   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000f22:	2201      	movs	r2, #1
 8000f24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f28:	4833      	ldr	r0, [pc, #204]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000f2a:	f001 ff4d 	bl	8002dc8 <HAL_GPIO_WritePin>
 		   HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000f2e:	2100      	movs	r1, #0
 8000f30:	482e      	ldr	r0, [pc, #184]	; (8000fec <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000f32:	f000 fe0f 	bl	8001b54 <HAL_DAC_Stop_DMA>
		   HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, G6, 28, DAC_ALIGN_12B_R);
 8000f36:	2300      	movs	r3, #0
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	231c      	movs	r3, #28
 8000f3c:	4a32      	ldr	r2, [pc, #200]	; (8001008 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000f3e:	2100      	movs	r1, #0
 8000f40:	482a      	ldr	r0, [pc, #168]	; (8000fec <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000f42:	f000 fd3b 	bl	80019bc <HAL_DAC_Start_DMA>
		   pressed = 5;
 8000f46:	4b28      	ldr	r3, [pc, #160]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000f48:	2205      	movs	r2, #5
 8000f4a:	701a      	strb	r2, [r3, #0]
}
 8000f4c:	e048      	b.n	8000fe0 <HAL_GPIO_EXTI_Callback+0x19c>
		}else if (pressed == 5){
 8000f4e:	4b26      	ldr	r3, [pc, #152]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b05      	cmp	r3, #5
 8000f54:	d115      	bne.n	8000f82 <HAL_GPIO_EXTI_Callback+0x13e>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f5c:	4826      	ldr	r0, [pc, #152]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000f5e:	f001 ff33 	bl	8002dc8 <HAL_GPIO_WritePin>
		    HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000f62:	2100      	movs	r1, #0
 8000f64:	4821      	ldr	r0, [pc, #132]	; (8000fec <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000f66:	f000 fdf5 	bl	8001b54 <HAL_DAC_Stop_DMA>
		    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, A6, 25, DAC_ALIGN_12B_R);
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	2319      	movs	r3, #25
 8000f70:	4a26      	ldr	r2, [pc, #152]	; (800100c <HAL_GPIO_EXTI_Callback+0x1c8>)
 8000f72:	2100      	movs	r1, #0
 8000f74:	481d      	ldr	r0, [pc, #116]	; (8000fec <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000f76:	f000 fd21 	bl	80019bc <HAL_DAC_Start_DMA>
			pressed = 6;
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000f7c:	2206      	movs	r2, #6
 8000f7e:	701a      	strb	r2, [r3, #0]
}
 8000f80:	e02e      	b.n	8000fe0 <HAL_GPIO_EXTI_Callback+0x19c>
		}else if (pressed == 6){
 8000f82:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b06      	cmp	r3, #6
 8000f88:	d115      	bne.n	8000fb6 <HAL_GPIO_EXTI_Callback+0x172>
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f90:	4819      	ldr	r0, [pc, #100]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000f92:	f001 ff19 	bl	8002dc8 <HAL_GPIO_WritePin>
		  HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000f96:	2100      	movs	r1, #0
 8000f98:	4814      	ldr	r0, [pc, #80]	; (8000fec <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000f9a:	f000 fddb 	bl	8001b54 <HAL_DAC_Stop_DMA>
		  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, B6, 22, DAC_ALIGN_12B_R);
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2316      	movs	r3, #22
 8000fa4:	4a1a      	ldr	r2, [pc, #104]	; (8001010 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4810      	ldr	r0, [pc, #64]	; (8000fec <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000faa:	f000 fd07 	bl	80019bc <HAL_DAC_Start_DMA>
		  pressed = 7;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000fb0:	2207      	movs	r2, #7
 8000fb2:	701a      	strb	r2, [r3, #0]
}
 8000fb4:	e014      	b.n	8000fe0 <HAL_GPIO_EXTI_Callback+0x19c>
		 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fbc:	480e      	ldr	r0, [pc, #56]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000fbe:	f001 ff03 	bl	8002dc8 <HAL_GPIO_WritePin>
		 HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4809      	ldr	r0, [pc, #36]	; (8000fec <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000fc6:	f000 fdc5 	bl	8001b54 <HAL_DAC_Stop_DMA>
		 HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, B5, 45, DAC_ALIGN_12B_R);
 8000fca:	2300      	movs	r3, #0
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	232d      	movs	r3, #45	; 0x2d
 8000fd0:	4a10      	ldr	r2, [pc, #64]	; (8001014 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4805      	ldr	r0, [pc, #20]	; (8000fec <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000fd6:	f000 fcf1 	bl	80019bc <HAL_DAC_Start_DMA>
		 pressed =0;
 8000fda:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20011ae4 	.word	0x20011ae4
 8000fec:	20000028 	.word	0x20000028
 8000ff0:	200001a4 	.word	0x200001a4
 8000ff4:	20000084 	.word	0x20000084
 8000ff8:	48000400 	.word	0x48000400
 8000ffc:	20008e44 	.word	0x20008e44
 8001000:	20011ae8 	.word	0x20011ae8
 8001004:	20011b90 	.word	0x20011b90
 8001008:	20011c18 	.word	0x20011c18
 800100c:	20011c88 	.word	0x20011c88
 8001010:	20011cec 	.word	0x20011cec
 8001014:	20011d44 	.word	0x20011d44

08001018 <HAL_DFSDM_FilterRegConvCpltCallback>:
//		PlayBuff[i] = RecBuff[i]>>8;
//		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
//	}
//}

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter){
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	DmaRecBuffCplt = 1;
 8001020:	4b47      	ldr	r3, [pc, #284]	; (8001140 <HAL_DFSDM_FilterRegConvCpltCallback+0x128>)
 8001022:	2201      	movs	r2, #1
 8001024:	701a      	strb	r2, [r3, #0]
	for(int i = AUDIO_REC; i < AUDIO_REC; i++){
 8001026:	f242 3328 	movw	r3, #9000	; 0x2328
 800102a:	61fb      	str	r3, [r7, #28]
 800102c:	e011      	b.n	8001052 <HAL_DFSDM_FilterRegConvCpltCallback+0x3a>
		PlayBuff[i] = RecBuff[i]>>8;
 800102e:	4a45      	ldr	r2, [pc, #276]	; (8001144 <HAL_DFSDM_FilterRegConvCpltCallback+0x12c>)
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001036:	121b      	asrs	r3, r3, #8
 8001038:	4619      	mov	r1, r3
 800103a:	4a43      	ldr	r2, [pc, #268]	; (8001148 <HAL_DFSDM_FilterRegConvCpltCallback+0x130>)
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001042:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001046:	4841      	ldr	r0, [pc, #260]	; (800114c <HAL_DFSDM_FilterRegConvCpltCallback+0x134>)
 8001048:	f001 fed6 	bl	8002df8 <HAL_GPIO_TogglePin>
	for(int i = AUDIO_REC; i < AUDIO_REC; i++){
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	3301      	adds	r3, #1
 8001050:	61fb      	str	r3, [r7, #28]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	f242 3227 	movw	r2, #8999	; 0x2327
 8001058:	4293      	cmp	r3, r2
 800105a:	dde8      	ble.n	800102e <HAL_DFSDM_FilterRegConvCpltCallback+0x16>
	}
	float max = -838809;
 800105c:	4b3c      	ldr	r3, [pc, #240]	; (8001150 <HAL_DFSDM_FilterRegConvCpltCallback+0x138>)
 800105e:	61bb      	str	r3, [r7, #24]
				float min = 838808;
 8001060:	4b3c      	ldr	r3, [pc, #240]	; (8001154 <HAL_DFSDM_FilterRegConvCpltCallback+0x13c>)
 8001062:	617b      	str	r3, [r7, #20]
				for(int i = 0; i < AUDIO_REC; i++){
 8001064:	2300      	movs	r3, #0
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	e034      	b.n	80010d4 <HAL_DFSDM_FilterRegConvCpltCallback+0xbc>
					if(PlayBuff[i] > max){
 800106a:	4a37      	ldr	r2, [pc, #220]	; (8001148 <HAL_DFSDM_FilterRegConvCpltCallback+0x130>)
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001072:	ee07 3a90 	vmov	s15, r3
 8001076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800107a:	ed97 7a06 	vldr	s14, [r7, #24]
 800107e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001086:	d509      	bpl.n	800109c <HAL_DFSDM_FilterRegConvCpltCallback+0x84>
						max = PlayBuff[i];
 8001088:	4a2f      	ldr	r2, [pc, #188]	; (8001148 <HAL_DFSDM_FilterRegConvCpltCallback+0x130>)
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001090:	ee07 3a90 	vmov	s15, r3
 8001094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001098:	edc7 7a06 	vstr	s15, [r7, #24]
					}
					if(PlayBuff[i] < min){
 800109c:	4a2a      	ldr	r2, [pc, #168]	; (8001148 <HAL_DFSDM_FilterRegConvCpltCallback+0x130>)
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a4:	ee07 3a90 	vmov	s15, r3
 80010a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80010b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b8:	dd09      	ble.n	80010ce <HAL_DFSDM_FilterRegConvCpltCallback+0xb6>
						min = PlayBuff[i];
 80010ba:	4a23      	ldr	r2, [pc, #140]	; (8001148 <HAL_DFSDM_FilterRegConvCpltCallback+0x130>)
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ca:	edc7 7a05 	vstr	s15, [r7, #20]
				for(int i = 0; i < AUDIO_REC; i++){
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	3301      	adds	r3, #1
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	f242 3227 	movw	r2, #8999	; 0x2327
 80010da:	4293      	cmp	r3, r2
 80010dc:	ddc5      	ble.n	800106a <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
					}
				}
				for(int i =0; i< AUDIO_REC; i++){
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	e022      	b.n	800112a <HAL_DFSDM_FilterRegConvCpltCallback+0x112>
					PlayBuff[i] = ((PlayBuff[i] - min)/(max-min))*4000;
 80010e4:	4a18      	ldr	r2, [pc, #96]	; (8001148 <HAL_DFSDM_FilterRegConvCpltCallback+0x130>)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80010fc:	ed97 7a06 	vldr	s14, [r7, #24]
 8001100:	edd7 7a05 	vldr	s15, [r7, #20]
 8001104:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800110c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001158 <HAL_DFSDM_FilterRegConvCpltCallback+0x140>
 8001110:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001118:	ee17 1a90 	vmov	r1, s15
 800111c:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <HAL_DFSDM_FilterRegConvCpltCallback+0x130>)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(int i =0; i< AUDIO_REC; i++){
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	3301      	adds	r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f242 3227 	movw	r2, #8999	; 0x2327
 8001130:	4293      	cmp	r3, r2
 8001132:	ddd7      	ble.n	80010e4 <HAL_DFSDM_FilterRegConvCpltCallback+0xcc>
				}
	//HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3720      	adds	r7, #32
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20011ae5 	.word	0x20011ae5
 8001144:	200001a4 	.word	0x200001a4
 8001148:	20008e44 	.word	0x20008e44
 800114c:	48000400 	.word	0x48000400
 8001150:	c94cc990 	.word	0xc94cc990
 8001154:	494cc980 	.word	0x494cc980
 8001158:	457a0000 	.word	0x457a0000

0800115c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001160:	b672      	cpsid	i
}
 8001162:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001164:	e7fe      	b.n	8001164 <Error_Handler+0x8>
	...

08001168 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <HAL_MspInit+0x44>)
 8001170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001172:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <HAL_MspInit+0x44>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6613      	str	r3, [r2, #96]	; 0x60
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <HAL_MspInit+0x44>)
 800117c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <HAL_MspInit+0x44>)
 8001188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118a:	4a08      	ldr	r2, [pc, #32]	; (80011ac <HAL_MspInit+0x44>)
 800118c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001190:	6593      	str	r3, [r2, #88]	; 0x58
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_MspInit+0x44>)
 8001194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000

080011b0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	; 0x28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a2b      	ldr	r2, [pc, #172]	; (800127c <HAL_DAC_MspInit+0xcc>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d14f      	bne.n	8001272 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80011d2:	4b2b      	ldr	r3, [pc, #172]	; (8001280 <HAL_DAC_MspInit+0xd0>)
 80011d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d6:	4a2a      	ldr	r2, [pc, #168]	; (8001280 <HAL_DAC_MspInit+0xd0>)
 80011d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011dc:	6593      	str	r3, [r2, #88]	; 0x58
 80011de:	4b28      	ldr	r3, [pc, #160]	; (8001280 <HAL_DAC_MspInit+0xd0>)
 80011e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	4b25      	ldr	r3, [pc, #148]	; (8001280 <HAL_DAC_MspInit+0xd0>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ee:	4a24      	ldr	r2, [pc, #144]	; (8001280 <HAL_DAC_MspInit+0xd0>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f6:	4b22      	ldr	r3, [pc, #136]	; (8001280 <HAL_DAC_MspInit+0xd0>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001202:	2310      	movs	r3, #16
 8001204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001206:	2303      	movs	r3, #3
 8001208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001218:	f001 fc2c 	bl	8002a74 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 800121c:	4b19      	ldr	r3, [pc, #100]	; (8001284 <HAL_DAC_MspInit+0xd4>)
 800121e:	4a1a      	ldr	r2, [pc, #104]	; (8001288 <HAL_DAC_MspInit+0xd8>)
 8001220:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001222:	4b18      	ldr	r3, [pc, #96]	; (8001284 <HAL_DAC_MspInit+0xd4>)
 8001224:	2206      	movs	r2, #6
 8001226:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001228:	4b16      	ldr	r3, [pc, #88]	; (8001284 <HAL_DAC_MspInit+0xd4>)
 800122a:	2210      	movs	r2, #16
 800122c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <HAL_DAC_MspInit+0xd4>)
 8001230:	2200      	movs	r2, #0
 8001232:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001234:	4b13      	ldr	r3, [pc, #76]	; (8001284 <HAL_DAC_MspInit+0xd4>)
 8001236:	2280      	movs	r2, #128	; 0x80
 8001238:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800123a:	4b12      	ldr	r3, [pc, #72]	; (8001284 <HAL_DAC_MspInit+0xd4>)
 800123c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001240:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <HAL_DAC_MspInit+0xd4>)
 8001244:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001248:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <HAL_DAC_MspInit+0xd4>)
 800124c:	2220      	movs	r2, #32
 800124e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <HAL_DAC_MspInit+0xd4>)
 8001252:	2200      	movs	r2, #0
 8001254:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001256:	480b      	ldr	r0, [pc, #44]	; (8001284 <HAL_DAC_MspInit+0xd4>)
 8001258:	f001 f9d6 	bl	8002608 <HAL_DMA_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8001262:	f7ff ff7b 	bl	800115c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a06      	ldr	r2, [pc, #24]	; (8001284 <HAL_DAC_MspInit+0xd4>)
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	4a05      	ldr	r2, [pc, #20]	; (8001284 <HAL_DAC_MspInit+0xd4>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001272:	bf00      	nop
 8001274:	3728      	adds	r7, #40	; 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40007400 	.word	0x40007400
 8001280:	40021000 	.word	0x40021000
 8001284:	2000003c 	.word	0x2000003c
 8001288:	40020030 	.word	0x40020030

0800128c <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b0ac      	sub	sp, #176	; 0xb0
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2288      	movs	r2, #136	; 0x88
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f003 fd5d 	bl	8004d6c <memset>
  if(DFSDM1_Init == 0)
 80012b2:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <HAL_DFSDM_FilterMspInit+0x13c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d14b      	bne.n	8001352 <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80012ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012be:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4618      	mov	r0, r3
 80012cc:	f002 fbf2 	bl	8003ab4 <HAL_RCCEx_PeriphCLKConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 80012d6:	f7ff ff41 	bl	800115c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80012da:	4b3c      	ldr	r3, [pc, #240]	; (80013cc <HAL_DFSDM_FilterMspInit+0x140>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	3301      	adds	r3, #1
 80012e0:	4a3a      	ldr	r2, [pc, #232]	; (80013cc <HAL_DFSDM_FilterMspInit+0x140>)
 80012e2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80012e4:	4b39      	ldr	r3, [pc, #228]	; (80013cc <HAL_DFSDM_FilterMspInit+0x140>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d10b      	bne.n	8001304 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80012ec:	4b38      	ldr	r3, [pc, #224]	; (80013d0 <HAL_DFSDM_FilterMspInit+0x144>)
 80012ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f0:	4a37      	ldr	r2, [pc, #220]	; (80013d0 <HAL_DFSDM_FilterMspInit+0x144>)
 80012f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012f6:	6613      	str	r3, [r2, #96]	; 0x60
 80012f8:	4b35      	ldr	r3, [pc, #212]	; (80013d0 <HAL_DFSDM_FilterMspInit+0x144>)
 80012fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001304:	4b32      	ldr	r3, [pc, #200]	; (80013d0 <HAL_DFSDM_FilterMspInit+0x144>)
 8001306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001308:	4a31      	ldr	r2, [pc, #196]	; (80013d0 <HAL_DFSDM_FilterMspInit+0x144>)
 800130a:	f043 0310 	orr.w	r3, r3, #16
 800130e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001310:	4b2f      	ldr	r3, [pc, #188]	; (80013d0 <HAL_DFSDM_FilterMspInit+0x144>)
 8001312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001314:	f003 0310 	and.w	r3, r3, #16
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800131c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001320:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001336:	2306      	movs	r3, #6
 8001338:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800133c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001340:	4619      	mov	r1, r3
 8001342:	4824      	ldr	r0, [pc, #144]	; (80013d4 <HAL_DFSDM_FilterMspInit+0x148>)
 8001344:	f001 fb96 	bl	8002a74 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001348:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <HAL_DFSDM_FilterMspInit+0x13c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	3301      	adds	r3, #1
 800134e:	4a1e      	ldr	r2, [pc, #120]	; (80013c8 <HAL_DFSDM_FilterMspInit+0x13c>)
 8001350:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a20      	ldr	r2, [pc, #128]	; (80013d8 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d130      	bne.n	80013be <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 800135c:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <HAL_DFSDM_FilterMspInit+0x150>)
 800135e:	4a20      	ldr	r2, [pc, #128]	; (80013e0 <HAL_DFSDM_FilterMspInit+0x154>)
 8001360:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 8001362:	4b1e      	ldr	r3, [pc, #120]	; (80013dc <HAL_DFSDM_FilterMspInit+0x150>)
 8001364:	2200      	movs	r2, #0
 8001366:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001368:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <HAL_DFSDM_FilterMspInit+0x150>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_DFSDM_FilterMspInit+0x150>)
 8001370:	2200      	movs	r2, #0
 8001372:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <HAL_DFSDM_FilterMspInit+0x150>)
 8001376:	2280      	movs	r2, #128	; 0x80
 8001378:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <HAL_DFSDM_FilterMspInit+0x150>)
 800137c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001380:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <HAL_DFSDM_FilterMspInit+0x150>)
 8001384:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001388:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 800138a:	4b14      	ldr	r3, [pc, #80]	; (80013dc <HAL_DFSDM_FilterMspInit+0x150>)
 800138c:	2200      	movs	r2, #0
 800138e:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_DFSDM_FilterMspInit+0x150>)
 8001392:	2200      	movs	r2, #0
 8001394:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001396:	4811      	ldr	r0, [pc, #68]	; (80013dc <HAL_DFSDM_FilterMspInit+0x150>)
 8001398:	f001 f936 	bl	8002608 <HAL_DMA_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 80013a2:	f7ff fedb 	bl	800115c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a0c      	ldr	r2, [pc, #48]	; (80013dc <HAL_DFSDM_FilterMspInit+0x150>)
 80013aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80013ac:	4a0b      	ldr	r2, [pc, #44]	; (80013dc <HAL_DFSDM_FilterMspInit+0x150>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a09      	ldr	r2, [pc, #36]	; (80013dc <HAL_DFSDM_FilterMspInit+0x150>)
 80013b6:	629a      	str	r2, [r3, #40]	; 0x28
 80013b8:	4a08      	ldr	r2, [pc, #32]	; (80013dc <HAL_DFSDM_FilterMspInit+0x150>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 80013be:	bf00      	nop
 80013c0:	37b0      	adds	r7, #176	; 0xb0
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20011dfc 	.word	0x20011dfc
 80013cc:	20011df8 	.word	0x20011df8
 80013d0:	40021000 	.word	0x40021000
 80013d4:	48001000 	.word	0x48001000
 80013d8:	40016100 	.word	0x40016100
 80013dc:	20000110 	.word	0x20000110
 80013e0:	40020044 	.word	0x40020044

080013e4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0ac      	sub	sp, #176	; 0xb0
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	2288      	movs	r2, #136	; 0x88
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f003 fcb1 	bl	8004d6c <memset>
  if(DFSDM1_Init == 0)
 800140a:	4b2a      	ldr	r3, [pc, #168]	; (80014b4 <HAL_DFSDM_ChannelMspInit+0xd0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d14b      	bne.n	80014aa <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001412:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001416:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	4618      	mov	r0, r3
 8001424:	f002 fb46 	bl	8003ab4 <HAL_RCCEx_PeriphCLKConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800142e:	f7ff fe95 	bl	800115c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001432:	4b21      	ldr	r3, [pc, #132]	; (80014b8 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	3301      	adds	r3, #1
 8001438:	4a1f      	ldr	r2, [pc, #124]	; (80014b8 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800143a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800143c:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d10b      	bne.n	800145c <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001444:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001448:	4a1c      	ldr	r2, [pc, #112]	; (80014bc <HAL_DFSDM_ChannelMspInit+0xd8>)
 800144a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800144e:	6613      	str	r3, [r2, #96]	; 0x60
 8001450:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001454:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800145c:	4b17      	ldr	r3, [pc, #92]	; (80014bc <HAL_DFSDM_ChannelMspInit+0xd8>)
 800145e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001460:	4a16      	ldr	r2, [pc, #88]	; (80014bc <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001462:	f043 0310 	orr.w	r3, r3, #16
 8001466:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001468:	4b14      	ldr	r3, [pc, #80]	; (80014bc <HAL_DFSDM_ChannelMspInit+0xd8>)
 800146a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146c:	f003 0310 	and.w	r3, r3, #16
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001474:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001478:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	2302      	movs	r3, #2
 800147e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800148e:	2306      	movs	r3, #6
 8001490:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001494:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001498:	4619      	mov	r1, r3
 800149a:	4809      	ldr	r0, [pc, #36]	; (80014c0 <HAL_DFSDM_ChannelMspInit+0xdc>)
 800149c:	f001 faea 	bl	8002a74 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	3301      	adds	r3, #1
 80014a6:	4a03      	ldr	r2, [pc, #12]	; (80014b4 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80014a8:	6013      	str	r3, [r2, #0]
  }

}
 80014aa:	bf00      	nop
 80014ac:	37b0      	adds	r7, #176	; 0xb0
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20011dfc 	.word	0x20011dfc
 80014b8:	20011df8 	.word	0x20011df8
 80014bc:	40021000 	.word	0x40021000
 80014c0:	48001000 	.word	0x48001000

080014c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014d4:	d113      	bne.n	80014fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <HAL_TIM_Base_MspInit+0x44>)
 80014d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014da:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <HAL_TIM_Base_MspInit+0x44>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6593      	str	r3, [r2, #88]	; 0x58
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_TIM_Base_MspInit+0x44>)
 80014e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2100      	movs	r1, #0
 80014f2:	201c      	movs	r0, #28
 80014f4:	f000 fa09 	bl	800190a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014f8:	201c      	movs	r0, #28
 80014fa:	f000 fa22 	bl	8001942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40021000 	.word	0x40021000

0800150c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <NMI_Handler+0x4>

08001512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <HardFault_Handler+0x4>

08001518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <MemManage_Handler+0x4>

0800151e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <BusFault_Handler+0x4>

08001524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <UsageFault_Handler+0x4>

0800152a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001558:	f000 f8b8 	bl	80016cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}

08001560 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001564:	4802      	ldr	r0, [pc, #8]	; (8001570 <DMA1_Channel3_IRQHandler+0x10>)
 8001566:	f001 f9a5 	bl	80028b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	2000003c 	.word	0x2000003c

08001574 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001578:	4802      	ldr	r0, [pc, #8]	; (8001584 <DMA1_Channel4_IRQHandler+0x10>)
 800157a:	f001 f99b 	bl	80028b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000110 	.word	0x20000110

08001588 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800158c:	4802      	ldr	r0, [pc, #8]	; (8001598 <TIM2_IRQHandler+0x10>)
 800158e:	f003 f815 	bl	80045bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000158 	.word	0x20000158

0800159c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PushButton_Pin);
 80015a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015a4:	f001 fc42 	bl	8002e2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}

080015ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <SystemInit+0x20>)
 80015b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015b6:	4a05      	ldr	r2, [pc, #20]	; (80015cc <SystemInit+0x20>)
 80015b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001608 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015d4:	f7ff ffea 	bl	80015ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015d8:	480c      	ldr	r0, [pc, #48]	; (800160c <LoopForever+0x6>)
  ldr r1, =_edata
 80015da:	490d      	ldr	r1, [pc, #52]	; (8001610 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015dc:	4a0d      	ldr	r2, [pc, #52]	; (8001614 <LoopForever+0xe>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e0:	e002      	b.n	80015e8 <LoopCopyDataInit>

080015e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e6:	3304      	adds	r3, #4

080015e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ec:	d3f9      	bcc.n	80015e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ee:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015f0:	4c0a      	ldr	r4, [pc, #40]	; (800161c <LoopForever+0x16>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f4:	e001      	b.n	80015fa <LoopFillZerobss>

080015f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f8:	3204      	adds	r2, #4

080015fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015fc:	d3fb      	bcc.n	80015f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015fe:	f003 fbbd 	bl	8004d7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001602:	f7ff fa2f 	bl	8000a64 <main>

08001606 <LoopForever>:

LoopForever:
    b LoopForever
 8001606:	e7fe      	b.n	8001606 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001608:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800160c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001610:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001614:	08004e24 	.word	0x08004e24
  ldr r2, =_sbss
 8001618:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800161c:	20011e28 	.word	0x20011e28

08001620 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001620:	e7fe      	b.n	8001620 <ADC1_2_IRQHandler>

08001622 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800162c:	2003      	movs	r0, #3
 800162e:	f000 f961 	bl	80018f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001632:	2000      	movs	r0, #0
 8001634:	f000 f80e 	bl	8001654 <HAL_InitTick>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d002      	beq.n	8001644 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	71fb      	strb	r3, [r7, #7]
 8001642:	e001      	b.n	8001648 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001644:	f7ff fd90 	bl	8001168 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001648:	79fb      	ldrb	r3, [r7, #7]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001660:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <HAL_InitTick+0x6c>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d023      	beq.n	80016b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001668:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <HAL_InitTick+0x70>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <HAL_InitTick+0x6c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001676:	fbb3 f3f1 	udiv	r3, r3, r1
 800167a:	fbb2 f3f3 	udiv	r3, r2, r3
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f96d 	bl	800195e <HAL_SYSTICK_Config>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10f      	bne.n	80016aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b0f      	cmp	r3, #15
 800168e:	d809      	bhi.n	80016a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001690:	2200      	movs	r2, #0
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	f04f 30ff 	mov.w	r0, #4294967295
 8001698:	f000 f937 	bl	800190a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800169c:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <HAL_InitTick+0x74>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e007      	b.n	80016b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	73fb      	strb	r3, [r7, #15]
 80016a8:	e004      	b.n	80016b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	73fb      	strb	r3, [r7, #15]
 80016ae:	e001      	b.n	80016b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000008 	.word	0x20000008
 80016c4:	20000000 	.word	0x20000000
 80016c8:	20000004 	.word	0x20000004

080016cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_IncTick+0x20>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_IncTick+0x24>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <HAL_IncTick+0x24>)
 80016de:	6013      	str	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000008 	.word	0x20000008
 80016f0:	20011e00 	.word	0x20011e00

080016f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return uwTick;
 80016f8:	4b03      	ldr	r3, [pc, #12]	; (8001708 <HAL_GetTick+0x14>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20011e00 	.word	0x20011e00

0800170c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001714:	f7ff ffee 	bl	80016f4 <HAL_GetTick>
 8001718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001724:	d005      	beq.n	8001732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_Delay+0x44>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4413      	add	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001732:	bf00      	nop
 8001734:	f7ff ffde 	bl	80016f4 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	429a      	cmp	r2, r3
 8001742:	d8f7      	bhi.n	8001734 <HAL_Delay+0x28>
  {
  }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000008 	.word	0x20000008

08001754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001770:	4013      	ands	r3, r2
 8001772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800177c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001786:	4a04      	ldr	r2, [pc, #16]	; (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	60d3      	str	r3, [r2, #12]
}
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <__NVIC_GetPriorityGrouping+0x18>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	0a1b      	lsrs	r3, r3, #8
 80017a6:	f003 0307 	and.w	r3, r3, #7
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	db0b      	blt.n	80017e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	f003 021f 	and.w	r2, r3, #31
 80017d0:	4907      	ldr	r1, [pc, #28]	; (80017f0 <__NVIC_EnableIRQ+0x38>)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	095b      	lsrs	r3, r3, #5
 80017d8:	2001      	movs	r0, #1
 80017da:	fa00 f202 	lsl.w	r2, r0, r2
 80017de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000e100 	.word	0xe000e100

080017f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	6039      	str	r1, [r7, #0]
 80017fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001804:	2b00      	cmp	r3, #0
 8001806:	db0a      	blt.n	800181e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	b2da      	uxtb	r2, r3
 800180c:	490c      	ldr	r1, [pc, #48]	; (8001840 <__NVIC_SetPriority+0x4c>)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	0112      	lsls	r2, r2, #4
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	440b      	add	r3, r1
 8001818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800181c:	e00a      	b.n	8001834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	b2da      	uxtb	r2, r3
 8001822:	4908      	ldr	r1, [pc, #32]	; (8001844 <__NVIC_SetPriority+0x50>)
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	3b04      	subs	r3, #4
 800182c:	0112      	lsls	r2, r2, #4
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	440b      	add	r3, r1
 8001832:	761a      	strb	r2, [r3, #24]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000e100 	.word	0xe000e100
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001848:	b480      	push	{r7}
 800184a:	b089      	sub	sp, #36	; 0x24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f1c3 0307 	rsb	r3, r3, #7
 8001862:	2b04      	cmp	r3, #4
 8001864:	bf28      	it	cs
 8001866:	2304      	movcs	r3, #4
 8001868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3304      	adds	r3, #4
 800186e:	2b06      	cmp	r3, #6
 8001870:	d902      	bls.n	8001878 <NVIC_EncodePriority+0x30>
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3b03      	subs	r3, #3
 8001876:	e000      	b.n	800187a <NVIC_EncodePriority+0x32>
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	f04f 32ff 	mov.w	r2, #4294967295
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43da      	mvns	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	401a      	ands	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001890:	f04f 31ff 	mov.w	r1, #4294967295
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fa01 f303 	lsl.w	r3, r1, r3
 800189a:	43d9      	mvns	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	4313      	orrs	r3, r2
         );
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3724      	adds	r7, #36	; 0x24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
	...

080018b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c0:	d301      	bcc.n	80018c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c2:	2301      	movs	r3, #1
 80018c4:	e00f      	b.n	80018e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c6:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <SysTick_Config+0x40>)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ce:	210f      	movs	r1, #15
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295
 80018d4:	f7ff ff8e 	bl	80017f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <SysTick_Config+0x40>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018de:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <SysTick_Config+0x40>)
 80018e0:	2207      	movs	r2, #7
 80018e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	e000e010 	.word	0xe000e010

080018f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ff29 	bl	8001754 <__NVIC_SetPriorityGrouping>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	4603      	mov	r3, r0
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800191c:	f7ff ff3e 	bl	800179c <__NVIC_GetPriorityGrouping>
 8001920:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	6978      	ldr	r0, [r7, #20]
 8001928:	f7ff ff8e 	bl	8001848 <NVIC_EncodePriority>
 800192c:	4602      	mov	r2, r0
 800192e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ff5d 	bl	80017f4 <__NVIC_SetPriority>
}
 800193a:	bf00      	nop
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800194c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff31 	bl	80017b8 <__NVIC_EnableIRQ>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ffa2 	bl	80018b0 <SysTick_Config>
 800196c:	4603      	mov	r3, r0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e014      	b.n	80019b2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	791b      	ldrb	r3, [r3, #4]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d105      	bne.n	800199e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff fc09 	bl	80011b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2202      	movs	r2, #2
 80019a2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
 80019c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	795b      	ldrb	r3, [r3, #5]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d101      	bne.n	80019da <HAL_DAC_Start_DMA+0x1e>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e0ab      	b.n	8001b32 <HAL_DAC_Start_DMA+0x176>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2201      	movs	r2, #1
 80019de:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2202      	movs	r2, #2
 80019e4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d12f      	bne.n	8001a4c <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	4a52      	ldr	r2, [pc, #328]	; (8001b3c <HAL_DAC_Start_DMA+0x180>)
 80019f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	4a51      	ldr	r2, [pc, #324]	; (8001b40 <HAL_DAC_Start_DMA+0x184>)
 80019fa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	4a50      	ldr	r2, [pc, #320]	; (8001b44 <HAL_DAC_Start_DMA+0x188>)
 8001a02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a12:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	2b08      	cmp	r3, #8
 8001a18:	d013      	beq.n	8001a42 <HAL_DAC_Start_DMA+0x86>
 8001a1a:	6a3b      	ldr	r3, [r7, #32]
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d845      	bhi.n	8001aac <HAL_DAC_Start_DMA+0xf0>
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_DAC_Start_DMA+0x72>
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d005      	beq.n	8001a38 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001a2c:	e03e      	b.n	8001aac <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	3308      	adds	r3, #8
 8001a34:	613b      	str	r3, [r7, #16]
        break;
 8001a36:	e03c      	b.n	8001ab2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	330c      	adds	r3, #12
 8001a3e:	613b      	str	r3, [r7, #16]
        break;
 8001a40:	e037      	b.n	8001ab2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	3310      	adds	r3, #16
 8001a48:	613b      	str	r3, [r7, #16]
        break;
 8001a4a:	e032      	b.n	8001ab2 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	4a3d      	ldr	r2, [pc, #244]	; (8001b48 <HAL_DAC_Start_DMA+0x18c>)
 8001a52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	4a3c      	ldr	r2, [pc, #240]	; (8001b4c <HAL_DAC_Start_DMA+0x190>)
 8001a5a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	4a3b      	ldr	r2, [pc, #236]	; (8001b50 <HAL_DAC_Start_DMA+0x194>)
 8001a62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a72:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d013      	beq.n	8001aa2 <HAL_DAC_Start_DMA+0xe6>
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d817      	bhi.n	8001ab0 <HAL_DAC_Start_DMA+0xf4>
 8001a80:	6a3b      	ldr	r3, [r7, #32]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_DAC_Start_DMA+0xd2>
 8001a86:	6a3b      	ldr	r3, [r7, #32]
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d005      	beq.n	8001a98 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001a8c:	e010      	b.n	8001ab0 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	3314      	adds	r3, #20
 8001a94:	613b      	str	r3, [r7, #16]
        break;
 8001a96:	e00c      	b.n	8001ab2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	3318      	adds	r3, #24
 8001a9e:	613b      	str	r3, [r7, #16]
        break;
 8001aa0:	e007      	b.n	8001ab2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	331c      	adds	r3, #28
 8001aa8:	613b      	str	r3, [r7, #16]
        break;
 8001aaa:	e002      	b.n	8001ab2 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001aac:	bf00      	nop
 8001aae:	e000      	b.n	8001ab2 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001ab0:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d111      	bne.n	8001adc <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ac6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6898      	ldr	r0, [r3, #8]
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	f000 fe51 	bl	8002778 <HAL_DMA_Start_IT>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	75fb      	strb	r3, [r7, #23]
 8001ada:	e010      	b.n	8001afe <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001aea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	68d8      	ldr	r0, [r3, #12]
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	f000 fe3f 	bl	8002778 <HAL_DMA_Start_IT>
 8001afa:	4603      	mov	r3, r0
 8001afc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001b04:	7dfb      	ldrb	r3, [r7, #23]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10c      	bne.n	8001b24 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6819      	ldr	r1, [r3, #0]
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	f003 0310 	and.w	r3, r3, #16
 8001b16:	2201      	movs	r2, #1
 8001b18:	409a      	lsls	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	e005      	b.n	8001b30 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	f043 0204 	orr.w	r2, r3, #4
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	08001e69 	.word	0x08001e69
 8001b40:	08001e8b 	.word	0x08001e8b
 8001b44:	08001ea7 	.word	0x08001ea7
 8001b48:	08001f11 	.word	0x08001f11
 8001b4c:	08001f33 	.word	0x08001f33
 8001b50:	08001f4f 	.word	0x08001f4f

08001b54 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6819      	ldr	r1, [r3, #0]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	f003 0310 	and.w	r3, r3, #16
 8001b6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43da      	mvns	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	400a      	ands	r2, r1
 8001b7a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6819      	ldr	r1, [r3, #0]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	f003 0310 	and.w	r3, r3, #16
 8001b88:	2201      	movs	r2, #1
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43da      	mvns	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	400a      	ands	r2, r1
 8001b96:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10d      	bne.n	8001bba <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 fe48 	bl	8002838 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	e00c      	b.n	8001bd4 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 fe3a 	bl	8002838 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001bd2:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b088      	sub	sp, #32
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	60f8      	str	r0, [r7, #12]
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	795b      	ldrb	r3, [r3, #5]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d101      	bne.n	8001c36 <HAL_DAC_ConfigChannel+0x1c>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e114      	b.n	8001e60 <HAL_DAC_ConfigChannel+0x246>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	f040 8081 	bne.w	8001d4e <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001c4c:	f7ff fd52 	bl	80016f4 <HAL_GetTick>
 8001c50:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d140      	bne.n	8001cda <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001c58:	e018      	b.n	8001c8c <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001c5a:	f7ff fd4b 	bl	80016f4 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d911      	bls.n	8001c8c <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00a      	beq.n	8001c8c <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	f043 0208 	orr.w	r2, r3, #8
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2203      	movs	r2, #3
 8001c86:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e0e9      	b.n	8001e60 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1df      	bne.n	8001c5a <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	f7ff fd36 	bl	800170c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68ba      	ldr	r2, [r7, #8]
 8001ca6:	6992      	ldr	r2, [r2, #24]
 8001ca8:	641a      	str	r2, [r3, #64]	; 0x40
 8001caa:	e023      	b.n	8001cf4 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001cac:	f7ff fd22 	bl	80016f4 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d90f      	bls.n	8001cda <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	da0a      	bge.n	8001cda <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	f043 0208 	orr.w	r2, r3, #8
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e0c2      	b.n	8001e60 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	dbe3      	blt.n	8001cac <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	f7ff fd11 	bl	800170c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	6992      	ldr	r2, [r2, #24]
 8001cf2:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f003 0310 	and.w	r3, r3, #16
 8001d00:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001d04:	fa01 f303 	lsl.w	r3, r1, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	ea02 0103 	and.w	r1, r2, r3
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	69da      	ldr	r2, [r3, #28]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f003 0310 	and.w	r3, r3, #16
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f003 0310 	and.w	r3, r3, #16
 8001d2e:	21ff      	movs	r1, #255	; 0xff
 8001d30:	fa01 f303 	lsl.w	r3, r1, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	ea02 0103 	and.w	r1, r2, r3
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	6a1a      	ldr	r2, [r3, #32]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f003 0310 	and.w	r3, r3, #16
 8001d44:	409a      	lsls	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d11d      	bne.n	8001d92 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f003 0310 	and.w	r3, r3, #16
 8001d64:	221f      	movs	r2, #31
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f003 0310 	and.w	r3, r3, #16
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d98:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f003 0310 	and.w	r3, r3, #16
 8001da0:	2207      	movs	r2, #7
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	431a      	orrs	r2, r3
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6819      	ldr	r1, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f003 0310 	and.w	r3, r3, #16
 8001de6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43da      	mvns	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	400a      	ands	r2, r1
 8001df6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	f640 72fc 	movw	r2, #4092	; 0xffc
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4013      	ands	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f003 0310 	and.w	r3, r3, #16
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6819      	ldr	r1, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	22c0      	movs	r2, #192	; 0xc0
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43da      	mvns	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	400a      	ands	r2, r1
 8001e50:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2201      	movs	r2, #1
 8001e56:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3720      	adds	r7, #32
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e74:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f7ff feb1 	bl	8001bde <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	711a      	strb	r2, [r3, #4]
}
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b084      	sub	sp, #16
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e96:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f7ff feaa 	bl	8001bf2 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b084      	sub	sp, #16
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	f043 0204 	orr.w	r2, r3, #4
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f7ff fea0 	bl	8001c06 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	711a      	strb	r2, [r3, #4]
}
 8001ecc:	bf00      	nop
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f7ff ffd8 	bl	8001ed4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2201      	movs	r2, #1
 8001f28:	711a      	strb	r2, [r3, #4]
}
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f7ff ffd1 	bl	8001ee8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b084      	sub	sp, #16
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	f043 0204 	orr.w	r2, r3, #4
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f7ff ffc7 	bl	8001efc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2201      	movs	r2, #1
 8001f72:	711a      	strb	r2, [r3, #4]
}
 8001f74:	bf00      	nop
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e0ac      	b.n	80020e8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 fa96 	bl	80024c4 <DFSDM_GetChannelFromInstance>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	4a55      	ldr	r2, [pc, #340]	; (80020f0 <HAL_DFSDM_ChannelInit+0x174>)
 8001f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e09f      	b.n	80020e8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff fa1b 	bl	80013e4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001fae:	4b51      	ldr	r3, [pc, #324]	; (80020f4 <HAL_DFSDM_ChannelInit+0x178>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	4a4f      	ldr	r2, [pc, #316]	; (80020f4 <HAL_DFSDM_ChannelInit+0x178>)
 8001fb6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001fb8:	4b4e      	ldr	r3, [pc, #312]	; (80020f4 <HAL_DFSDM_ChannelInit+0x178>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d125      	bne.n	800200c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001fc0:	4b4d      	ldr	r3, [pc, #308]	; (80020f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a4c      	ldr	r2, [pc, #304]	; (80020f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001fc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001fca:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001fcc:	4b4a      	ldr	r3, [pc, #296]	; (80020f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	4948      	ldr	r1, [pc, #288]	; (80020f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001fda:	4b47      	ldr	r3, [pc, #284]	; (80020f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a46      	ldr	r2, [pc, #280]	; (80020f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001fe0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001fe4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	791b      	ldrb	r3, [r3, #4]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d108      	bne.n	8002000 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001fee:	4b42      	ldr	r3, [pc, #264]	; (80020f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	041b      	lsls	r3, r3, #16
 8001ffa:	493f      	ldr	r1, [pc, #252]	; (80020f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002000:	4b3d      	ldr	r3, [pc, #244]	; (80020f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a3c      	ldr	r2, [pc, #240]	; (80020f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002006:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800200a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800201a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6819      	ldr	r1, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800202a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002030:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 020f 	bic.w	r2, r2, #15
 8002048:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6819      	ldr	r1, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002070:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6899      	ldr	r1, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002080:	3b01      	subs	r3, #1
 8002082:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f002 0207 	and.w	r2, r2, #7
 800209c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6859      	ldr	r1, [r3, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80020b0:	431a      	orrs	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020c8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 f9f4 	bl	80024c4 <DFSDM_GetChannelFromInstance>
 80020dc:	4602      	mov	r2, r0
 80020de:	4904      	ldr	r1, [pc, #16]	; (80020f0 <HAL_DFSDM_ChannelInit+0x174>)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20011e08 	.word	0x20011e08
 80020f4:	20011e04 	.word	0x20011e04
 80020f8:	40016000 	.word	0x40016000

080020fc <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e0ca      	b.n	80022a4 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a66      	ldr	r2, [pc, #408]	; (80022ac <HAL_DFSDM_FilterInit+0x1b0>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d109      	bne.n	800212c <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800211c:	2b01      	cmp	r3, #1
 800211e:	d003      	beq.n	8002128 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e0bb      	b.n	80022a4 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff f8a1 	bl	800128c <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002158:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	7a1b      	ldrb	r3, [r3, #8]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d108      	bne.n	8002174 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	e007      	b.n	8002184 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002182:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	7a5b      	ldrb	r3, [r3, #9]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d108      	bne.n	800219e <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	e007      	b.n	80021ae <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80021ac:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 80021bc:	f023 0308 	bic.w	r3, r3, #8
 80021c0:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d108      	bne.n	80021dc <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6819      	ldr	r1, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	695a      	ldr	r2, [r3, #20]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	7c1b      	ldrb	r3, [r3, #16]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d108      	bne.n	80021f6 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0210 	orr.w	r2, r2, #16
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	e007      	b.n	8002206 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0210 	bic.w	r2, r2, #16
 8002204:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	7c5b      	ldrb	r3, [r3, #17]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d108      	bne.n	8002220 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f042 0220 	orr.w	r2, r2, #32
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	e007      	b.n	8002230 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0220 	bic.w	r2, r2, #32
 800222e:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 800223e:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8002242:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6959      	ldr	r1, [r3, #20]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	3b01      	subs	r3, #1
 8002254:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002256:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800225e:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	699a      	ldr	r2, [r3, #24]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	7c1a      	ldrb	r2, [r3, #16]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0201 	orr.w	r2, r2, #1
 8002298:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40016100 	.word	0x40016100

080022b0 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d02e      	beq.n	8002328 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80022d0:	2bff      	cmp	r3, #255	; 0xff
 80022d2:	d029      	beq.n	8002328 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e6:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d10d      	bne.n	800230a <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	021b      	lsls	r3, r3, #8
 80022f8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80022fc:	431a      	orrs	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	e00a      	b.n	8002320 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6819      	ldr	r1, [r3, #0]
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	631a      	str	r2, [r3, #48]	; 0x30
 8002326:	e001      	b.n	800232c <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 800232c:	7dfb      	ldrb	r3, [r7, #23]
}
 800232e:	4618      	mov	r0, r3
 8002330:	371c      	adds	r7, #28
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
	...

0800233c <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d102      	bne.n	800235e <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	75fb      	strb	r3, [r7, #23]
 800235c:	e064      	b.n	8002428 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002368:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800236c:	d002      	beq.n	8002374 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	75fb      	strb	r3, [r7, #23]
 8002372:	e059      	b.n	8002428 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10e      	bne.n	800239a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10a      	bne.n	800239a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002388:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800238a:	2b00      	cmp	r3, #0
 800238c:	d105      	bne.n	800239a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d002      	beq.n	800239a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	75fb      	strb	r3, [r7, #23]
 8002398:	e046      	b.n	8002428 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10b      	bne.n	80023ba <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d107      	bne.n	80023ba <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ae:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80023b0:	2b20      	cmp	r3, #32
 80023b2:	d102      	bne.n	80023ba <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	75fb      	strb	r3, [r7, #23]
 80023b8:	e036      	b.n	8002428 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d004      	beq.n	80023ce <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	d12a      	bne.n	8002424 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d2:	4a18      	ldr	r2, [pc, #96]	; (8002434 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 80023d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023da:	4a17      	ldr	r2, [pc, #92]	; (8002438 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 80023dc:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e2:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 80023e4:	2b20      	cmp	r3, #32
 80023e6:	d101      	bne.n	80023ec <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 80023e8:	4a14      	ldr	r2, [pc, #80]	; (800243c <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 80023ea:	e000      	b.n	80023ee <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 80023ec:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	331c      	adds	r3, #28
 80023fe:	4619      	mov	r1, r3
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f000 f9b8 	bl	8002778 <HAL_DMA_Start_IT>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d006      	beq.n	800241c <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	22ff      	movs	r2, #255	; 0xff
 8002412:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800241a:	e005      	b.n	8002428 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 f89d 	bl	800255c <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002422:	e001      	b.n	8002428 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8002428:	7dfb      	ldrb	r3, [r7, #23]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	08002485 	.word	0x08002485
 8002438:	080024a1 	.word	0x080024a1
 800243c:	08002469 	.word	0x08002469

08002440 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002474:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f7ff ffe2 	bl	8002440 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 800247c:	bf00      	nop
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002490:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f7fe fdc0 	bl	8001018 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8002498:	bf00      	nop
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ac:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2203      	movs	r2, #3
 80024b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f7ff ffcd 	bl	8002454 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 80024ba:	bf00      	nop
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a1c      	ldr	r2, [pc, #112]	; (8002540 <DFSDM_GetChannelFromInstance+0x7c>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d102      	bne.n	80024da <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	e02b      	b.n	8002532 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a19      	ldr	r2, [pc, #100]	; (8002544 <DFSDM_GetChannelFromInstance+0x80>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d102      	bne.n	80024e8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80024e2:	2301      	movs	r3, #1
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	e024      	b.n	8002532 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a17      	ldr	r2, [pc, #92]	; (8002548 <DFSDM_GetChannelFromInstance+0x84>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d102      	bne.n	80024f6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80024f0:	2302      	movs	r3, #2
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	e01d      	b.n	8002532 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <DFSDM_GetChannelFromInstance+0x88>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d102      	bne.n	8002504 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80024fe:	2304      	movs	r3, #4
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	e016      	b.n	8002532 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a12      	ldr	r2, [pc, #72]	; (8002550 <DFSDM_GetChannelFromInstance+0x8c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d102      	bne.n	8002512 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800250c:	2305      	movs	r3, #5
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	e00f      	b.n	8002532 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a0f      	ldr	r2, [pc, #60]	; (8002554 <DFSDM_GetChannelFromInstance+0x90>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d102      	bne.n	8002520 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800251a:	2306      	movs	r3, #6
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	e008      	b.n	8002532 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a0d      	ldr	r2, [pc, #52]	; (8002558 <DFSDM_GetChannelFromInstance+0x94>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d102      	bne.n	800252e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002528:	2307      	movs	r3, #7
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	e001      	b.n	8002532 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800252e:	2303      	movs	r3, #3
 8002530:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002532:	68fb      	ldr	r3, [r7, #12]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	40016000 	.word	0x40016000
 8002544:	40016020 	.word	0x40016020
 8002548:	40016040 	.word	0x40016040
 800254c:	40016080 	.word	0x40016080
 8002550:	400160a0 	.word	0x400160a0
 8002554:	400160c0 	.word	0x400160c0
 8002558:	400160e0 	.word	0x400160e0

0800255c <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002568:	2b00      	cmp	r3, #0
 800256a:	d108      	bne.n	800257e <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	e033      	b.n	80025e6 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0201 	bic.w	r2, r2, #1
 800258c:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800259c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 0201 	orr.w	r2, r2, #1
 80025ac:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80025b4:	2b03      	cmp	r3, #3
 80025b6:	d116      	bne.n	80025e6 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d107      	bne.n	80025d0 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0202 	orr.w	r2, r2, #2
 80025ce:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d102      	bne.n	80025e0 <DFSDM_RegConvStart+0x84>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	e000      	b.n	80025e2 <DFSDM_RegConvStart+0x86>
 80025e0:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <DFSDM_RegConvStart+0x98>
 80025f0:	2202      	movs	r2, #2
 80025f2:	e000      	b.n	80025f6 <DFSDM_RegConvStart+0x9a>
 80025f4:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e098      	b.n	800274c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	461a      	mov	r2, r3
 8002620:	4b4d      	ldr	r3, [pc, #308]	; (8002758 <HAL_DMA_Init+0x150>)
 8002622:	429a      	cmp	r2, r3
 8002624:	d80f      	bhi.n	8002646 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	4b4b      	ldr	r3, [pc, #300]	; (800275c <HAL_DMA_Init+0x154>)
 800262e:	4413      	add	r3, r2
 8002630:	4a4b      	ldr	r2, [pc, #300]	; (8002760 <HAL_DMA_Init+0x158>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	091b      	lsrs	r3, r3, #4
 8002638:	009a      	lsls	r2, r3, #2
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a48      	ldr	r2, [pc, #288]	; (8002764 <HAL_DMA_Init+0x15c>)
 8002642:	641a      	str	r2, [r3, #64]	; 0x40
 8002644:	e00e      	b.n	8002664 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	4b46      	ldr	r3, [pc, #280]	; (8002768 <HAL_DMA_Init+0x160>)
 800264e:	4413      	add	r3, r2
 8002650:	4a43      	ldr	r2, [pc, #268]	; (8002760 <HAL_DMA_Init+0x158>)
 8002652:	fba2 2303 	umull	r2, r3, r2, r3
 8002656:	091b      	lsrs	r3, r3, #4
 8002658:	009a      	lsls	r2, r3, #2
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a42      	ldr	r2, [pc, #264]	; (800276c <HAL_DMA_Init+0x164>)
 8002662:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800267a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800267e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002688:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002694:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026be:	d039      	beq.n	8002734 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	4a27      	ldr	r2, [pc, #156]	; (8002764 <HAL_DMA_Init+0x15c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d11a      	bne.n	8002700 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80026ca:	4b29      	ldr	r3, [pc, #164]	; (8002770 <HAL_DMA_Init+0x168>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	f003 031c 	and.w	r3, r3, #28
 80026d6:	210f      	movs	r1, #15
 80026d8:	fa01 f303 	lsl.w	r3, r1, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	4924      	ldr	r1, [pc, #144]	; (8002770 <HAL_DMA_Init+0x168>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80026e4:	4b22      	ldr	r3, [pc, #136]	; (8002770 <HAL_DMA_Init+0x168>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6859      	ldr	r1, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f0:	f003 031c 	and.w	r3, r3, #28
 80026f4:	fa01 f303 	lsl.w	r3, r1, r3
 80026f8:	491d      	ldr	r1, [pc, #116]	; (8002770 <HAL_DMA_Init+0x168>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]
 80026fe:	e019      	b.n	8002734 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002700:	4b1c      	ldr	r3, [pc, #112]	; (8002774 <HAL_DMA_Init+0x16c>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002708:	f003 031c 	and.w	r3, r3, #28
 800270c:	210f      	movs	r1, #15
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	4917      	ldr	r1, [pc, #92]	; (8002774 <HAL_DMA_Init+0x16c>)
 8002716:	4013      	ands	r3, r2
 8002718:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800271a:	4b16      	ldr	r3, [pc, #88]	; (8002774 <HAL_DMA_Init+0x16c>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6859      	ldr	r1, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	f003 031c 	and.w	r3, r3, #28
 800272a:	fa01 f303 	lsl.w	r3, r1, r3
 800272e:	4911      	ldr	r1, [pc, #68]	; (8002774 <HAL_DMA_Init+0x16c>)
 8002730:	4313      	orrs	r3, r2
 8002732:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	40020407 	.word	0x40020407
 800275c:	bffdfff8 	.word	0xbffdfff8
 8002760:	cccccccd 	.word	0xcccccccd
 8002764:	40020000 	.word	0x40020000
 8002768:	bffdfbf8 	.word	0xbffdfbf8
 800276c:	40020400 	.word	0x40020400
 8002770:	400200a8 	.word	0x400200a8
 8002774:	400204a8 	.word	0x400204a8

08002778 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_DMA_Start_IT+0x20>
 8002794:	2302      	movs	r3, #2
 8002796:	e04b      	b.n	8002830 <HAL_DMA_Start_IT+0xb8>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d13a      	bne.n	8002822 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2202      	movs	r2, #2
 80027b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0201 	bic.w	r2, r2, #1
 80027c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	68b9      	ldr	r1, [r7, #8]
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 f91e 	bl	8002a12 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d008      	beq.n	80027f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f042 020e 	orr.w	r2, r2, #14
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	e00f      	b.n	8002810 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0204 	bic.w	r2, r2, #4
 80027fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 020a 	orr.w	r2, r2, #10
 800280e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0201 	orr.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	e005      	b.n	800282e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800282a:	2302      	movs	r3, #2
 800282c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800282e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d008      	beq.n	8002862 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2204      	movs	r2, #4
 8002854:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e022      	b.n	80028a8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 020e 	bic.w	r2, r2, #14
 8002870:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0201 	bic.w	r2, r2, #1
 8002880:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	f003 021c 	and.w	r2, r3, #28
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	2101      	movs	r1, #1
 8002890:	fa01 f202 	lsl.w	r2, r1, r2
 8002894:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d0:	f003 031c 	and.w	r3, r3, #28
 80028d4:	2204      	movs	r2, #4
 80028d6:	409a      	lsls	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d026      	beq.n	800292e <HAL_DMA_IRQHandler+0x7a>
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d021      	beq.n	800292e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d107      	bne.n	8002908 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0204 	bic.w	r2, r2, #4
 8002906:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	f003 021c 	and.w	r2, r3, #28
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	2104      	movs	r1, #4
 8002916:	fa01 f202 	lsl.w	r2, r1, r2
 800291a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002920:	2b00      	cmp	r3, #0
 8002922:	d071      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800292c:	e06c      	b.n	8002a08 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002932:	f003 031c 	and.w	r3, r3, #28
 8002936:	2202      	movs	r2, #2
 8002938:	409a      	lsls	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4013      	ands	r3, r2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d02e      	beq.n	80029a0 <HAL_DMA_IRQHandler+0xec>
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d029      	beq.n	80029a0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0320 	and.w	r3, r3, #32
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10b      	bne.n	8002972 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 020a 	bic.w	r2, r2, #10
 8002968:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	f003 021c 	and.w	r2, r3, #28
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	2102      	movs	r1, #2
 8002980:	fa01 f202 	lsl.w	r2, r1, r2
 8002984:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002992:	2b00      	cmp	r3, #0
 8002994:	d038      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800299e:	e033      	b.n	8002a08 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a4:	f003 031c 	and.w	r3, r3, #28
 80029a8:	2208      	movs	r2, #8
 80029aa:	409a      	lsls	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4013      	ands	r3, r2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d02a      	beq.n	8002a0a <HAL_DMA_IRQHandler+0x156>
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d025      	beq.n	8002a0a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 020e 	bic.w	r2, r2, #14
 80029cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d2:	f003 021c 	and.w	r2, r3, #28
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	2101      	movs	r1, #1
 80029dc:	fa01 f202 	lsl.w	r2, r1, r2
 80029e0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d004      	beq.n	8002a0a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a08:	bf00      	nop
 8002a0a:	bf00      	nop
}
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b085      	sub	sp, #20
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	607a      	str	r2, [r7, #4]
 8002a1e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a24:	f003 021c 	and.w	r2, r3, #28
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a32:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b10      	cmp	r3, #16
 8002a42:	d108      	bne.n	8002a56 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a54:	e007      	b.n	8002a66 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	60da      	str	r2, [r3, #12]
}
 8002a66:	bf00      	nop
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
	...

08002a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a82:	e17f      	b.n	8002d84 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	2101      	movs	r1, #1
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a90:	4013      	ands	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 8171 	beq.w	8002d7e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d005      	beq.n	8002ab4 <HAL_GPIO_Init+0x40>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d130      	bne.n	8002b16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	2203      	movs	r2, #3
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002aea:	2201      	movs	r2, #1
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43db      	mvns	r3, r3
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4013      	ands	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	091b      	lsrs	r3, r3, #4
 8002b00:	f003 0201 	and.w	r2, r3, #1
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	d118      	bne.n	8002b54 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b28:	2201      	movs	r2, #1
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4013      	ands	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	08db      	lsrs	r3, r3, #3
 8002b3e:	f003 0201 	and.w	r2, r3, #1
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	d017      	beq.n	8002b90 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4013      	ands	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d123      	bne.n	8002be4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	08da      	lsrs	r2, r3, #3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3208      	adds	r2, #8
 8002ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	220f      	movs	r2, #15
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	08da      	lsrs	r2, r3, #3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3208      	adds	r2, #8
 8002bde:	6939      	ldr	r1, [r7, #16]
 8002be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	2203      	movs	r2, #3
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 0203 	and.w	r2, r3, #3
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 80ac 	beq.w	8002d7e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c26:	4b5f      	ldr	r3, [pc, #380]	; (8002da4 <HAL_GPIO_Init+0x330>)
 8002c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c2a:	4a5e      	ldr	r2, [pc, #376]	; (8002da4 <HAL_GPIO_Init+0x330>)
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	6613      	str	r3, [r2, #96]	; 0x60
 8002c32:	4b5c      	ldr	r3, [pc, #368]	; (8002da4 <HAL_GPIO_Init+0x330>)
 8002c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	60bb      	str	r3, [r7, #8]
 8002c3c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c3e:	4a5a      	ldr	r2, [pc, #360]	; (8002da8 <HAL_GPIO_Init+0x334>)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	089b      	lsrs	r3, r3, #2
 8002c44:	3302      	adds	r3, #2
 8002c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	220f      	movs	r2, #15
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c68:	d025      	beq.n	8002cb6 <HAL_GPIO_Init+0x242>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a4f      	ldr	r2, [pc, #316]	; (8002dac <HAL_GPIO_Init+0x338>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d01f      	beq.n	8002cb2 <HAL_GPIO_Init+0x23e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a4e      	ldr	r2, [pc, #312]	; (8002db0 <HAL_GPIO_Init+0x33c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d019      	beq.n	8002cae <HAL_GPIO_Init+0x23a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a4d      	ldr	r2, [pc, #308]	; (8002db4 <HAL_GPIO_Init+0x340>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d013      	beq.n	8002caa <HAL_GPIO_Init+0x236>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a4c      	ldr	r2, [pc, #304]	; (8002db8 <HAL_GPIO_Init+0x344>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d00d      	beq.n	8002ca6 <HAL_GPIO_Init+0x232>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a4b      	ldr	r2, [pc, #300]	; (8002dbc <HAL_GPIO_Init+0x348>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d007      	beq.n	8002ca2 <HAL_GPIO_Init+0x22e>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a4a      	ldr	r2, [pc, #296]	; (8002dc0 <HAL_GPIO_Init+0x34c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d101      	bne.n	8002c9e <HAL_GPIO_Init+0x22a>
 8002c9a:	2306      	movs	r3, #6
 8002c9c:	e00c      	b.n	8002cb8 <HAL_GPIO_Init+0x244>
 8002c9e:	2307      	movs	r3, #7
 8002ca0:	e00a      	b.n	8002cb8 <HAL_GPIO_Init+0x244>
 8002ca2:	2305      	movs	r3, #5
 8002ca4:	e008      	b.n	8002cb8 <HAL_GPIO_Init+0x244>
 8002ca6:	2304      	movs	r3, #4
 8002ca8:	e006      	b.n	8002cb8 <HAL_GPIO_Init+0x244>
 8002caa:	2303      	movs	r3, #3
 8002cac:	e004      	b.n	8002cb8 <HAL_GPIO_Init+0x244>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e002      	b.n	8002cb8 <HAL_GPIO_Init+0x244>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <HAL_GPIO_Init+0x244>
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	f002 0203 	and.w	r2, r2, #3
 8002cbe:	0092      	lsls	r2, r2, #2
 8002cc0:	4093      	lsls	r3, r2
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cc8:	4937      	ldr	r1, [pc, #220]	; (8002da8 <HAL_GPIO_Init+0x334>)
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	089b      	lsrs	r3, r3, #2
 8002cce:	3302      	adds	r3, #2
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cd6:	4b3b      	ldr	r3, [pc, #236]	; (8002dc4 <HAL_GPIO_Init+0x350>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002cfa:	4a32      	ldr	r2, [pc, #200]	; (8002dc4 <HAL_GPIO_Init+0x350>)
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d00:	4b30      	ldr	r3, [pc, #192]	; (8002dc4 <HAL_GPIO_Init+0x350>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d24:	4a27      	ldr	r2, [pc, #156]	; (8002dc4 <HAL_GPIO_Init+0x350>)
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d2a:	4b26      	ldr	r3, [pc, #152]	; (8002dc4 <HAL_GPIO_Init+0x350>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	43db      	mvns	r3, r3
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4013      	ands	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d4e:	4a1d      	ldr	r2, [pc, #116]	; (8002dc4 <HAL_GPIO_Init+0x350>)
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d54:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <HAL_GPIO_Init+0x350>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4013      	ands	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d78:	4a12      	ldr	r2, [pc, #72]	; (8002dc4 <HAL_GPIO_Init+0x350>)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	3301      	adds	r3, #1
 8002d82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f47f ae78 	bne.w	8002a84 <HAL_GPIO_Init+0x10>
  }
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop
 8002d98:	371c      	adds	r7, #28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000
 8002da8:	40010000 	.word	0x40010000
 8002dac:	48000400 	.word	0x48000400
 8002db0:	48000800 	.word	0x48000800
 8002db4:	48000c00 	.word	0x48000c00
 8002db8:	48001000 	.word	0x48001000
 8002dbc:	48001400 	.word	0x48001400
 8002dc0:	48001800 	.word	0x48001800
 8002dc4:	40010400 	.word	0x40010400

08002dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	807b      	strh	r3, [r7, #2]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dd8:	787b      	ldrb	r3, [r7, #1]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dde:	887a      	ldrh	r2, [r7, #2]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002de4:	e002      	b.n	8002dec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002de6:	887a      	ldrh	r2, [r7, #2]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e0a:	887a      	ldrh	r2, [r7, #2]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	041a      	lsls	r2, r3, #16
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	43d9      	mvns	r1, r3
 8002e16:	887b      	ldrh	r3, [r7, #2]
 8002e18:	400b      	ands	r3, r1
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	619a      	str	r2, [r3, #24]
}
 8002e20:	bf00      	nop
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e36:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	88fb      	ldrh	r3, [r7, #6]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d006      	beq.n	8002e50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e42:	4a05      	ldr	r2, [pc, #20]	; (8002e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e48:	88fb      	ldrh	r3, [r7, #6]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fd fffa 	bl	8000e44 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e50:	bf00      	nop
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40010400 	.word	0x40010400

08002e5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e60:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40007000 	.word	0x40007000

08002e78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e86:	d130      	bne.n	8002eea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e88:	4b23      	ldr	r3, [pc, #140]	; (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e94:	d038      	beq.n	8002f08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e96:	4b20      	ldr	r3, [pc, #128]	; (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e9e:	4a1e      	ldr	r2, [pc, #120]	; (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ea0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ea4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	; (8002f1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2232      	movs	r2, #50	; 0x32
 8002eac:	fb02 f303 	mul.w	r3, r2, r3
 8002eb0:	4a1b      	ldr	r2, [pc, #108]	; (8002f20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb6:	0c9b      	lsrs	r3, r3, #18
 8002eb8:	3301      	adds	r3, #1
 8002eba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ebc:	e002      	b.n	8002ec4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ec4:	4b14      	ldr	r3, [pc, #80]	; (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ed0:	d102      	bne.n	8002ed8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1f2      	bne.n	8002ebe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ed8:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee4:	d110      	bne.n	8002f08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e00f      	b.n	8002f0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eea:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef6:	d007      	beq.n	8002f08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ef8:	4b07      	ldr	r3, [pc, #28]	; (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f00:	4a05      	ldr	r2, [pc, #20]	; (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40007000 	.word	0x40007000
 8002f1c:	20000000 	.word	0x20000000
 8002f20:	431bde83 	.word	0x431bde83

08002f24 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b088      	sub	sp, #32
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e3ca      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f36:	4b97      	ldr	r3, [pc, #604]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f40:	4b94      	ldr	r3, [pc, #592]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f003 0303 	and.w	r3, r3, #3
 8002f48:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0310 	and.w	r3, r3, #16
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 80e4 	beq.w	8003120 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d007      	beq.n	8002f6e <HAL_RCC_OscConfig+0x4a>
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	2b0c      	cmp	r3, #12
 8002f62:	f040 808b 	bne.w	800307c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	f040 8087 	bne.w	800307c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f6e:	4b89      	ldr	r3, [pc, #548]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <HAL_RCC_OscConfig+0x62>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e3a2      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1a      	ldr	r2, [r3, #32]
 8002f8a:	4b82      	ldr	r3, [pc, #520]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d004      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x7c>
 8002f96:	4b7f      	ldr	r3, [pc, #508]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f9e:	e005      	b.n	8002fac <HAL_RCC_OscConfig+0x88>
 8002fa0:	4b7c      	ldr	r3, [pc, #496]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 8002fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fa6:	091b      	lsrs	r3, r3, #4
 8002fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d223      	bcs.n	8002ff8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 fd1d 	bl	80039f4 <RCC_SetFlashLatencyFromMSIRange>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e383      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fc4:	4b73      	ldr	r3, [pc, #460]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a72      	ldr	r2, [pc, #456]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 8002fca:	f043 0308 	orr.w	r3, r3, #8
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	4b70      	ldr	r3, [pc, #448]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	496d      	ldr	r1, [pc, #436]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fe2:	4b6c      	ldr	r3, [pc, #432]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	021b      	lsls	r3, r3, #8
 8002ff0:	4968      	ldr	r1, [pc, #416]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	604b      	str	r3, [r1, #4]
 8002ff6:	e025      	b.n	8003044 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ff8:	4b66      	ldr	r3, [pc, #408]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a65      	ldr	r2, [pc, #404]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 8002ffe:	f043 0308 	orr.w	r3, r3, #8
 8003002:	6013      	str	r3, [r2, #0]
 8003004:	4b63      	ldr	r3, [pc, #396]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	4960      	ldr	r1, [pc, #384]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 8003012:	4313      	orrs	r3, r2
 8003014:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003016:	4b5f      	ldr	r3, [pc, #380]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	021b      	lsls	r3, r3, #8
 8003024:	495b      	ldr	r1, [pc, #364]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 8003026:	4313      	orrs	r3, r2
 8003028:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d109      	bne.n	8003044 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fcdd 	bl	80039f4 <RCC_SetFlashLatencyFromMSIRange>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e343      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003044:	f000 fc4a 	bl	80038dc <HAL_RCC_GetSysClockFreq>
 8003048:	4602      	mov	r2, r0
 800304a:	4b52      	ldr	r3, [pc, #328]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	091b      	lsrs	r3, r3, #4
 8003050:	f003 030f 	and.w	r3, r3, #15
 8003054:	4950      	ldr	r1, [pc, #320]	; (8003198 <HAL_RCC_OscConfig+0x274>)
 8003056:	5ccb      	ldrb	r3, [r1, r3]
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
 8003060:	4a4e      	ldr	r2, [pc, #312]	; (800319c <HAL_RCC_OscConfig+0x278>)
 8003062:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003064:	4b4e      	ldr	r3, [pc, #312]	; (80031a0 <HAL_RCC_OscConfig+0x27c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f7fe faf3 	bl	8001654 <HAL_InitTick>
 800306e:	4603      	mov	r3, r0
 8003070:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003072:	7bfb      	ldrb	r3, [r7, #15]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d052      	beq.n	800311e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003078:	7bfb      	ldrb	r3, [r7, #15]
 800307a:	e327      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d032      	beq.n	80030ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003084:	4b43      	ldr	r3, [pc, #268]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a42      	ldr	r2, [pc, #264]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003090:	f7fe fb30 	bl	80016f4 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003098:	f7fe fb2c 	bl	80016f4 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e310      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030aa:	4b3a      	ldr	r3, [pc, #232]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0f0      	beq.n	8003098 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030b6:	4b37      	ldr	r3, [pc, #220]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a36      	ldr	r2, [pc, #216]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 80030bc:	f043 0308 	orr.w	r3, r3, #8
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	4b34      	ldr	r3, [pc, #208]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	4931      	ldr	r1, [pc, #196]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030d4:	4b2f      	ldr	r3, [pc, #188]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	021b      	lsls	r3, r3, #8
 80030e2:	492c      	ldr	r1, [pc, #176]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	604b      	str	r3, [r1, #4]
 80030e8:	e01a      	b.n	8003120 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030ea:	4b2a      	ldr	r3, [pc, #168]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a29      	ldr	r2, [pc, #164]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 80030f0:	f023 0301 	bic.w	r3, r3, #1
 80030f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030f6:	f7fe fafd 	bl	80016f4 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030fe:	f7fe faf9 	bl	80016f4 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e2dd      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003110:	4b20      	ldr	r3, [pc, #128]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1f0      	bne.n	80030fe <HAL_RCC_OscConfig+0x1da>
 800311c:	e000      	b.n	8003120 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800311e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d074      	beq.n	8003216 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	2b08      	cmp	r3, #8
 8003130:	d005      	beq.n	800313e <HAL_RCC_OscConfig+0x21a>
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	2b0c      	cmp	r3, #12
 8003136:	d10e      	bne.n	8003156 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2b03      	cmp	r3, #3
 800313c:	d10b      	bne.n	8003156 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800313e:	4b15      	ldr	r3, [pc, #84]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d064      	beq.n	8003214 <HAL_RCC_OscConfig+0x2f0>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d160      	bne.n	8003214 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e2ba      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800315e:	d106      	bne.n	800316e <HAL_RCC_OscConfig+0x24a>
 8003160:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a0b      	ldr	r2, [pc, #44]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 8003166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	e026      	b.n	80031bc <HAL_RCC_OscConfig+0x298>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003176:	d115      	bne.n	80031a4 <HAL_RCC_OscConfig+0x280>
 8003178:	4b06      	ldr	r3, [pc, #24]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a05      	ldr	r2, [pc, #20]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 800317e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	4b03      	ldr	r3, [pc, #12]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a02      	ldr	r2, [pc, #8]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 800318a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800318e:	6013      	str	r3, [r2, #0]
 8003190:	e014      	b.n	80031bc <HAL_RCC_OscConfig+0x298>
 8003192:	bf00      	nop
 8003194:	40021000 	.word	0x40021000
 8003198:	08004ddc 	.word	0x08004ddc
 800319c:	20000000 	.word	0x20000000
 80031a0:	20000004 	.word	0x20000004
 80031a4:	4ba0      	ldr	r3, [pc, #640]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a9f      	ldr	r2, [pc, #636]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 80031aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ae:	6013      	str	r3, [r2, #0]
 80031b0:	4b9d      	ldr	r3, [pc, #628]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a9c      	ldr	r2, [pc, #624]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 80031b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d013      	beq.n	80031ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c4:	f7fe fa96 	bl	80016f4 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031cc:	f7fe fa92 	bl	80016f4 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b64      	cmp	r3, #100	; 0x64
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e276      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031de:	4b92      	ldr	r3, [pc, #584]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0f0      	beq.n	80031cc <HAL_RCC_OscConfig+0x2a8>
 80031ea:	e014      	b.n	8003216 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ec:	f7fe fa82 	bl	80016f4 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f4:	f7fe fa7e 	bl	80016f4 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b64      	cmp	r3, #100	; 0x64
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e262      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003206:	4b88      	ldr	r3, [pc, #544]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0x2d0>
 8003212:	e000      	b.n	8003216 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003214:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d060      	beq.n	80032e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	2b04      	cmp	r3, #4
 8003226:	d005      	beq.n	8003234 <HAL_RCC_OscConfig+0x310>
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	2b0c      	cmp	r3, #12
 800322c:	d119      	bne.n	8003262 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2b02      	cmp	r3, #2
 8003232:	d116      	bne.n	8003262 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003234:	4b7c      	ldr	r3, [pc, #496]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_RCC_OscConfig+0x328>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e23f      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324c:	4b76      	ldr	r3, [pc, #472]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	061b      	lsls	r3, r3, #24
 800325a:	4973      	ldr	r1, [pc, #460]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 800325c:	4313      	orrs	r3, r2
 800325e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003260:	e040      	b.n	80032e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d023      	beq.n	80032b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800326a:	4b6f      	ldr	r3, [pc, #444]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a6e      	ldr	r2, [pc, #440]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 8003270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003276:	f7fe fa3d 	bl	80016f4 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800327e:	f7fe fa39 	bl	80016f4 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e21d      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003290:	4b65      	ldr	r3, [pc, #404]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0f0      	beq.n	800327e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329c:	4b62      	ldr	r3, [pc, #392]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	061b      	lsls	r3, r3, #24
 80032aa:	495f      	ldr	r1, [pc, #380]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	604b      	str	r3, [r1, #4]
 80032b0:	e018      	b.n	80032e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b2:	4b5d      	ldr	r3, [pc, #372]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a5c      	ldr	r2, [pc, #368]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 80032b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032be:	f7fe fa19 	bl	80016f4 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c6:	f7fe fa15 	bl	80016f4 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e1f9      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032d8:	4b53      	ldr	r3, [pc, #332]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f0      	bne.n	80032c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d03c      	beq.n	800336a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d01c      	beq.n	8003332 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032f8:	4b4b      	ldr	r3, [pc, #300]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 80032fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032fe:	4a4a      	ldr	r2, [pc, #296]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003308:	f7fe f9f4 	bl	80016f4 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003310:	f7fe f9f0 	bl	80016f4 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e1d4      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003322:	4b41      	ldr	r3, [pc, #260]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 8003324:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0ef      	beq.n	8003310 <HAL_RCC_OscConfig+0x3ec>
 8003330:	e01b      	b.n	800336a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003332:	4b3d      	ldr	r3, [pc, #244]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 8003334:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003338:	4a3b      	ldr	r2, [pc, #236]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 800333a:	f023 0301 	bic.w	r3, r3, #1
 800333e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003342:	f7fe f9d7 	bl	80016f4 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800334a:	f7fe f9d3 	bl	80016f4 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e1b7      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800335c:	4b32      	ldr	r3, [pc, #200]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 800335e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1ef      	bne.n	800334a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 80a6 	beq.w	80034c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003378:	2300      	movs	r3, #0
 800337a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800337c:	4b2a      	ldr	r3, [pc, #168]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 800337e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10d      	bne.n	80033a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003388:	4b27      	ldr	r3, [pc, #156]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 800338a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338c:	4a26      	ldr	r2, [pc, #152]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 800338e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003392:	6593      	str	r3, [r2, #88]	; 0x58
 8003394:	4b24      	ldr	r3, [pc, #144]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 8003396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033a0:	2301      	movs	r3, #1
 80033a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033a4:	4b21      	ldr	r3, [pc, #132]	; (800342c <HAL_RCC_OscConfig+0x508>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d118      	bne.n	80033e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033b0:	4b1e      	ldr	r3, [pc, #120]	; (800342c <HAL_RCC_OscConfig+0x508>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a1d      	ldr	r2, [pc, #116]	; (800342c <HAL_RCC_OscConfig+0x508>)
 80033b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033bc:	f7fe f99a 	bl	80016f4 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c4:	f7fe f996 	bl	80016f4 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e17a      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d6:	4b15      	ldr	r3, [pc, #84]	; (800342c <HAL_RCC_OscConfig+0x508>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0f0      	beq.n	80033c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d108      	bne.n	80033fc <HAL_RCC_OscConfig+0x4d8>
 80033ea:	4b0f      	ldr	r3, [pc, #60]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 80033ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f0:	4a0d      	ldr	r2, [pc, #52]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033fa:	e029      	b.n	8003450 <HAL_RCC_OscConfig+0x52c>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b05      	cmp	r3, #5
 8003402:	d115      	bne.n	8003430 <HAL_RCC_OscConfig+0x50c>
 8003404:	4b08      	ldr	r3, [pc, #32]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340a:	4a07      	ldr	r2, [pc, #28]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 800340c:	f043 0304 	orr.w	r3, r3, #4
 8003410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003414:	4b04      	ldr	r3, [pc, #16]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341a:	4a03      	ldr	r2, [pc, #12]	; (8003428 <HAL_RCC_OscConfig+0x504>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003424:	e014      	b.n	8003450 <HAL_RCC_OscConfig+0x52c>
 8003426:	bf00      	nop
 8003428:	40021000 	.word	0x40021000
 800342c:	40007000 	.word	0x40007000
 8003430:	4b9c      	ldr	r3, [pc, #624]	; (80036a4 <HAL_RCC_OscConfig+0x780>)
 8003432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003436:	4a9b      	ldr	r2, [pc, #620]	; (80036a4 <HAL_RCC_OscConfig+0x780>)
 8003438:	f023 0301 	bic.w	r3, r3, #1
 800343c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003440:	4b98      	ldr	r3, [pc, #608]	; (80036a4 <HAL_RCC_OscConfig+0x780>)
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003446:	4a97      	ldr	r2, [pc, #604]	; (80036a4 <HAL_RCC_OscConfig+0x780>)
 8003448:	f023 0304 	bic.w	r3, r3, #4
 800344c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d016      	beq.n	8003486 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003458:	f7fe f94c 	bl	80016f4 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800345e:	e00a      	b.n	8003476 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003460:	f7fe f948 	bl	80016f4 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	f241 3288 	movw	r2, #5000	; 0x1388
 800346e:	4293      	cmp	r3, r2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e12a      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003476:	4b8b      	ldr	r3, [pc, #556]	; (80036a4 <HAL_RCC_OscConfig+0x780>)
 8003478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0ed      	beq.n	8003460 <HAL_RCC_OscConfig+0x53c>
 8003484:	e015      	b.n	80034b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003486:	f7fe f935 	bl	80016f4 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800348c:	e00a      	b.n	80034a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348e:	f7fe f931 	bl	80016f4 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	f241 3288 	movw	r2, #5000	; 0x1388
 800349c:	4293      	cmp	r3, r2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e113      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034a4:	4b7f      	ldr	r3, [pc, #508]	; (80036a4 <HAL_RCC_OscConfig+0x780>)
 80034a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1ed      	bne.n	800348e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034b2:	7ffb      	ldrb	r3, [r7, #31]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d105      	bne.n	80034c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b8:	4b7a      	ldr	r3, [pc, #488]	; (80036a4 <HAL_RCC_OscConfig+0x780>)
 80034ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034bc:	4a79      	ldr	r2, [pc, #484]	; (80036a4 <HAL_RCC_OscConfig+0x780>)
 80034be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 80fe 	beq.w	80036ca <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	f040 80d0 	bne.w	8003678 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034d8:	4b72      	ldr	r3, [pc, #456]	; (80036a4 <HAL_RCC_OscConfig+0x780>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f003 0203 	and.w	r2, r3, #3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d130      	bne.n	800354e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	3b01      	subs	r3, #1
 80034f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d127      	bne.n	800354e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003508:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800350a:	429a      	cmp	r2, r3
 800350c:	d11f      	bne.n	800354e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003518:	2a07      	cmp	r2, #7
 800351a:	bf14      	ite	ne
 800351c:	2201      	movne	r2, #1
 800351e:	2200      	moveq	r2, #0
 8003520:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003522:	4293      	cmp	r3, r2
 8003524:	d113      	bne.n	800354e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003530:	085b      	lsrs	r3, r3, #1
 8003532:	3b01      	subs	r3, #1
 8003534:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003536:	429a      	cmp	r2, r3
 8003538:	d109      	bne.n	800354e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	085b      	lsrs	r3, r3, #1
 8003546:	3b01      	subs	r3, #1
 8003548:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800354a:	429a      	cmp	r2, r3
 800354c:	d06e      	beq.n	800362c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	2b0c      	cmp	r3, #12
 8003552:	d069      	beq.n	8003628 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003554:	4b53      	ldr	r3, [pc, #332]	; (80036a4 <HAL_RCC_OscConfig+0x780>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d105      	bne.n	800356c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003560:	4b50      	ldr	r3, [pc, #320]	; (80036a4 <HAL_RCC_OscConfig+0x780>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e0ad      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003570:	4b4c      	ldr	r3, [pc, #304]	; (80036a4 <HAL_RCC_OscConfig+0x780>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a4b      	ldr	r2, [pc, #300]	; (80036a4 <HAL_RCC_OscConfig+0x780>)
 8003576:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800357a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800357c:	f7fe f8ba 	bl	80016f4 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003584:	f7fe f8b6 	bl	80016f4 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e09a      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003596:	4b43      	ldr	r3, [pc, #268]	; (80036a4 <HAL_RCC_OscConfig+0x780>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035a2:	4b40      	ldr	r3, [pc, #256]	; (80036a4 <HAL_RCC_OscConfig+0x780>)
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	4b40      	ldr	r3, [pc, #256]	; (80036a8 <HAL_RCC_OscConfig+0x784>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035b2:	3a01      	subs	r2, #1
 80035b4:	0112      	lsls	r2, r2, #4
 80035b6:	4311      	orrs	r1, r2
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035bc:	0212      	lsls	r2, r2, #8
 80035be:	4311      	orrs	r1, r2
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035c4:	0852      	lsrs	r2, r2, #1
 80035c6:	3a01      	subs	r2, #1
 80035c8:	0552      	lsls	r2, r2, #21
 80035ca:	4311      	orrs	r1, r2
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035d0:	0852      	lsrs	r2, r2, #1
 80035d2:	3a01      	subs	r2, #1
 80035d4:	0652      	lsls	r2, r2, #25
 80035d6:	4311      	orrs	r1, r2
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035dc:	0912      	lsrs	r2, r2, #4
 80035de:	0452      	lsls	r2, r2, #17
 80035e0:	430a      	orrs	r2, r1
 80035e2:	4930      	ldr	r1, [pc, #192]	; (80036a4 <HAL_RCC_OscConfig+0x780>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035e8:	4b2e      	ldr	r3, [pc, #184]	; (80036a4 <HAL_RCC_OscConfig+0x780>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a2d      	ldr	r2, [pc, #180]	; (80036a4 <HAL_RCC_OscConfig+0x780>)
 80035ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035f4:	4b2b      	ldr	r3, [pc, #172]	; (80036a4 <HAL_RCC_OscConfig+0x780>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	4a2a      	ldr	r2, [pc, #168]	; (80036a4 <HAL_RCC_OscConfig+0x780>)
 80035fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003600:	f7fe f878 	bl	80016f4 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003608:	f7fe f874 	bl	80016f4 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e058      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800361a:	4b22      	ldr	r3, [pc, #136]	; (80036a4 <HAL_RCC_OscConfig+0x780>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f0      	beq.n	8003608 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003626:	e050      	b.n	80036ca <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e04f      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800362c:	4b1d      	ldr	r3, [pc, #116]	; (80036a4 <HAL_RCC_OscConfig+0x780>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d148      	bne.n	80036ca <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003638:	4b1a      	ldr	r3, [pc, #104]	; (80036a4 <HAL_RCC_OscConfig+0x780>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a19      	ldr	r2, [pc, #100]	; (80036a4 <HAL_RCC_OscConfig+0x780>)
 800363e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003642:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003644:	4b17      	ldr	r3, [pc, #92]	; (80036a4 <HAL_RCC_OscConfig+0x780>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	4a16      	ldr	r2, [pc, #88]	; (80036a4 <HAL_RCC_OscConfig+0x780>)
 800364a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800364e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003650:	f7fe f850 	bl	80016f4 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003658:	f7fe f84c 	bl	80016f4 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e030      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800366a:	4b0e      	ldr	r3, [pc, #56]	; (80036a4 <HAL_RCC_OscConfig+0x780>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0f0      	beq.n	8003658 <HAL_RCC_OscConfig+0x734>
 8003676:	e028      	b.n	80036ca <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	2b0c      	cmp	r3, #12
 800367c:	d023      	beq.n	80036c6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800367e:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <HAL_RCC_OscConfig+0x780>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a08      	ldr	r2, [pc, #32]	; (80036a4 <HAL_RCC_OscConfig+0x780>)
 8003684:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368a:	f7fe f833 	bl	80016f4 <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003690:	e00c      	b.n	80036ac <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003692:	f7fe f82f 	bl	80016f4 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d905      	bls.n	80036ac <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e013      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
 80036a4:	40021000 	.word	0x40021000
 80036a8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ac:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <HAL_RCC_OscConfig+0x7b0>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1ec      	bne.n	8003692 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <HAL_RCC_OscConfig+0x7b0>)
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	4905      	ldr	r1, [pc, #20]	; (80036d4 <HAL_RCC_OscConfig+0x7b0>)
 80036be:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <HAL_RCC_OscConfig+0x7b4>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	60cb      	str	r3, [r1, #12]
 80036c4:	e001      	b.n	80036ca <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3720      	adds	r7, #32
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40021000 	.word	0x40021000
 80036d8:	feeefffc 	.word	0xfeeefffc

080036dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0e7      	b.n	80038c0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036f0:	4b75      	ldr	r3, [pc, #468]	; (80038c8 <HAL_RCC_ClockConfig+0x1ec>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d910      	bls.n	8003720 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fe:	4b72      	ldr	r3, [pc, #456]	; (80038c8 <HAL_RCC_ClockConfig+0x1ec>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f023 0207 	bic.w	r2, r3, #7
 8003706:	4970      	ldr	r1, [pc, #448]	; (80038c8 <HAL_RCC_ClockConfig+0x1ec>)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	4313      	orrs	r3, r2
 800370c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800370e:	4b6e      	ldr	r3, [pc, #440]	; (80038c8 <HAL_RCC_ClockConfig+0x1ec>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d001      	beq.n	8003720 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e0cf      	b.n	80038c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d010      	beq.n	800374e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	4b66      	ldr	r3, [pc, #408]	; (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003738:	429a      	cmp	r2, r3
 800373a:	d908      	bls.n	800374e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800373c:	4b63      	ldr	r3, [pc, #396]	; (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	4960      	ldr	r1, [pc, #384]	; (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 800374a:	4313      	orrs	r3, r2
 800374c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d04c      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b03      	cmp	r3, #3
 8003760:	d107      	bne.n	8003772 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003762:	4b5a      	ldr	r3, [pc, #360]	; (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d121      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e0a6      	b.n	80038c0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b02      	cmp	r3, #2
 8003778:	d107      	bne.n	800378a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800377a:	4b54      	ldr	r3, [pc, #336]	; (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d115      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e09a      	b.n	80038c0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d107      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003792:	4b4e      	ldr	r3, [pc, #312]	; (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d109      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e08e      	b.n	80038c0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037a2:	4b4a      	ldr	r3, [pc, #296]	; (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e086      	b.n	80038c0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037b2:	4b46      	ldr	r3, [pc, #280]	; (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f023 0203 	bic.w	r2, r3, #3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	4943      	ldr	r1, [pc, #268]	; (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c4:	f7fd ff96 	bl	80016f4 <HAL_GetTick>
 80037c8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ca:	e00a      	b.n	80037e2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037cc:	f7fd ff92 	bl	80016f4 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037da:	4293      	cmp	r3, r2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e06e      	b.n	80038c0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e2:	4b3a      	ldr	r3, [pc, #232]	; (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 020c 	and.w	r2, r3, #12
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d1eb      	bne.n	80037cc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d010      	beq.n	8003822 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	4b31      	ldr	r3, [pc, #196]	; (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800380c:	429a      	cmp	r2, r3
 800380e:	d208      	bcs.n	8003822 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003810:	4b2e      	ldr	r3, [pc, #184]	; (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	492b      	ldr	r1, [pc, #172]	; (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 800381e:	4313      	orrs	r3, r2
 8003820:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003822:	4b29      	ldr	r3, [pc, #164]	; (80038c8 <HAL_RCC_ClockConfig+0x1ec>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d210      	bcs.n	8003852 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003830:	4b25      	ldr	r3, [pc, #148]	; (80038c8 <HAL_RCC_ClockConfig+0x1ec>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f023 0207 	bic.w	r2, r3, #7
 8003838:	4923      	ldr	r1, [pc, #140]	; (80038c8 <HAL_RCC_ClockConfig+0x1ec>)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	4313      	orrs	r3, r2
 800383e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003840:	4b21      	ldr	r3, [pc, #132]	; (80038c8 <HAL_RCC_ClockConfig+0x1ec>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	429a      	cmp	r2, r3
 800384c:	d001      	beq.n	8003852 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e036      	b.n	80038c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	2b00      	cmp	r3, #0
 800385c:	d008      	beq.n	8003870 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800385e:	4b1b      	ldr	r3, [pc, #108]	; (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	4918      	ldr	r1, [pc, #96]	; (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 800386c:	4313      	orrs	r3, r2
 800386e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0308 	and.w	r3, r3, #8
 8003878:	2b00      	cmp	r3, #0
 800387a:	d009      	beq.n	8003890 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800387c:	4b13      	ldr	r3, [pc, #76]	; (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	4910      	ldr	r1, [pc, #64]	; (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 800388c:	4313      	orrs	r3, r2
 800388e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003890:	f000 f824 	bl	80038dc <HAL_RCC_GetSysClockFreq>
 8003894:	4602      	mov	r2, r0
 8003896:	4b0d      	ldr	r3, [pc, #52]	; (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	091b      	lsrs	r3, r3, #4
 800389c:	f003 030f 	and.w	r3, r3, #15
 80038a0:	490b      	ldr	r1, [pc, #44]	; (80038d0 <HAL_RCC_ClockConfig+0x1f4>)
 80038a2:	5ccb      	ldrb	r3, [r1, r3]
 80038a4:	f003 031f 	and.w	r3, r3, #31
 80038a8:	fa22 f303 	lsr.w	r3, r2, r3
 80038ac:	4a09      	ldr	r2, [pc, #36]	; (80038d4 <HAL_RCC_ClockConfig+0x1f8>)
 80038ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038b0:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <HAL_RCC_ClockConfig+0x1fc>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fd fecd 	bl	8001654 <HAL_InitTick>
 80038ba:	4603      	mov	r3, r0
 80038bc:	72fb      	strb	r3, [r7, #11]

  return status;
 80038be:	7afb      	ldrb	r3, [r7, #11]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40022000 	.word	0x40022000
 80038cc:	40021000 	.word	0x40021000
 80038d0:	08004ddc 	.word	0x08004ddc
 80038d4:	20000000 	.word	0x20000000
 80038d8:	20000004 	.word	0x20000004

080038dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	b089      	sub	sp, #36	; 0x24
 80038e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	61fb      	str	r3, [r7, #28]
 80038e6:	2300      	movs	r3, #0
 80038e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ea:	4b3e      	ldr	r3, [pc, #248]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 030c 	and.w	r3, r3, #12
 80038f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038f4:	4b3b      	ldr	r3, [pc, #236]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_RCC_GetSysClockFreq+0x34>
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	2b0c      	cmp	r3, #12
 8003908:	d121      	bne.n	800394e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d11e      	bne.n	800394e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003910:	4b34      	ldr	r3, [pc, #208]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b00      	cmp	r3, #0
 800391a:	d107      	bne.n	800392c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800391c:	4b31      	ldr	r3, [pc, #196]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800391e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003922:	0a1b      	lsrs	r3, r3, #8
 8003924:	f003 030f 	and.w	r3, r3, #15
 8003928:	61fb      	str	r3, [r7, #28]
 800392a:	e005      	b.n	8003938 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800392c:	4b2d      	ldr	r3, [pc, #180]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	091b      	lsrs	r3, r3, #4
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003938:	4a2b      	ldr	r2, [pc, #172]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003940:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10d      	bne.n	8003964 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800394c:	e00a      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	2b04      	cmp	r3, #4
 8003952:	d102      	bne.n	800395a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003954:	4b25      	ldr	r3, [pc, #148]	; (80039ec <HAL_RCC_GetSysClockFreq+0x110>)
 8003956:	61bb      	str	r3, [r7, #24]
 8003958:	e004      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b08      	cmp	r3, #8
 800395e:	d101      	bne.n	8003964 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003960:	4b23      	ldr	r3, [pc, #140]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003962:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	2b0c      	cmp	r3, #12
 8003968:	d134      	bne.n	80039d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800396a:	4b1e      	ldr	r3, [pc, #120]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b02      	cmp	r3, #2
 8003978:	d003      	beq.n	8003982 <HAL_RCC_GetSysClockFreq+0xa6>
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2b03      	cmp	r3, #3
 800397e:	d003      	beq.n	8003988 <HAL_RCC_GetSysClockFreq+0xac>
 8003980:	e005      	b.n	800398e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003982:	4b1a      	ldr	r3, [pc, #104]	; (80039ec <HAL_RCC_GetSysClockFreq+0x110>)
 8003984:	617b      	str	r3, [r7, #20]
      break;
 8003986:	e005      	b.n	8003994 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003988:	4b19      	ldr	r3, [pc, #100]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800398a:	617b      	str	r3, [r7, #20]
      break;
 800398c:	e002      	b.n	8003994 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	617b      	str	r3, [r7, #20]
      break;
 8003992:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003994:	4b13      	ldr	r3, [pc, #76]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	091b      	lsrs	r3, r3, #4
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	3301      	adds	r3, #1
 80039a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039a2:	4b10      	ldr	r3, [pc, #64]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	0a1b      	lsrs	r3, r3, #8
 80039a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	fb03 f202 	mul.w	r2, r3, r2
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039ba:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	0e5b      	lsrs	r3, r3, #25
 80039c0:	f003 0303 	and.w	r3, r3, #3
 80039c4:	3301      	adds	r3, #1
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039d4:	69bb      	ldr	r3, [r7, #24]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3724      	adds	r7, #36	; 0x24
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40021000 	.word	0x40021000
 80039e8:	08004dec 	.word	0x08004dec
 80039ec:	00f42400 	.word	0x00f42400
 80039f0:	007a1200 	.word	0x007a1200

080039f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039fc:	2300      	movs	r3, #0
 80039fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a00:	4b2a      	ldr	r3, [pc, #168]	; (8003aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a0c:	f7ff fa26 	bl	8002e5c <HAL_PWREx_GetVoltageRange>
 8003a10:	6178      	str	r0, [r7, #20]
 8003a12:	e014      	b.n	8003a3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a14:	4b25      	ldr	r3, [pc, #148]	; (8003aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a18:	4a24      	ldr	r2, [pc, #144]	; (8003aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a20:	4b22      	ldr	r3, [pc, #136]	; (8003aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a2c:	f7ff fa16 	bl	8002e5c <HAL_PWREx_GetVoltageRange>
 8003a30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a32:	4b1e      	ldr	r3, [pc, #120]	; (8003aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a36:	4a1d      	ldr	r2, [pc, #116]	; (8003aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a3c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a44:	d10b      	bne.n	8003a5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b80      	cmp	r3, #128	; 0x80
 8003a4a:	d919      	bls.n	8003a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2ba0      	cmp	r3, #160	; 0xa0
 8003a50:	d902      	bls.n	8003a58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a52:	2302      	movs	r3, #2
 8003a54:	613b      	str	r3, [r7, #16]
 8003a56:	e013      	b.n	8003a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a58:	2301      	movs	r3, #1
 8003a5a:	613b      	str	r3, [r7, #16]
 8003a5c:	e010      	b.n	8003a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b80      	cmp	r3, #128	; 0x80
 8003a62:	d902      	bls.n	8003a6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a64:	2303      	movs	r3, #3
 8003a66:	613b      	str	r3, [r7, #16]
 8003a68:	e00a      	b.n	8003a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b80      	cmp	r3, #128	; 0x80
 8003a6e:	d102      	bne.n	8003a76 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a70:	2302      	movs	r3, #2
 8003a72:	613b      	str	r3, [r7, #16]
 8003a74:	e004      	b.n	8003a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b70      	cmp	r3, #112	; 0x70
 8003a7a:	d101      	bne.n	8003a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a80:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f023 0207 	bic.w	r2, r3, #7
 8003a88:	4909      	ldr	r1, [pc, #36]	; (8003ab0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a90:	4b07      	ldr	r3, [pc, #28]	; (8003ab0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d001      	beq.n	8003aa2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	40022000 	.word	0x40022000

08003ab4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003abc:	2300      	movs	r3, #0
 8003abe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d041      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ad4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ad8:	d02a      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ada:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ade:	d824      	bhi.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ae0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ae4:	d008      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ae6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003aea:	d81e      	bhi.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00a      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003af0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003af4:	d010      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003af6:	e018      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003af8:	4b86      	ldr	r3, [pc, #536]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	4a85      	ldr	r2, [pc, #532]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b02:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b04:	e015      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3304      	adds	r3, #4
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 fabb 	bl	8004088 <RCCEx_PLLSAI1_Config>
 8003b12:	4603      	mov	r3, r0
 8003b14:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b16:	e00c      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3320      	adds	r3, #32
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fba6 	bl	8004270 <RCCEx_PLLSAI2_Config>
 8003b24:	4603      	mov	r3, r0
 8003b26:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b28:	e003      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	74fb      	strb	r3, [r7, #19]
      break;
 8003b2e:	e000      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003b30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b32:	7cfb      	ldrb	r3, [r7, #19]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10b      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b38:	4b76      	ldr	r3, [pc, #472]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b46:	4973      	ldr	r1, [pc, #460]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b4e:	e001      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b50:	7cfb      	ldrb	r3, [r7, #19]
 8003b52:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d041      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b68:	d02a      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003b6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b6e:	d824      	bhi.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b74:	d008      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b7a:	d81e      	bhi.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00a      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b84:	d010      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b86:	e018      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b88:	4b62      	ldr	r3, [pc, #392]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	4a61      	ldr	r2, [pc, #388]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b92:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b94:	e015      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fa73 	bl	8004088 <RCCEx_PLLSAI1_Config>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ba6:	e00c      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3320      	adds	r3, #32
 8003bac:	2100      	movs	r1, #0
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 fb5e 	bl	8004270 <RCCEx_PLLSAI2_Config>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bb8:	e003      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	74fb      	strb	r3, [r7, #19]
      break;
 8003bbe:	e000      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003bc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bc2:	7cfb      	ldrb	r3, [r7, #19]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10b      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bc8:	4b52      	ldr	r3, [pc, #328]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bd6:	494f      	ldr	r1, [pc, #316]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003bde:	e001      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be0:	7cfb      	ldrb	r3, [r7, #19]
 8003be2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 80a0 	beq.w	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bf6:	4b47      	ldr	r3, [pc, #284]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003c06:	2300      	movs	r3, #0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00d      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c0c:	4b41      	ldr	r3, [pc, #260]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c10:	4a40      	ldr	r2, [pc, #256]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c16:	6593      	str	r3, [r2, #88]	; 0x58
 8003c18:	4b3e      	ldr	r3, [pc, #248]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c24:	2301      	movs	r3, #1
 8003c26:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c28:	4b3b      	ldr	r3, [pc, #236]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a3a      	ldr	r2, [pc, #232]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c34:	f7fd fd5e 	bl	80016f4 <HAL_GetTick>
 8003c38:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c3a:	e009      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c3c:	f7fd fd5a 	bl	80016f4 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d902      	bls.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	74fb      	strb	r3, [r7, #19]
        break;
 8003c4e:	e005      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c50:	4b31      	ldr	r3, [pc, #196]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0ef      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003c5c:	7cfb      	ldrb	r3, [r7, #19]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d15c      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c62:	4b2c      	ldr	r3, [pc, #176]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c6c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d01f      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d019      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c80:	4b24      	ldr	r3, [pc, #144]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c8c:	4b21      	ldr	r3, [pc, #132]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c92:	4a20      	ldr	r2, [pc, #128]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c9c:	4b1d      	ldr	r3, [pc, #116]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca2:	4a1c      	ldr	r2, [pc, #112]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cac:	4a19      	ldr	r2, [pc, #100]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d016      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbe:	f7fd fd19 	bl	80016f4 <HAL_GetTick>
 8003cc2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cc4:	e00b      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc6:	f7fd fd15 	bl	80016f4 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d902      	bls.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	74fb      	strb	r3, [r7, #19]
            break;
 8003cdc:	e006      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cde:	4b0d      	ldr	r3, [pc, #52]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0ec      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003cec:	7cfb      	ldrb	r3, [r7, #19]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10c      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cf2:	4b08      	ldr	r3, [pc, #32]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d02:	4904      	ldr	r1, [pc, #16]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d0a:	e009      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d0c:	7cfb      	ldrb	r3, [r7, #19]
 8003d0e:	74bb      	strb	r3, [r7, #18]
 8003d10:	e006      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003d12:	bf00      	nop
 8003d14:	40021000 	.word	0x40021000
 8003d18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d1c:	7cfb      	ldrb	r3, [r7, #19]
 8003d1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d20:	7c7b      	ldrb	r3, [r7, #17]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d105      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d26:	4b9e      	ldr	r3, [pc, #632]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2a:	4a9d      	ldr	r2, [pc, #628]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d3e:	4b98      	ldr	r3, [pc, #608]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d44:	f023 0203 	bic.w	r2, r3, #3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4c:	4994      	ldr	r1, [pc, #592]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00a      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d60:	4b8f      	ldr	r3, [pc, #572]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	f023 020c 	bic.w	r2, r3, #12
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6e:	498c      	ldr	r1, [pc, #560]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d82:	4b87      	ldr	r3, [pc, #540]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	4983      	ldr	r1, [pc, #524]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00a      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003da4:	4b7e      	ldr	r3, [pc, #504]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003daa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db2:	497b      	ldr	r1, [pc, #492]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0310 	and.w	r3, r3, #16
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003dc6:	4b76      	ldr	r3, [pc, #472]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dd4:	4972      	ldr	r1, [pc, #456]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0320 	and.w	r3, r3, #32
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00a      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003de8:	4b6d      	ldr	r3, [pc, #436]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df6:	496a      	ldr	r1, [pc, #424]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e0a:	4b65      	ldr	r3, [pc, #404]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e18:	4961      	ldr	r1, [pc, #388]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00a      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e2c:	4b5c      	ldr	r3, [pc, #368]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e3a:	4959      	ldr	r1, [pc, #356]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e4e:	4b54      	ldr	r3, [pc, #336]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5c:	4950      	ldr	r1, [pc, #320]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e70:	4b4b      	ldr	r3, [pc, #300]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7e:	4948      	ldr	r1, [pc, #288]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e92:	4b43      	ldr	r3, [pc, #268]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea0:	493f      	ldr	r1, [pc, #252]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d028      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003eb4:	4b3a      	ldr	r3, [pc, #232]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ec2:	4937      	ldr	r1, [pc, #220]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ece:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ed2:	d106      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ed4:	4b32      	ldr	r3, [pc, #200]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	4a31      	ldr	r2, [pc, #196]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ede:	60d3      	str	r3, [r2, #12]
 8003ee0:	e011      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ee6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003eea:	d10c      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 f8c8 	bl	8004088 <RCCEx_PLLSAI1_Config>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003efc:	7cfb      	ldrb	r3, [r7, #19]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003f02:	7cfb      	ldrb	r3, [r7, #19]
 8003f04:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d028      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f12:	4b23      	ldr	r3, [pc, #140]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f18:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f20:	491f      	ldr	r1, [pc, #124]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f30:	d106      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f32:	4b1b      	ldr	r3, [pc, #108]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	4a1a      	ldr	r2, [pc, #104]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f3c:	60d3      	str	r3, [r2, #12]
 8003f3e:	e011      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f48:	d10c      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	2101      	movs	r1, #1
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 f899 	bl	8004088 <RCCEx_PLLSAI1_Config>
 8003f56:	4603      	mov	r3, r0
 8003f58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f5a:	7cfb      	ldrb	r3, [r7, #19]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003f60:	7cfb      	ldrb	r3, [r7, #19]
 8003f62:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d02b      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f70:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f7e:	4908      	ldr	r1, [pc, #32]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f8e:	d109      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f90:	4b03      	ldr	r3, [pc, #12]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	4a02      	ldr	r2, [pc, #8]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f9a:	60d3      	str	r3, [r2, #12]
 8003f9c:	e014      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003f9e:	bf00      	nop
 8003fa0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fac:	d10c      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 f867 	bl	8004088 <RCCEx_PLLSAI1_Config>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fbe:	7cfb      	ldrb	r3, [r7, #19]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003fc4:	7cfb      	ldrb	r3, [r7, #19]
 8003fc6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d02f      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fd4:	4b2b      	ldr	r3, [pc, #172]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fe2:	4928      	ldr	r1, [pc, #160]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ff2:	d10d      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	2102      	movs	r1, #2
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 f844 	bl	8004088 <RCCEx_PLLSAI1_Config>
 8004000:	4603      	mov	r3, r0
 8004002:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004004:	7cfb      	ldrb	r3, [r7, #19]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d014      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800400a:	7cfb      	ldrb	r3, [r7, #19]
 800400c:	74bb      	strb	r3, [r7, #18]
 800400e:	e011      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004014:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004018:	d10c      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3320      	adds	r3, #32
 800401e:	2102      	movs	r1, #2
 8004020:	4618      	mov	r0, r3
 8004022:	f000 f925 	bl	8004270 <RCCEx_PLLSAI2_Config>
 8004026:	4603      	mov	r3, r0
 8004028:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800402a:	7cfb      	ldrb	r3, [r7, #19]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004030:	7cfb      	ldrb	r3, [r7, #19]
 8004032:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00a      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004040:	4b10      	ldr	r3, [pc, #64]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004046:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800404e:	490d      	ldr	r1, [pc, #52]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00b      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004062:	4b08      	ldr	r3, [pc, #32]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004068:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004072:	4904      	ldr	r1, [pc, #16]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004074:	4313      	orrs	r3, r2
 8004076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800407a:	7cbb      	ldrb	r3, [r7, #18]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40021000 	.word	0x40021000

08004088 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004092:	2300      	movs	r3, #0
 8004094:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004096:	4b75      	ldr	r3, [pc, #468]	; (800426c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d018      	beq.n	80040d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80040a2:	4b72      	ldr	r3, [pc, #456]	; (800426c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f003 0203 	and.w	r2, r3, #3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d10d      	bne.n	80040ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
       ||
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d009      	beq.n	80040ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80040ba:	4b6c      	ldr	r3, [pc, #432]	; (800426c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	091b      	lsrs	r3, r3, #4
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
       ||
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d047      	beq.n	800415e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	73fb      	strb	r3, [r7, #15]
 80040d2:	e044      	b.n	800415e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b03      	cmp	r3, #3
 80040da:	d018      	beq.n	800410e <RCCEx_PLLSAI1_Config+0x86>
 80040dc:	2b03      	cmp	r3, #3
 80040de:	d825      	bhi.n	800412c <RCCEx_PLLSAI1_Config+0xa4>
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d002      	beq.n	80040ea <RCCEx_PLLSAI1_Config+0x62>
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d009      	beq.n	80040fc <RCCEx_PLLSAI1_Config+0x74>
 80040e8:	e020      	b.n	800412c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040ea:	4b60      	ldr	r3, [pc, #384]	; (800426c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d11d      	bne.n	8004132 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040fa:	e01a      	b.n	8004132 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040fc:	4b5b      	ldr	r3, [pc, #364]	; (800426c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004104:	2b00      	cmp	r3, #0
 8004106:	d116      	bne.n	8004136 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800410c:	e013      	b.n	8004136 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800410e:	4b57      	ldr	r3, [pc, #348]	; (800426c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10f      	bne.n	800413a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800411a:	4b54      	ldr	r3, [pc, #336]	; (800426c <RCCEx_PLLSAI1_Config+0x1e4>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800412a:	e006      	b.n	800413a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	73fb      	strb	r3, [r7, #15]
      break;
 8004130:	e004      	b.n	800413c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004132:	bf00      	nop
 8004134:	e002      	b.n	800413c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004136:	bf00      	nop
 8004138:	e000      	b.n	800413c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800413a:	bf00      	nop
    }

    if(status == HAL_OK)
 800413c:	7bfb      	ldrb	r3, [r7, #15]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10d      	bne.n	800415e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004142:	4b4a      	ldr	r3, [pc, #296]	; (800426c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6819      	ldr	r1, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	3b01      	subs	r3, #1
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	430b      	orrs	r3, r1
 8004158:	4944      	ldr	r1, [pc, #272]	; (800426c <RCCEx_PLLSAI1_Config+0x1e4>)
 800415a:	4313      	orrs	r3, r2
 800415c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800415e:	7bfb      	ldrb	r3, [r7, #15]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d17d      	bne.n	8004260 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004164:	4b41      	ldr	r3, [pc, #260]	; (800426c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a40      	ldr	r2, [pc, #256]	; (800426c <RCCEx_PLLSAI1_Config+0x1e4>)
 800416a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800416e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004170:	f7fd fac0 	bl	80016f4 <HAL_GetTick>
 8004174:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004176:	e009      	b.n	800418c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004178:	f7fd fabc 	bl	80016f4 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d902      	bls.n	800418c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	73fb      	strb	r3, [r7, #15]
        break;
 800418a:	e005      	b.n	8004198 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800418c:	4b37      	ldr	r3, [pc, #220]	; (800426c <RCCEx_PLLSAI1_Config+0x1e4>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1ef      	bne.n	8004178 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004198:	7bfb      	ldrb	r3, [r7, #15]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d160      	bne.n	8004260 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d111      	bne.n	80041c8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041a4:	4b31      	ldr	r3, [pc, #196]	; (800426c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80041ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6892      	ldr	r2, [r2, #8]
 80041b4:	0211      	lsls	r1, r2, #8
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	68d2      	ldr	r2, [r2, #12]
 80041ba:	0912      	lsrs	r2, r2, #4
 80041bc:	0452      	lsls	r2, r2, #17
 80041be:	430a      	orrs	r2, r1
 80041c0:	492a      	ldr	r1, [pc, #168]	; (800426c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	610b      	str	r3, [r1, #16]
 80041c6:	e027      	b.n	8004218 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d112      	bne.n	80041f4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041ce:	4b27      	ldr	r3, [pc, #156]	; (800426c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80041d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6892      	ldr	r2, [r2, #8]
 80041de:	0211      	lsls	r1, r2, #8
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6912      	ldr	r2, [r2, #16]
 80041e4:	0852      	lsrs	r2, r2, #1
 80041e6:	3a01      	subs	r2, #1
 80041e8:	0552      	lsls	r2, r2, #21
 80041ea:	430a      	orrs	r2, r1
 80041ec:	491f      	ldr	r1, [pc, #124]	; (800426c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	610b      	str	r3, [r1, #16]
 80041f2:	e011      	b.n	8004218 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041f4:	4b1d      	ldr	r3, [pc, #116]	; (800426c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80041fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6892      	ldr	r2, [r2, #8]
 8004204:	0211      	lsls	r1, r2, #8
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6952      	ldr	r2, [r2, #20]
 800420a:	0852      	lsrs	r2, r2, #1
 800420c:	3a01      	subs	r2, #1
 800420e:	0652      	lsls	r2, r2, #25
 8004210:	430a      	orrs	r2, r1
 8004212:	4916      	ldr	r1, [pc, #88]	; (800426c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004214:	4313      	orrs	r3, r2
 8004216:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004218:	4b14      	ldr	r3, [pc, #80]	; (800426c <RCCEx_PLLSAI1_Config+0x1e4>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a13      	ldr	r2, [pc, #76]	; (800426c <RCCEx_PLLSAI1_Config+0x1e4>)
 800421e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004222:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004224:	f7fd fa66 	bl	80016f4 <HAL_GetTick>
 8004228:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800422a:	e009      	b.n	8004240 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800422c:	f7fd fa62 	bl	80016f4 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d902      	bls.n	8004240 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	73fb      	strb	r3, [r7, #15]
          break;
 800423e:	e005      	b.n	800424c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004240:	4b0a      	ldr	r3, [pc, #40]	; (800426c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0ef      	beq.n	800422c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800424c:	7bfb      	ldrb	r3, [r7, #15]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d106      	bne.n	8004260 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004252:	4b06      	ldr	r3, [pc, #24]	; (800426c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004254:	691a      	ldr	r2, [r3, #16]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	4904      	ldr	r1, [pc, #16]	; (800426c <RCCEx_PLLSAI1_Config+0x1e4>)
 800425c:	4313      	orrs	r3, r2
 800425e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004260:	7bfb      	ldrb	r3, [r7, #15]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40021000 	.word	0x40021000

08004270 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800427e:	4b6a      	ldr	r3, [pc, #424]	; (8004428 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d018      	beq.n	80042bc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800428a:	4b67      	ldr	r3, [pc, #412]	; (8004428 <RCCEx_PLLSAI2_Config+0x1b8>)
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f003 0203 	and.w	r2, r3, #3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d10d      	bne.n	80042b6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
       ||
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d009      	beq.n	80042b6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80042a2:	4b61      	ldr	r3, [pc, #388]	; (8004428 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	091b      	lsrs	r3, r3, #4
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
       ||
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d047      	beq.n	8004346 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	73fb      	strb	r3, [r7, #15]
 80042ba:	e044      	b.n	8004346 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d018      	beq.n	80042f6 <RCCEx_PLLSAI2_Config+0x86>
 80042c4:	2b03      	cmp	r3, #3
 80042c6:	d825      	bhi.n	8004314 <RCCEx_PLLSAI2_Config+0xa4>
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d002      	beq.n	80042d2 <RCCEx_PLLSAI2_Config+0x62>
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d009      	beq.n	80042e4 <RCCEx_PLLSAI2_Config+0x74>
 80042d0:	e020      	b.n	8004314 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042d2:	4b55      	ldr	r3, [pc, #340]	; (8004428 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d11d      	bne.n	800431a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042e2:	e01a      	b.n	800431a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042e4:	4b50      	ldr	r3, [pc, #320]	; (8004428 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d116      	bne.n	800431e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042f4:	e013      	b.n	800431e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042f6:	4b4c      	ldr	r3, [pc, #304]	; (8004428 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10f      	bne.n	8004322 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004302:	4b49      	ldr	r3, [pc, #292]	; (8004428 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d109      	bne.n	8004322 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004312:	e006      	b.n	8004322 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	73fb      	strb	r3, [r7, #15]
      break;
 8004318:	e004      	b.n	8004324 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800431a:	bf00      	nop
 800431c:	e002      	b.n	8004324 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800431e:	bf00      	nop
 8004320:	e000      	b.n	8004324 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004322:	bf00      	nop
    }

    if(status == HAL_OK)
 8004324:	7bfb      	ldrb	r3, [r7, #15]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10d      	bne.n	8004346 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800432a:	4b3f      	ldr	r3, [pc, #252]	; (8004428 <RCCEx_PLLSAI2_Config+0x1b8>)
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6819      	ldr	r1, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	3b01      	subs	r3, #1
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	430b      	orrs	r3, r1
 8004340:	4939      	ldr	r1, [pc, #228]	; (8004428 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004342:	4313      	orrs	r3, r2
 8004344:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d167      	bne.n	800441c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800434c:	4b36      	ldr	r3, [pc, #216]	; (8004428 <RCCEx_PLLSAI2_Config+0x1b8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a35      	ldr	r2, [pc, #212]	; (8004428 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004352:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004356:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004358:	f7fd f9cc 	bl	80016f4 <HAL_GetTick>
 800435c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800435e:	e009      	b.n	8004374 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004360:	f7fd f9c8 	bl	80016f4 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d902      	bls.n	8004374 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	73fb      	strb	r3, [r7, #15]
        break;
 8004372:	e005      	b.n	8004380 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004374:	4b2c      	ldr	r3, [pc, #176]	; (8004428 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1ef      	bne.n	8004360 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d14a      	bne.n	800441c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d111      	bne.n	80043b0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800438c:	4b26      	ldr	r3, [pc, #152]	; (8004428 <RCCEx_PLLSAI2_Config+0x1b8>)
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6892      	ldr	r2, [r2, #8]
 800439c:	0211      	lsls	r1, r2, #8
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	68d2      	ldr	r2, [r2, #12]
 80043a2:	0912      	lsrs	r2, r2, #4
 80043a4:	0452      	lsls	r2, r2, #17
 80043a6:	430a      	orrs	r2, r1
 80043a8:	491f      	ldr	r1, [pc, #124]	; (8004428 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	614b      	str	r3, [r1, #20]
 80043ae:	e011      	b.n	80043d4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043b0:	4b1d      	ldr	r3, [pc, #116]	; (8004428 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80043b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6892      	ldr	r2, [r2, #8]
 80043c0:	0211      	lsls	r1, r2, #8
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6912      	ldr	r2, [r2, #16]
 80043c6:	0852      	lsrs	r2, r2, #1
 80043c8:	3a01      	subs	r2, #1
 80043ca:	0652      	lsls	r2, r2, #25
 80043cc:	430a      	orrs	r2, r1
 80043ce:	4916      	ldr	r1, [pc, #88]	; (8004428 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80043d4:	4b14      	ldr	r3, [pc, #80]	; (8004428 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a13      	ldr	r2, [pc, #76]	; (8004428 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e0:	f7fd f988 	bl	80016f4 <HAL_GetTick>
 80043e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043e6:	e009      	b.n	80043fc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043e8:	f7fd f984 	bl	80016f4 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d902      	bls.n	80043fc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	73fb      	strb	r3, [r7, #15]
          break;
 80043fa:	e005      	b.n	8004408 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043fc:	4b0a      	ldr	r3, [pc, #40]	; (8004428 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0ef      	beq.n	80043e8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d106      	bne.n	800441c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800440e:	4b06      	ldr	r3, [pc, #24]	; (8004428 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004410:	695a      	ldr	r2, [r3, #20]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	4904      	ldr	r1, [pc, #16]	; (8004428 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004418:	4313      	orrs	r3, r2
 800441a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800441c:	7bfb      	ldrb	r3, [r7, #15]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40021000 	.word	0x40021000

0800442c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e049      	b.n	80044d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d106      	bne.n	8004458 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7fd f836 	bl	80014c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3304      	adds	r3, #4
 8004468:	4619      	mov	r1, r3
 800446a:	4610      	mov	r0, r2
 800446c:	f000 faa4 	bl	80049b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
	...

080044dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d001      	beq.n	80044f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e04f      	b.n	8004594 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0201 	orr.w	r2, r2, #1
 800450a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a23      	ldr	r2, [pc, #140]	; (80045a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d01d      	beq.n	8004552 <HAL_TIM_Base_Start_IT+0x76>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800451e:	d018      	beq.n	8004552 <HAL_TIM_Base_Start_IT+0x76>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a1f      	ldr	r2, [pc, #124]	; (80045a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d013      	beq.n	8004552 <HAL_TIM_Base_Start_IT+0x76>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a1e      	ldr	r2, [pc, #120]	; (80045a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d00e      	beq.n	8004552 <HAL_TIM_Base_Start_IT+0x76>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a1c      	ldr	r2, [pc, #112]	; (80045ac <HAL_TIM_Base_Start_IT+0xd0>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d009      	beq.n	8004552 <HAL_TIM_Base_Start_IT+0x76>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a1b      	ldr	r2, [pc, #108]	; (80045b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d004      	beq.n	8004552 <HAL_TIM_Base_Start_IT+0x76>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a19      	ldr	r2, [pc, #100]	; (80045b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d115      	bne.n	800457e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	4b17      	ldr	r3, [pc, #92]	; (80045b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800455a:	4013      	ands	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2b06      	cmp	r3, #6
 8004562:	d015      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0xb4>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800456a:	d011      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0201 	orr.w	r2, r2, #1
 800457a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800457c:	e008      	b.n	8004590 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f042 0201 	orr.w	r2, r2, #1
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	e000      	b.n	8004592 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004590:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	40012c00 	.word	0x40012c00
 80045a4:	40000400 	.word	0x40000400
 80045a8:	40000800 	.word	0x40000800
 80045ac:	40000c00 	.word	0x40000c00
 80045b0:	40013400 	.word	0x40013400
 80045b4:	40014000 	.word	0x40014000
 80045b8:	00010007 	.word	0x00010007

080045bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d020      	beq.n	8004620 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d01b      	beq.n	8004620 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f06f 0202 	mvn.w	r2, #2
 80045f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	f003 0303 	and.w	r3, r3, #3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f9b7 	bl	800497a <HAL_TIM_IC_CaptureCallback>
 800460c:	e005      	b.n	800461a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f9a9 	bl	8004966 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f9ba 	bl	800498e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f003 0304 	and.w	r3, r3, #4
 8004626:	2b00      	cmp	r3, #0
 8004628:	d020      	beq.n	800466c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f003 0304 	and.w	r3, r3, #4
 8004630:	2b00      	cmp	r3, #0
 8004632:	d01b      	beq.n	800466c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0204 	mvn.w	r2, #4
 800463c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2202      	movs	r2, #2
 8004642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f991 	bl	800497a <HAL_TIM_IC_CaptureCallback>
 8004658:	e005      	b.n	8004666 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f983 	bl	8004966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 f994 	bl	800498e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d020      	beq.n	80046b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f003 0308 	and.w	r3, r3, #8
 800467c:	2b00      	cmp	r3, #0
 800467e:	d01b      	beq.n	80046b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f06f 0208 	mvn.w	r2, #8
 8004688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2204      	movs	r2, #4
 800468e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	f003 0303 	and.w	r3, r3, #3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f96b 	bl	800497a <HAL_TIM_IC_CaptureCallback>
 80046a4:	e005      	b.n	80046b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f95d 	bl	8004966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f96e 	bl	800498e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f003 0310 	and.w	r3, r3, #16
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d020      	beq.n	8004704 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f003 0310 	and.w	r3, r3, #16
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d01b      	beq.n	8004704 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f06f 0210 	mvn.w	r2, #16
 80046d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2208      	movs	r2, #8
 80046da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f945 	bl	800497a <HAL_TIM_IC_CaptureCallback>
 80046f0:	e005      	b.n	80046fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f937 	bl	8004966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f948 	bl	800498e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00c      	beq.n	8004728 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b00      	cmp	r3, #0
 8004716:	d007      	beq.n	8004728 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f06f 0201 	mvn.w	r2, #1
 8004720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f915 	bl	8004952 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00c      	beq.n	800474c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004738:	2b00      	cmp	r3, #0
 800473a:	d007      	beq.n	800474c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fafc 	bl	8004d44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00c      	beq.n	8004770 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475c:	2b00      	cmp	r3, #0
 800475e:	d007      	beq.n	8004770 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 faf4 	bl	8004d58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00c      	beq.n	8004794 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004780:	2b00      	cmp	r3, #0
 8004782:	d007      	beq.n	8004794 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800478c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f907 	bl	80049a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f003 0320 	and.w	r3, r3, #32
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00c      	beq.n	80047b8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f003 0320 	and.w	r3, r3, #32
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d007      	beq.n	80047b8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0220 	mvn.w	r2, #32
 80047b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fabc 	bl	8004d30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047b8:	bf00      	nop
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_TIM_ConfigClockSource+0x1c>
 80047d8:	2302      	movs	r3, #2
 80047da:	e0b6      	b.n	800494a <HAL_TIM_ConfigClockSource+0x18a>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004806:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004818:	d03e      	beq.n	8004898 <HAL_TIM_ConfigClockSource+0xd8>
 800481a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800481e:	f200 8087 	bhi.w	8004930 <HAL_TIM_ConfigClockSource+0x170>
 8004822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004826:	f000 8086 	beq.w	8004936 <HAL_TIM_ConfigClockSource+0x176>
 800482a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800482e:	d87f      	bhi.n	8004930 <HAL_TIM_ConfigClockSource+0x170>
 8004830:	2b70      	cmp	r3, #112	; 0x70
 8004832:	d01a      	beq.n	800486a <HAL_TIM_ConfigClockSource+0xaa>
 8004834:	2b70      	cmp	r3, #112	; 0x70
 8004836:	d87b      	bhi.n	8004930 <HAL_TIM_ConfigClockSource+0x170>
 8004838:	2b60      	cmp	r3, #96	; 0x60
 800483a:	d050      	beq.n	80048de <HAL_TIM_ConfigClockSource+0x11e>
 800483c:	2b60      	cmp	r3, #96	; 0x60
 800483e:	d877      	bhi.n	8004930 <HAL_TIM_ConfigClockSource+0x170>
 8004840:	2b50      	cmp	r3, #80	; 0x50
 8004842:	d03c      	beq.n	80048be <HAL_TIM_ConfigClockSource+0xfe>
 8004844:	2b50      	cmp	r3, #80	; 0x50
 8004846:	d873      	bhi.n	8004930 <HAL_TIM_ConfigClockSource+0x170>
 8004848:	2b40      	cmp	r3, #64	; 0x40
 800484a:	d058      	beq.n	80048fe <HAL_TIM_ConfigClockSource+0x13e>
 800484c:	2b40      	cmp	r3, #64	; 0x40
 800484e:	d86f      	bhi.n	8004930 <HAL_TIM_ConfigClockSource+0x170>
 8004850:	2b30      	cmp	r3, #48	; 0x30
 8004852:	d064      	beq.n	800491e <HAL_TIM_ConfigClockSource+0x15e>
 8004854:	2b30      	cmp	r3, #48	; 0x30
 8004856:	d86b      	bhi.n	8004930 <HAL_TIM_ConfigClockSource+0x170>
 8004858:	2b20      	cmp	r3, #32
 800485a:	d060      	beq.n	800491e <HAL_TIM_ConfigClockSource+0x15e>
 800485c:	2b20      	cmp	r3, #32
 800485e:	d867      	bhi.n	8004930 <HAL_TIM_ConfigClockSource+0x170>
 8004860:	2b00      	cmp	r3, #0
 8004862:	d05c      	beq.n	800491e <HAL_TIM_ConfigClockSource+0x15e>
 8004864:	2b10      	cmp	r3, #16
 8004866:	d05a      	beq.n	800491e <HAL_TIM_ConfigClockSource+0x15e>
 8004868:	e062      	b.n	8004930 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800487a:	f000 f9b1 	bl	8004be0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800488c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	609a      	str	r2, [r3, #8]
      break;
 8004896:	e04f      	b.n	8004938 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048a8:	f000 f99a 	bl	8004be0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048ba:	609a      	str	r2, [r3, #8]
      break;
 80048bc:	e03c      	b.n	8004938 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ca:	461a      	mov	r2, r3
 80048cc:	f000 f90e 	bl	8004aec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2150      	movs	r1, #80	; 0x50
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 f967 	bl	8004baa <TIM_ITRx_SetConfig>
      break;
 80048dc:	e02c      	b.n	8004938 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048ea:	461a      	mov	r2, r3
 80048ec:	f000 f92d 	bl	8004b4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2160      	movs	r1, #96	; 0x60
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 f957 	bl	8004baa <TIM_ITRx_SetConfig>
      break;
 80048fc:	e01c      	b.n	8004938 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800490a:	461a      	mov	r2, r3
 800490c:	f000 f8ee 	bl	8004aec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2140      	movs	r1, #64	; 0x40
 8004916:	4618      	mov	r0, r3
 8004918:	f000 f947 	bl	8004baa <TIM_ITRx_SetConfig>
      break;
 800491c:	e00c      	b.n	8004938 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4619      	mov	r1, r3
 8004928:	4610      	mov	r0, r2
 800492a:	f000 f93e 	bl	8004baa <TIM_ITRx_SetConfig>
      break;
 800492e:	e003      	b.n	8004938 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	73fb      	strb	r3, [r7, #15]
      break;
 8004934:	e000      	b.n	8004938 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004936:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004948:	7bfb      	ldrb	r3, [r7, #15]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
	...

080049b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a40      	ldr	r2, [pc, #256]	; (8004acc <TIM_Base_SetConfig+0x114>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d013      	beq.n	80049f8 <TIM_Base_SetConfig+0x40>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d6:	d00f      	beq.n	80049f8 <TIM_Base_SetConfig+0x40>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a3d      	ldr	r2, [pc, #244]	; (8004ad0 <TIM_Base_SetConfig+0x118>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00b      	beq.n	80049f8 <TIM_Base_SetConfig+0x40>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a3c      	ldr	r2, [pc, #240]	; (8004ad4 <TIM_Base_SetConfig+0x11c>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d007      	beq.n	80049f8 <TIM_Base_SetConfig+0x40>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a3b      	ldr	r2, [pc, #236]	; (8004ad8 <TIM_Base_SetConfig+0x120>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d003      	beq.n	80049f8 <TIM_Base_SetConfig+0x40>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a3a      	ldr	r2, [pc, #232]	; (8004adc <TIM_Base_SetConfig+0x124>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d108      	bne.n	8004a0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a2f      	ldr	r2, [pc, #188]	; (8004acc <TIM_Base_SetConfig+0x114>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d01f      	beq.n	8004a52 <TIM_Base_SetConfig+0x9a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a18:	d01b      	beq.n	8004a52 <TIM_Base_SetConfig+0x9a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a2c      	ldr	r2, [pc, #176]	; (8004ad0 <TIM_Base_SetConfig+0x118>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d017      	beq.n	8004a52 <TIM_Base_SetConfig+0x9a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a2b      	ldr	r2, [pc, #172]	; (8004ad4 <TIM_Base_SetConfig+0x11c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d013      	beq.n	8004a52 <TIM_Base_SetConfig+0x9a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a2a      	ldr	r2, [pc, #168]	; (8004ad8 <TIM_Base_SetConfig+0x120>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d00f      	beq.n	8004a52 <TIM_Base_SetConfig+0x9a>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a29      	ldr	r2, [pc, #164]	; (8004adc <TIM_Base_SetConfig+0x124>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00b      	beq.n	8004a52 <TIM_Base_SetConfig+0x9a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a28      	ldr	r2, [pc, #160]	; (8004ae0 <TIM_Base_SetConfig+0x128>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d007      	beq.n	8004a52 <TIM_Base_SetConfig+0x9a>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a27      	ldr	r2, [pc, #156]	; (8004ae4 <TIM_Base_SetConfig+0x12c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d003      	beq.n	8004a52 <TIM_Base_SetConfig+0x9a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a26      	ldr	r2, [pc, #152]	; (8004ae8 <TIM_Base_SetConfig+0x130>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d108      	bne.n	8004a64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a10      	ldr	r2, [pc, #64]	; (8004acc <TIM_Base_SetConfig+0x114>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d00f      	beq.n	8004ab0 <TIM_Base_SetConfig+0xf8>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a12      	ldr	r2, [pc, #72]	; (8004adc <TIM_Base_SetConfig+0x124>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d00b      	beq.n	8004ab0 <TIM_Base_SetConfig+0xf8>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a11      	ldr	r2, [pc, #68]	; (8004ae0 <TIM_Base_SetConfig+0x128>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d007      	beq.n	8004ab0 <TIM_Base_SetConfig+0xf8>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a10      	ldr	r2, [pc, #64]	; (8004ae4 <TIM_Base_SetConfig+0x12c>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d003      	beq.n	8004ab0 <TIM_Base_SetConfig+0xf8>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a0f      	ldr	r2, [pc, #60]	; (8004ae8 <TIM_Base_SetConfig+0x130>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d103      	bne.n	8004ab8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	691a      	ldr	r2, [r3, #16]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	615a      	str	r2, [r3, #20]
}
 8004abe:	bf00      	nop
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	40012c00 	.word	0x40012c00
 8004ad0:	40000400 	.word	0x40000400
 8004ad4:	40000800 	.word	0x40000800
 8004ad8:	40000c00 	.word	0x40000c00
 8004adc:	40013400 	.word	0x40013400
 8004ae0:	40014000 	.word	0x40014000
 8004ae4:	40014400 	.word	0x40014400
 8004ae8:	40014800 	.word	0x40014800

08004aec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	f023 0201 	bic.w	r2, r3, #1
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	011b      	lsls	r3, r3, #4
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f023 030a 	bic.w	r3, r3, #10
 8004b28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	621a      	str	r2, [r3, #32]
}
 8004b3e:	bf00      	nop
 8004b40:	371c      	adds	r7, #28
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b087      	sub	sp, #28
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	60f8      	str	r0, [r7, #12]
 8004b52:	60b9      	str	r1, [r7, #8]
 8004b54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	f023 0210 	bic.w	r2, r3, #16
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	031b      	lsls	r3, r3, #12
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	011b      	lsls	r3, r3, #4
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	621a      	str	r2, [r3, #32]
}
 8004b9e:	bf00      	nop
 8004ba0:	371c      	adds	r7, #28
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b085      	sub	sp, #20
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
 8004bb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f043 0307 	orr.w	r3, r3, #7
 8004bcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	609a      	str	r2, [r3, #8]
}
 8004bd4:	bf00      	nop
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
 8004bec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	021a      	lsls	r2, r3, #8
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	431a      	orrs	r2, r3
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	609a      	str	r2, [r3, #8]
}
 8004c14:	bf00      	nop
 8004c16:	371c      	adds	r7, #28
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d101      	bne.n	8004c38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c34:	2302      	movs	r3, #2
 8004c36:	e068      	b.n	8004d0a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a2e      	ldr	r2, [pc, #184]	; (8004d18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d004      	beq.n	8004c6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a2d      	ldr	r2, [pc, #180]	; (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d108      	bne.n	8004c7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a1e      	ldr	r2, [pc, #120]	; (8004d18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d01d      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004caa:	d018      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a1b      	ldr	r2, [pc, #108]	; (8004d20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d013      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a1a      	ldr	r2, [pc, #104]	; (8004d24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00e      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a18      	ldr	r2, [pc, #96]	; (8004d28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d009      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a13      	ldr	r2, [pc, #76]	; (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d004      	beq.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a14      	ldr	r2, [pc, #80]	; (8004d2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ce4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	40012c00 	.word	0x40012c00
 8004d1c:	40013400 	.word	0x40013400
 8004d20:	40000400 	.word	0x40000400
 8004d24:	40000800 	.word	0x40000800
 8004d28:	40000c00 	.word	0x40000c00
 8004d2c:	40014000 	.word	0x40014000

08004d30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <memset>:
 8004d6c:	4402      	add	r2, r0
 8004d6e:	4603      	mov	r3, r0
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d100      	bne.n	8004d76 <memset+0xa>
 8004d74:	4770      	bx	lr
 8004d76:	f803 1b01 	strb.w	r1, [r3], #1
 8004d7a:	e7f9      	b.n	8004d70 <memset+0x4>

08004d7c <__libc_init_array>:
 8004d7c:	b570      	push	{r4, r5, r6, lr}
 8004d7e:	4d0d      	ldr	r5, [pc, #52]	; (8004db4 <__libc_init_array+0x38>)
 8004d80:	4c0d      	ldr	r4, [pc, #52]	; (8004db8 <__libc_init_array+0x3c>)
 8004d82:	1b64      	subs	r4, r4, r5
 8004d84:	10a4      	asrs	r4, r4, #2
 8004d86:	2600      	movs	r6, #0
 8004d88:	42a6      	cmp	r6, r4
 8004d8a:	d109      	bne.n	8004da0 <__libc_init_array+0x24>
 8004d8c:	4d0b      	ldr	r5, [pc, #44]	; (8004dbc <__libc_init_array+0x40>)
 8004d8e:	4c0c      	ldr	r4, [pc, #48]	; (8004dc0 <__libc_init_array+0x44>)
 8004d90:	f000 f818 	bl	8004dc4 <_init>
 8004d94:	1b64      	subs	r4, r4, r5
 8004d96:	10a4      	asrs	r4, r4, #2
 8004d98:	2600      	movs	r6, #0
 8004d9a:	42a6      	cmp	r6, r4
 8004d9c:	d105      	bne.n	8004daa <__libc_init_array+0x2e>
 8004d9e:	bd70      	pop	{r4, r5, r6, pc}
 8004da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004da4:	4798      	blx	r3
 8004da6:	3601      	adds	r6, #1
 8004da8:	e7ee      	b.n	8004d88 <__libc_init_array+0xc>
 8004daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dae:	4798      	blx	r3
 8004db0:	3601      	adds	r6, #1
 8004db2:	e7f2      	b.n	8004d9a <__libc_init_array+0x1e>
 8004db4:	08004e1c 	.word	0x08004e1c
 8004db8:	08004e1c 	.word	0x08004e1c
 8004dbc:	08004e1c 	.word	0x08004e1c
 8004dc0:	08004e20 	.word	0x08004e20

08004dc4 <_init>:
 8004dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc6:	bf00      	nop
 8004dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dca:	bc08      	pop	{r3}
 8004dcc:	469e      	mov	lr, r3
 8004dce:	4770      	bx	lr

08004dd0 <_fini>:
 8004dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd2:	bf00      	nop
 8004dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dd6:	bc08      	pop	{r3}
 8004dd8:	469e      	mov	lr, r3
 8004dda:	4770      	bx	lr
