
lab2_444.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b18  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  08004ca0  08004ca0  00014ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054e4  080054e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080054e4  080054e4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054e4  080054e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054e4  080054e4  000154e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054e8  080054e8  000154e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080054ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  080054f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  080054f8  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e354  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002055  00000000  00000000  0002e448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b48  00000000  00000000  000304a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000858  00000000  00000000  00030fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027148  00000000  00000000  00031840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c89a  00000000  00000000  00058988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7499  00000000  00000000  00065222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e90  00000000  00000000  0015c6bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0015f54c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  0015f5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  0015f6aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004c88 	.word	0x08004c88

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004c88 	.word	0x08004c88

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	0000      	movs	r0, r0
	...

08000838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b0c8      	sub	sp, #288	; 0x120
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800083e:	f000 fdd2 	bl	80013e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000842:	f000 facb 	bl	8000ddc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000846:	f000 fb1b 	bl	8000e80 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084a:	f000 fc5b 	bl	8001104 <MX_GPIO_Init>
  MX_DAC1_Init();
 800084e:	f000 fc1d 	bl	800108c <MX_DAC1_Init>
  MX_ADC1_Init();
 8000852:	f000 fb41 	bl	8000ed8 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000856:	f000 fbb5 	bl	8000fc4 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800085a:	2100      	movs	r1, #0
 800085c:	487c      	ldr	r0, [pc, #496]	; (8000a50 <main+0x218>)
 800085e:	f002 fb22 	bl	8002ea6 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000862:	2110      	movs	r1, #16
 8000864:	487a      	ldr	r0, [pc, #488]	; (8000a50 <main+0x218>)
 8000866:	f002 fb1e 	bl	8002ea6 <HAL_DAC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t j =0;
 800086a:	2300      	movs	r3, #0
 800086c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

  uint32_t triangle[16];
  uint32_t triangleG;

  uint32_t sine;
  float pi=3.14;
 8000870:	4b78      	ldr	r3, [pc, #480]	; (8000a54 <main+0x21c>)
 8000872:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  float tempCelsius;
  uint32_t sineWave[16];

  //part 4
  uint32_t a =0;
 8000876:	2300      	movs	r3, #0
 8000878:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  //uint32_t waveformValue;
  uint32_t z = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  GPIO_PinState lastButtonState = GPIO_PIN_SET; // Initialize to released state
 8000882:	2301      	movs	r3, #1
 8000884:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 uint32_t button_counter =0;
 8000888:	2300      	movs	r3, #0
 800088a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 uint32_t iteration;


  for(uint32_t i =0; i<16; i++){
 800088e:	2300      	movs	r3, #0
 8000890:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000894:	e07b      	b.n	800098e <main+0x156>
	  saw[i]= i*256; //4095/16
 8000896:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800089a:	021a      	lsls	r2, r3, #8
 800089c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80008a6:	443b      	add	r3, r7
 80008a8:	f843 2c8c 	str.w	r2, [r3, #-140]
	  if (i < 8)
 80008ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80008b0:	2b07      	cmp	r3, #7
 80008b2:	d80b      	bhi.n	80008cc <main+0x94>
	  		  triangle[i] = i * 512; //4095/(16/2)
 80008b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80008b8:	025a      	lsls	r2, r3, #9
 80008ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80008c4:	443b      	add	r3, r7
 80008c6:	f843 2ccc 	str.w	r2, [r3, #-204]
 80008ca:	e01d      	b.n	8000908 <main+0xd0>
	  	  else if (i == 8)
 80008cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80008d0:	2b08      	cmp	r3, #8
 80008d2:	d10a      	bne.n	80008ea <main+0xb2>
	  		  // normally would be 256, but want it to be 8 bit
	  		  triangle[i] = 4095; //peak
 80008d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80008de:	443b      	add	r3, r7
 80008e0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80008e4:	f843 2ccc 	str.w	r2, [r3, #-204]
 80008e8:	e00e      	b.n	8000908 <main+0xd0>
	  	  else
	  		  triangle[i] = 4096 - ((i % 8) * 512);
 80008ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	f1c3 0308 	rsb	r3, r3, #8
 80008f6:	025a      	lsls	r2, r3, #9
 80008f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8000902:	443b      	add	r3, r7
 8000904:	f843 2ccc 	str.w	r2, [r3, #-204]
	  sineWave[i] = (uint32_t) roundf(2047.0 * (1.0 + arm_sin_f32(pi * i / 8)));
 8000908:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800090c:	ee07 3a90 	vmov	s15, r3
 8000910:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000914:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 8000918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800091c:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8000920:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000924:	eeb0 0a47 	vmov.f32	s0, s14
 8000928:	f004 f918 	bl	8004b5c <arm_sin_f32>
 800092c:	ee10 3a10 	vmov	r3, s0
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff fed7 	bl	80006e4 <__aeabi_f2d>
 8000936:	f04f 0200 	mov.w	r2, #0
 800093a:	4b47      	ldr	r3, [pc, #284]	; (8000a58 <main+0x220>)
 800093c:	f7ff fd74 	bl	8000428 <__adddf3>
 8000940:	4602      	mov	r2, r0
 8000942:	460b      	mov	r3, r1
 8000944:	4610      	mov	r0, r2
 8000946:	4619      	mov	r1, r3
 8000948:	a33f      	add	r3, pc, #252	; (adr r3, 8000a48 <main+0x210>)
 800094a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800094e:	f7ff fc3b 	bl	80001c8 <__aeabi_dmul>
 8000952:	4602      	mov	r2, r0
 8000954:	460b      	mov	r3, r1
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	f7ff ff1b 	bl	8000794 <__aeabi_d2f>
 800095e:	4603      	mov	r3, r0
 8000960:	ee00 3a10 	vmov	s0, r3
 8000964:	f004 f96c 	bl	8004c40 <roundf>
 8000968:	eef0 7a40 	vmov.f32	s15, s0
 800096c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000970:	ee17 1a90 	vmov	r1, s15
 8000974:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000978:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800097c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8000980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(uint32_t i =0; i<16; i++){
 8000984:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000988:	3301      	adds	r3, #1
 800098a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800098e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000992:	2b0f      	cmp	r3, #15
 8000994:	f67f af7f 	bls.w	8000896 <main+0x5e>
//	  				}
//	  	//part 3 end

	  	//part 4 start

	  GPIO_PinState button = HAL_GPIO_ReadPin(PushButton_GPIO_Port, PushButton_Pin);
 8000998:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800099c:	482f      	ldr	r0, [pc, #188]	; (8000a5c <main+0x224>)
 800099e:	f002 fdc5 	bl	800352c <HAL_GPIO_ReadPin>
 80009a2:	4603      	mov	r3, r0
 80009a4:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb

	      if (button == GPIO_PIN_RESET && lastButtonState == GPIO_PIN_SET) {
 80009a8:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d10f      	bne.n	80009d0 <main+0x198>
 80009b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d10b      	bne.n	80009d0 <main+0x198>
	          // Button was pressed
	          button_counter++;
 80009b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80009bc:	3301      	adds	r3, #1
 80009be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	          if (button_counter > 6) {
 80009c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80009c6:	2b06      	cmp	r3, #6
 80009c8:	d902      	bls.n	80009d0 <main+0x198>
	              button_counter = 1;
 80009ca:	2301      	movs	r3, #1
 80009cc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	          }
	      }

	      lastButtonState = button;
 80009d0:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80009d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	      if (button_counter == 0) {
 80009d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d13f      	bne.n	8000a60 <main+0x228>
	          // Default saw waveform
	          sawG = saw[a];
 80009e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80009ea:	443b      	add	r3, r7
 80009ec:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 80009f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	          HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sawG);
 80009f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80009f8:	2200      	movs	r2, #0
 80009fa:	2100      	movs	r1, #0
 80009fc:	4814      	ldr	r0, [pc, #80]	; (8000a50 <main+0x218>)
 80009fe:	f002 fa9f 	bl	8002f40 <HAL_DAC_SetValue>
	          a = (a + 1) % 16;
 8000a02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000a06:	3301      	adds	r3, #1
 8000a08:	f003 030f 	and.w	r3, r3, #15
 8000a0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	          for (volatile uint32_t k = 0; k < 400; k++) {
 8000a10:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000a14:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	e00a      	b.n	8000a34 <main+0x1fc>
 8000a1e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000a22:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	1c5a      	adds	r2, r3, #1
 8000a2a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000a2e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000a38:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000a42:	d3ec      	bcc.n	8000a1e <main+0x1e6>
 8000a44:	e7a8      	b.n	8000998 <main+0x160>
 8000a46:	bf00      	nop
 8000a48:	00000000 	.word	0x00000000
 8000a4c:	409ffc00 	.word	0x409ffc00
 8000a50:	200000f0 	.word	0x200000f0
 8000a54:	4048f5c3 	.word	0x4048f5c3
 8000a58:	3ff00000 	.word	0x3ff00000
 8000a5c:	48000800 	.word	0x48000800
	          	    	          // This loop consumes CPU cycles and creates a delay
	          	  }
	      } else {

	          if (button_counter == 1 || button_counter == 3 || button_counter == 5) {
 8000a60:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d008      	beq.n	8000a7a <main+0x242>
 8000a68:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000a6c:	2b03      	cmp	r3, #3
 8000a6e:	d004      	beq.n	8000a7a <main+0x242>
 8000a70:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000a74:	2b05      	cmp	r3, #5
 8000a76:	f040 80e4 	bne.w	8000c42 <main+0x40a>
	              // Temperature-related operations...
	        	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a80:	48cc      	ldr	r0, [pc, #816]	; (8000db4 <main+0x57c>)
 8000a82:	f002 fd6b 	bl	800355c <HAL_GPIO_WritePin>
//	        	  while (button == GPIO_PIN_SET) {
//	        	   // Wait for the button to be released
//	        		  button = HAL_GPIO_ReadPin(PushButton_GPIO_Port, PushButton_Pin);
//
//	        	  }
	        	  sawG = saw[z];
 8000a86:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8000a90:	443b      	add	r3, r7
 8000a92:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8000a96:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	        	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sawG);
 8000a9a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	48c5      	ldr	r0, [pc, #788]	; (8000db8 <main+0x580>)
 8000aa4:	f002 fa4c 	bl	8002f40 <HAL_DAC_SetValue>
	        	  z = (z + 1) % 16;
 8000aa8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000aac:	3301      	adds	r3, #1
 8000aae:	f003 030f 	and.w	r3, r3, #15
 8000ab2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	        	  	  	uint16_t V_Measured;
	        	  	  	uint16_t tempVoltage;

	        	  	  	//HAL_ADC_PollForConversion:ensure ADC conversion is completed, 10000S TIME OUT
	        	  	  	//HAL_ADC_GetValue: get the vale at hadc 1
	        	  	  	HAL_ADC_Start(&hadc1);
 8000ab6:	48c1      	ldr	r0, [pc, #772]	; (8000dbc <main+0x584>)
 8000ab8:	f001 f8b0 	bl	8001c1c <HAL_ADC_Start>

	        	  	  	if(HAL_ADC_PollForConversion(&hadc1, 10000) == HAL_OK) {
 8000abc:	f242 7110 	movw	r1, #10000	; 0x2710
 8000ac0:	48be      	ldr	r0, [pc, #760]	; (8000dbc <main+0x584>)
 8000ac2:	f001 f999 	bl	8001df8 <HAL_ADC_PollForConversion>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d120      	bne.n	8000b0e <main+0x2d6>
	        	  	  			V_Measured = HAL_ADC_GetValue(&hadc1);
 8000acc:	48bb      	ldr	r0, [pc, #748]	; (8000dbc <main+0x584>)
 8000ace:	f001 fa6b 	bl	8001fa8 <HAL_ADC_GetValue>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
	        	  	  			HAL_ADC_Stop(&hadc1);
 8000ad8:	48b8      	ldr	r0, [pc, #736]	; (8000dbc <main+0x584>)
 8000ada:	f001 f959 	bl	8001d90 <HAL_ADC_Stop>
	        	  	  			uint16_t VREFINT_CAL =  *((uint16_t*) (0x1FFF75AA));
 8000ade:	4bb8      	ldr	r3, [pc, #736]	; (8000dc0 <main+0x588>)
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
	        	  	  			VREF = 3000 * (float) VREFINT_CAL / ((float) V_Measured);
 8000ae6:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8000aea:	ee07 3a90 	vmov	s15, r3
 8000aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000af2:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8000dc4 <main+0x58c>
 8000af6:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000afa:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
 8000afe:	ee07 3a90 	vmov	s15, r3
 8000b02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b0a:	edc7 7a41 	vstr	s15, [r7, #260]	; 0x104
	        	  	  	}

	        	  	  	// get tempVoltage
	        	  	  	// calculate temp in Celsious based on tempVoltage and VREF and calibrated values
	        	  	  	HAL_ADC_Start(&hadc3);
 8000b0e:	48ae      	ldr	r0, [pc, #696]	; (8000dc8 <main+0x590>)
 8000b10:	f001 f884 	bl	8001c1c <HAL_ADC_Start>
	        	  	  	if(HAL_ADC_PollForConversion(&hadc3, 10000) == HAL_OK) {
 8000b14:	f242 7110 	movw	r1, #10000	; 0x2710
 8000b18:	48ab      	ldr	r0, [pc, #684]	; (8000dc8 <main+0x590>)
 8000b1a:	f001 f96d 	bl	8001df8 <HAL_ADC_PollForConversion>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d172      	bne.n	8000c0a <main+0x3d2>
	        	  	  			tempVoltage = HAL_ADC_GetValue(&hadc3);
 8000b24:	48a8      	ldr	r0, [pc, #672]	; (8000dc8 <main+0x590>)
 8000b26:	f001 fa3f 	bl	8001fa8 <HAL_ADC_GetValue>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
	        	  	  			HAL_ADC_Stop(&hadc3);
 8000b30:	48a5      	ldr	r0, [pc, #660]	; (8000dc8 <main+0x590>)
 8000b32:	f001 f92d 	bl	8001d90 <HAL_ADC_Stop>
	        	  	  			uint16_t castedTempVoltage = (uint16_t) tempVoltage;
 8000b36:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8000b3a:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4

	        	  	  			uint16_t TS_CAL2 = *((uint16_t*) (0x1FFF75CA));
 8000b3e:	4ba3      	ldr	r3, [pc, #652]	; (8000dcc <main+0x594>)
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
	        	  	  			uint16_t TS_CAL1 = *((uint16_t*) (0x1FFF75A8));
 8000b46:	4ba2      	ldr	r3, [pc, #648]	; (8000dd0 <main+0x598>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0

	        	  	  			int16_t TS_DATA= castedTempVoltage*VREF/3000;
 8000b4e:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8000b52:	ee07 3a90 	vmov	s15, r3
 8000b56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b5a:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 8000b5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b62:	eddf 6a98 	vldr	s13, [pc, #608]	; 8000dc4 <main+0x58c>
 8000b66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b6e:	ee17 3a90 	vmov	r3, s15
 8000b72:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
	        	  	  			int16_t diff = TS_DATA - TS_CAL1;
 8000b76:	f8b7 20de 	ldrh.w	r2, [r7, #222]	; 0xde
 8000b7a:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc

	        	  	  			uint16_t cal_temp_difference = 110 - 30;
 8000b86:	2350      	movs	r3, #80	; 0x50
 8000b88:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
	        	  	  			uint16_t cal_difference = TS_CAL2 - TS_CAL1;
 8000b8c:	f8b7 20e2 	ldrh.w	r2, [r7, #226]	; 0xe2
 8000b90:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8

	        	  	  			// in here, we are also scaling the TS_CAL2/1 according to VREF
	        	  	  		    tempCelsius = ((((float) cal_temp_difference) / ((float) cal_difference))*diff)+30;
 8000b9a:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8000b9e:	ee07 3a90 	vmov	s15, r3
 8000ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000ba6:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8000baa:	ee07 3a90 	vmov	s15, r3
 8000bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000bb6:	f9b7 30dc 	ldrsh.w	r3, [r7, #220]	; 0xdc
 8000bba:	ee07 3a90 	vmov	s15, r3
 8000bbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bc6:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000bca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000bce:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4


	        	  	  		    iteration = roundf(tempCelsius*(100)-1700);
 8000bd2:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8000bd6:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8000dd4 <main+0x59c>
 8000bda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bde:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8000dd8 <main+0x5a0>
 8000be2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000be6:	eeb0 0a67 	vmov.f32	s0, s15
 8000bea:	f004 f829 	bl	8004c40 <roundf>
 8000bee:	eef0 7a40 	vmov.f32	s15, s0
 8000bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bf6:	ee17 3a90 	vmov	r3, s15
 8000bfa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	        	  	  			HAL_ADC_Stop(&hadc3);
 8000bfe:	4872      	ldr	r0, [pc, #456]	; (8000dc8 <main+0x590>)
 8000c00:	f001 f8c6 	bl	8001d90 <HAL_ADC_Stop>
	        	  	  			HAL_ADC_Stop(&hadc1);
 8000c04:	486d      	ldr	r0, [pc, #436]	; (8000dbc <main+0x584>)
 8000c06:	f001 f8c3 	bl	8001d90 <HAL_ADC_Stop>

	        	  	  				}
	        	  for (volatile uint32_t k = 0; k < iteration; k++) {
 8000c0a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000c0e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	e00a      	b.n	8000c2e <main+0x3f6>
 8000c18:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000c1c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	1c5a      	adds	r2, r3, #1
 8000c24:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000c28:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000c32:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d8eb      	bhi.n	8000c18 <main+0x3e0>
	          if (button_counter == 1 || button_counter == 3 || button_counter == 5) {
 8000c40:	e0b6      	b.n	8000db0 <main+0x578>
	        	  	    	          // This loop consumes CPU cycles and creates a delay
	        	  }

	          } else if (button_counter == 2) {
 8000c42:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d138      	bne.n	8000cbc <main+0x484>
	        	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c50:	4858      	ldr	r0, [pc, #352]	; (8000db4 <main+0x57c>)
 8000c52:	f002 fc83 	bl	800355c <HAL_GPIO_WritePin>
	              // Triangle waveform
	              triangleG = triangle[z];
 8000c56:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8000c60:	443b      	add	r3, r7
 8000c62:	f853 3ccc 	ldr.w	r3, [r3, #-204]
 8000c66:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	              HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, triangleG);
 8000c6a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2100      	movs	r1, #0
 8000c72:	4851      	ldr	r0, [pc, #324]	; (8000db8 <main+0x580>)
 8000c74:	f002 f964 	bl	8002f40 <HAL_DAC_SetValue>
	              z = (z + 1) % 16;
 8000c78:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	f003 030f 	and.w	r3, r3, #15
 8000c82:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	    	      // Delay for a short period
	    	      for (volatile uint32_t k = 0; k < 400; k++) {
 8000c86:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000c8a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	e00a      	b.n	8000caa <main+0x472>
 8000c94:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000c98:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	1c5a      	adds	r2, r3, #1
 8000ca0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000ca4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000cae:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000cb8:	d3ec      	bcc.n	8000c94 <main+0x45c>
 8000cba:	e66d      	b.n	8000998 <main+0x160>
	    	          // This loop consumes CPU cycles and creates a delay
	    	      }
	          } else if (button_counter == 4) {
 8000cbc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000cc0:	2b04      	cmp	r3, #4
 8000cc2:	d138      	bne.n	8000d36 <main+0x4fe>
	        	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cca:	483a      	ldr	r0, [pc, #232]	; (8000db4 <main+0x57c>)
 8000ccc:	f002 fc46 	bl	800355c <HAL_GPIO_WritePin>
	              // Saw waveform
	              sawG = saw[z];
 8000cd0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8000cda:	443b      	add	r3, r7
 8000cdc:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8000ce0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	              HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sawG);
 8000ce4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2100      	movs	r1, #0
 8000cec:	4832      	ldr	r0, [pc, #200]	; (8000db8 <main+0x580>)
 8000cee:	f002 f927 	bl	8002f40 <HAL_DAC_SetValue>
	              z = (z + 1) % 16;
 8000cf2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	f003 030f 	and.w	r3, r3, #15
 8000cfc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	    	      // Delay for a short period
	    	      for (volatile uint32_t k = 0; k < 400; k++) {
 8000d00:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000d04:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	e00a      	b.n	8000d24 <main+0x4ec>
 8000d0e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000d12:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	1c5a      	adds	r2, r3, #1
 8000d1a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000d1e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000d28:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000d32:	d3ec      	bcc.n	8000d0e <main+0x4d6>
 8000d34:	e630      	b.n	8000998 <main+0x160>
	    	          // This loop consumes CPU cycles and creates a delay
	    	      }
	          } else if (button_counter == 6) {
 8000d36:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000d3a:	2b06      	cmp	r3, #6
 8000d3c:	f47f ae2c 	bne.w	8000998 <main+0x160>
	        	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d46:	481b      	ldr	r0, [pc, #108]	; (8000db4 <main+0x57c>)
 8000d48:	f002 fc08 	bl	800355c <HAL_GPIO_WritePin>
	              // Sine waveform
	              sine = sineWave[z];
 8000d4c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000d50:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d54:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d5c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	              HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sine);
 8000d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d64:	2200      	movs	r2, #0
 8000d66:	2100      	movs	r1, #0
 8000d68:	4813      	ldr	r0, [pc, #76]	; (8000db8 <main+0x580>)
 8000d6a:	f002 f8e9 	bl	8002f40 <HAL_DAC_SetValue>
	              z = (z + 1) % 16;
 8000d6e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000d72:	3301      	adds	r3, #1
 8000d74:	f003 030f 	and.w	r3, r3, #15
 8000d78:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	    	      // Delay for a short period
	    	      for (volatile uint32_t k = 0; k < 400; k++) {
 8000d7c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000d80:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	e00a      	b.n	8000da0 <main+0x568>
 8000d8a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000d8e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	1c5a      	adds	r2, r3, #1
 8000d96:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000d9a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000da4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000dae:	d3ec      	bcc.n	8000d8a <main+0x552>
  {
 8000db0:	e5f2      	b.n	8000998 <main+0x160>
 8000db2:	bf00      	nop
 8000db4:	48000400 	.word	0x48000400
 8000db8:	200000f0 	.word	0x200000f0
 8000dbc:	20000028 	.word	0x20000028
 8000dc0:	1fff75aa 	.word	0x1fff75aa
 8000dc4:	453b8000 	.word	0x453b8000
 8000dc8:	2000008c 	.word	0x2000008c
 8000dcc:	1fff75ca 	.word	0x1fff75ca
 8000dd0:	1fff75a8 	.word	0x1fff75a8
 8000dd4:	42c80000 	.word	0x42c80000
 8000dd8:	44d48000 	.word	0x44d48000

08000ddc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b096      	sub	sp, #88	; 0x58
 8000de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	2244      	movs	r2, #68	; 0x44
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f003 fefc 	bl	8004be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df0:	463b      	mov	r3, r7
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000dfe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e02:	f002 fbd1 	bl	80035a8 <HAL_PWREx_ControlVoltageScaling>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e0c:	f000 f9d6 	bl	80011bc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e10:	2310      	movs	r3, #16
 8000e12:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e14:	2301      	movs	r3, #1
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e1c:	2360      	movs	r3, #96	; 0x60
 8000e1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e20:	2302      	movs	r3, #2
 8000e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e24:	2301      	movs	r3, #1
 8000e26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000e2c:	2328      	movs	r3, #40	; 0x28
 8000e2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e30:	2307      	movs	r3, #7
 8000e32:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e34:	2302      	movs	r3, #2
 8000e36:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4618      	mov	r0, r3
 8000e42:	f002 fc07 	bl	8003654 <HAL_RCC_OscConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000e4c:	f000 f9b6 	bl	80011bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e50:	230f      	movs	r3, #15
 8000e52:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e54:	2303      	movs	r3, #3
 8000e56:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e64:	463b      	mov	r3, r7
 8000e66:	2104      	movs	r1, #4
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f002 ffcf 	bl	8003e0c <HAL_RCC_ClockConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e74:	f000 f9a2 	bl	80011bc <Error_Handler>
  }
}
 8000e78:	bf00      	nop
 8000e7a:	3758      	adds	r7, #88	; 0x58
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b0a2      	sub	sp, #136	; 0x88
 8000e84:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e86:	463b      	mov	r3, r7
 8000e88:	2288      	movs	r2, #136	; 0x88
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f003 feab 	bl	8004be8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e96:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000ea6:	2318      	movs	r3, #24
 8000ea8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000eaa:	2307      	movs	r3, #7
 8000eac:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000eb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000eba:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f003 f990 	bl	80041e4 <HAL_RCCEx_PeriphCLKConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000eca:	f000 f977 	bl	80011bc <Error_Handler>
  }
}
 8000ece:	bf00      	nop
 8000ed0:	3788      	adds	r7, #136	; 0x88
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
 8000ef8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000efa:	4b2f      	ldr	r3, [pc, #188]	; (8000fb8 <MX_ADC1_Init+0xe0>)
 8000efc:	4a2f      	ldr	r2, [pc, #188]	; (8000fbc <MX_ADC1_Init+0xe4>)
 8000efe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f00:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f06:	4b2c      	ldr	r3, [pc, #176]	; (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f0c:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f12:	4b29      	ldr	r3, [pc, #164]	; (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f18:	4b27      	ldr	r3, [pc, #156]	; (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f1a:	2204      	movs	r2, #4
 8000f1c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f1e:	4b26      	ldr	r3, [pc, #152]	; (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f24:	4b24      	ldr	r3, [pc, #144]	; (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f2a:	4b23      	ldr	r3, [pc, #140]	; (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f30:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f38:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f3e:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f44:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f4c:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f52:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f5a:	4817      	ldr	r0, [pc, #92]	; (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f5c:	f000 fd0e 	bl	800197c <HAL_ADC_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000f66:	f000 f929 	bl	80011bc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	4619      	mov	r1, r3
 8000f74:	4810      	ldr	r0, [pc, #64]	; (8000fb8 <MX_ADC1_Init+0xe0>)
 8000f76:	f001 fddf 	bl	8002b38 <HAL_ADCEx_MultiModeConfigChannel>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f80:	f000 f91c 	bl	80011bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000f84:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f86:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f88:	2306      	movs	r3, #6
 8000f8a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000f8c:	2307      	movs	r3, #7
 8000f8e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f90:	237f      	movs	r3, #127	; 0x7f
 8000f92:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f94:	2304      	movs	r3, #4
 8000f96:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_ADC1_Init+0xe0>)
 8000fa2:	f001 f80f 	bl	8001fc4 <HAL_ADC_ConfigChannel>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000fac:	f000 f906 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	3728      	adds	r7, #40	; 0x28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000028 	.word	0x20000028
 8000fbc:	50040000 	.word	0x50040000
 8000fc0:	80000001 	.word	0x80000001

08000fc4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fca:	463b      	mov	r3, r7
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
 8000fd8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000fda:	4b29      	ldr	r3, [pc, #164]	; (8001080 <MX_ADC3_Init+0xbc>)
 8000fdc:	4a29      	ldr	r2, [pc, #164]	; (8001084 <MX_ADC3_Init+0xc0>)
 8000fde:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fe0:	4b27      	ldr	r3, [pc, #156]	; (8001080 <MX_ADC3_Init+0xbc>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000fe6:	4b26      	ldr	r3, [pc, #152]	; (8001080 <MX_ADC3_Init+0xbc>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fec:	4b24      	ldr	r3, [pc, #144]	; (8001080 <MX_ADC3_Init+0xbc>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ff2:	4b23      	ldr	r3, [pc, #140]	; (8001080 <MX_ADC3_Init+0xbc>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ff8:	4b21      	ldr	r3, [pc, #132]	; (8001080 <MX_ADC3_Init+0xbc>)
 8000ffa:	2204      	movs	r2, #4
 8000ffc:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000ffe:	4b20      	ldr	r3, [pc, #128]	; (8001080 <MX_ADC3_Init+0xbc>)
 8001000:	2200      	movs	r2, #0
 8001002:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001004:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <MX_ADC3_Init+0xbc>)
 8001006:	2200      	movs	r2, #0
 8001008:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800100a:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <MX_ADC3_Init+0xbc>)
 800100c:	2201      	movs	r2, #1
 800100e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001010:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <MX_ADC3_Init+0xbc>)
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001018:	4b19      	ldr	r3, [pc, #100]	; (8001080 <MX_ADC3_Init+0xbc>)
 800101a:	2200      	movs	r2, #0
 800101c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800101e:	4b18      	ldr	r3, [pc, #96]	; (8001080 <MX_ADC3_Init+0xbc>)
 8001020:	2200      	movs	r2, #0
 8001022:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001024:	4b16      	ldr	r3, [pc, #88]	; (8001080 <MX_ADC3_Init+0xbc>)
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800102c:	4b14      	ldr	r3, [pc, #80]	; (8001080 <MX_ADC3_Init+0xbc>)
 800102e:	2200      	movs	r2, #0
 8001030:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <MX_ADC3_Init+0xbc>)
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800103a:	4811      	ldr	r0, [pc, #68]	; (8001080 <MX_ADC3_Init+0xbc>)
 800103c:	f000 fc9e 	bl	800197c <HAL_ADC_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8001046:	f000 f8b9 	bl	80011bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_ADC3_Init+0xc4>)
 800104c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800104e:	2306      	movs	r3, #6
 8001050:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001052:	2307      	movs	r3, #7
 8001054:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001056:	237f      	movs	r3, #127	; 0x7f
 8001058:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800105a:	2304      	movs	r3, #4
 800105c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001062:	463b      	mov	r3, r7
 8001064:	4619      	mov	r1, r3
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <MX_ADC3_Init+0xbc>)
 8001068:	f000 ffac 	bl	8001fc4 <HAL_ADC_ConfigChannel>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001072:	f000 f8a3 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000008c 	.word	0x2000008c
 8001084:	50040200 	.word	0x50040200
 8001088:	c7520000 	.word	0xc7520000

0800108c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2224      	movs	r2, #36	; 0x24
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f003 fda5 	bl	8004be8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <MX_DAC1_Init+0x70>)
 80010a0:	4a17      	ldr	r2, [pc, #92]	; (8001100 <MX_DAC1_Init+0x74>)
 80010a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80010a4:	4815      	ldr	r0, [pc, #84]	; (80010fc <MX_DAC1_Init+0x70>)
 80010a6:	f001 fedc 	bl	8002e62 <HAL_DAC_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80010b0:	f000 f884 	bl	80011bc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2200      	movs	r2, #0
 80010cc:	4619      	mov	r1, r3
 80010ce:	480b      	ldr	r0, [pc, #44]	; (80010fc <MX_DAC1_Init+0x70>)
 80010d0:	f001 ff5b 	bl	8002f8a <HAL_DAC_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80010da:	f000 f86f 	bl	80011bc <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2210      	movs	r2, #16
 80010e2:	4619      	mov	r1, r3
 80010e4:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_DAC1_Init+0x70>)
 80010e6:	f001 ff50 	bl	8002f8a <HAL_DAC_ConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 80010f0:	f000 f864 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	3728      	adds	r7, #40	; 0x28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	200000f0 	.word	0x200000f0
 8001100:	40007400 	.word	0x40007400

08001104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111a:	4b25      	ldr	r3, [pc, #148]	; (80011b0 <MX_GPIO_Init+0xac>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	4a24      	ldr	r2, [pc, #144]	; (80011b0 <MX_GPIO_Init+0xac>)
 8001120:	f043 0304 	orr.w	r3, r3, #4
 8001124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001126:	4b22      	ldr	r3, [pc, #136]	; (80011b0 <MX_GPIO_Init+0xac>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <MX_GPIO_Init+0xac>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	4a1e      	ldr	r2, [pc, #120]	; (80011b0 <MX_GPIO_Init+0xac>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113e:	4b1c      	ldr	r3, [pc, #112]	; (80011b0 <MX_GPIO_Init+0xac>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <MX_GPIO_Init+0xac>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	4a18      	ldr	r2, [pc, #96]	; (80011b0 <MX_GPIO_Init+0xac>)
 8001150:	f043 0302 	orr.w	r3, r3, #2
 8001154:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <MX_GPIO_Init+0xac>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001168:	4812      	ldr	r0, [pc, #72]	; (80011b4 <MX_GPIO_Init+0xb0>)
 800116a:	f002 f9f7 	bl	800355c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PushButton_Pin */
  GPIO_InitStruct.Pin = PushButton_Pin;
 800116e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001172:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001174:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001178:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PushButton_GPIO_Port, &GPIO_InitStruct);
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	4619      	mov	r1, r3
 8001184:	480c      	ldr	r0, [pc, #48]	; (80011b8 <MX_GPIO_Init+0xb4>)
 8001186:	f002 f827 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800118a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800118e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001190:	2301      	movs	r3, #1
 8001192:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	4619      	mov	r1, r3
 80011a2:	4804      	ldr	r0, [pc, #16]	; (80011b4 <MX_GPIO_Init+0xb0>)
 80011a4:	f002 f818 	bl	80031d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011a8:	bf00      	nop
 80011aa:	3720      	adds	r7, #32
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40021000 	.word	0x40021000
 80011b4:	48000400 	.word	0x48000400
 80011b8:	48000800 	.word	0x48000800

080011bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c0:	b672      	cpsid	i
}
 80011c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <Error_Handler+0x8>
	...

080011c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_MspInit+0x44>)
 80011d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d2:	4a0e      	ldr	r2, [pc, #56]	; (800120c <HAL_MspInit+0x44>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6613      	str	r3, [r2, #96]	; 0x60
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <HAL_MspInit+0x44>)
 80011dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_MspInit+0x44>)
 80011e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ea:	4a08      	ldr	r2, [pc, #32]	; (800120c <HAL_MspInit+0x44>)
 80011ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f0:	6593      	str	r3, [r2, #88]	; 0x58
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_MspInit+0x44>)
 80011f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000

08001210 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a1c      	ldr	r2, [pc, #112]	; (8001290 <HAL_ADC_MspInit+0x80>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d115      	bne.n	800124e <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001222:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <HAL_ADC_MspInit+0x84>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	3301      	adds	r3, #1
 8001228:	4a1a      	ldr	r2, [pc, #104]	; (8001294 <HAL_ADC_MspInit+0x84>)
 800122a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_ADC_MspInit+0x84>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d126      	bne.n	8001282 <HAL_ADC_MspInit+0x72>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001234:	4b18      	ldr	r3, [pc, #96]	; (8001298 <HAL_ADC_MspInit+0x88>)
 8001236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001238:	4a17      	ldr	r2, [pc, #92]	; (8001298 <HAL_ADC_MspInit+0x88>)
 800123a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800123e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <HAL_ADC_MspInit+0x88>)
 8001242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001244:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800124c:	e019      	b.n	8001282 <HAL_ADC_MspInit+0x72>
  else if(hadc->Instance==ADC3)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a12      	ldr	r2, [pc, #72]	; (800129c <HAL_ADC_MspInit+0x8c>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d114      	bne.n	8001282 <HAL_ADC_MspInit+0x72>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <HAL_ADC_MspInit+0x84>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	3301      	adds	r3, #1
 800125e:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <HAL_ADC_MspInit+0x84>)
 8001260:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <HAL_ADC_MspInit+0x84>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d10b      	bne.n	8001282 <HAL_ADC_MspInit+0x72>
      __HAL_RCC_ADC_CLK_ENABLE();
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <HAL_ADC_MspInit+0x88>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <HAL_ADC_MspInit+0x88>)
 8001270:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001274:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <HAL_ADC_MspInit+0x88>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
}
 8001282:	bf00      	nop
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	50040000 	.word	0x50040000
 8001294:	20000104 	.word	0x20000104
 8001298:	40021000 	.word	0x40021000
 800129c:	50040200 	.word	0x50040200

080012a0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a15      	ldr	r2, [pc, #84]	; (8001314 <HAL_DAC_MspInit+0x74>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d124      	bne.n	800130c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <HAL_DAC_MspInit+0x78>)
 80012c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c6:	4a14      	ldr	r2, [pc, #80]	; (8001318 <HAL_DAC_MspInit+0x78>)
 80012c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012cc:	6593      	str	r3, [r2, #88]	; 0x58
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_DAC_MspInit+0x78>)
 80012d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <HAL_DAC_MspInit+0x78>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012de:	4a0e      	ldr	r2, [pc, #56]	; (8001318 <HAL_DAC_MspInit+0x78>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <HAL_DAC_MspInit+0x78>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80012f2:	2330      	movs	r3, #48	; 0x30
 80012f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f6:	2303      	movs	r3, #3
 80012f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001308:	f001 ff66 	bl	80031d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800130c:	bf00      	nop
 800130e:	3728      	adds	r7, #40	; 0x28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40007400 	.word	0x40007400
 8001318:	40021000 	.word	0x40021000

0800131c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <NMI_Handler+0x4>

08001322 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <HardFault_Handler+0x4>

08001328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800132c:	e7fe      	b.n	800132c <MemManage_Handler+0x4>

0800132e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001332:	e7fe      	b.n	8001332 <BusFault_Handler+0x4>

08001334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <UsageFault_Handler+0x4>

0800133a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001368:	f000 f892 	bl	8001490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}

08001370 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <SystemInit+0x20>)
 8001376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800137a:	4a05      	ldr	r2, [pc, #20]	; (8001390 <SystemInit+0x20>)
 800137c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001394:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001398:	f7ff ffea 	bl	8001370 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800139c:	480c      	ldr	r0, [pc, #48]	; (80013d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800139e:	490d      	ldr	r1, [pc, #52]	; (80013d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013a0:	4a0d      	ldr	r2, [pc, #52]	; (80013d8 <LoopForever+0xe>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a4:	e002      	b.n	80013ac <LoopCopyDataInit>

080013a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013aa:	3304      	adds	r3, #4

080013ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b0:	d3f9      	bcc.n	80013a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b2:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80013b4:	4c0a      	ldr	r4, [pc, #40]	; (80013e0 <LoopForever+0x16>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b8:	e001      	b.n	80013be <LoopFillZerobss>

080013ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013bc:	3204      	adds	r2, #4

080013be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c0:	d3fb      	bcc.n	80013ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013c2:	f003 fc19 	bl	8004bf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013c6:	f7ff fa37 	bl	8000838 <main>

080013ca <LoopForever>:

LoopForever:
    b LoopForever
 80013ca:	e7fe      	b.n	80013ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013cc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013d8:	080054ec 	.word	0x080054ec
  ldr r2, =_sbss
 80013dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013e0:	2000010c 	.word	0x2000010c

080013e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013e4:	e7fe      	b.n	80013e4 <ADC1_2_IRQHandler>

080013e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f0:	2003      	movs	r0, #3
 80013f2:	f001 fd03 	bl	8002dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013f6:	2000      	movs	r0, #0
 80013f8:	f000 f80e 	bl	8001418 <HAL_InitTick>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d002      	beq.n	8001408 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	71fb      	strb	r3, [r7, #7]
 8001406:	e001      	b.n	800140c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001408:	f7ff fede 	bl	80011c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800140c:	79fb      	ldrb	r3, [r7, #7]
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001420:	2300      	movs	r3, #0
 8001422:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001424:	4b17      	ldr	r3, [pc, #92]	; (8001484 <HAL_InitTick+0x6c>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d023      	beq.n	8001474 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800142c:	4b16      	ldr	r3, [pc, #88]	; (8001488 <HAL_InitTick+0x70>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b14      	ldr	r3, [pc, #80]	; (8001484 <HAL_InitTick+0x6c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	4619      	mov	r1, r3
 8001436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143a:	fbb3 f3f1 	udiv	r3, r3, r1
 800143e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001442:	4618      	mov	r0, r3
 8001444:	f001 fd01 	bl	8002e4a <HAL_SYSTICK_Config>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10f      	bne.n	800146e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2b0f      	cmp	r3, #15
 8001452:	d809      	bhi.n	8001468 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001454:	2200      	movs	r2, #0
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	f04f 30ff 	mov.w	r0, #4294967295
 800145c:	f001 fcd9 	bl	8002e12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001460:	4a0a      	ldr	r2, [pc, #40]	; (800148c <HAL_InitTick+0x74>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e007      	b.n	8001478 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	73fb      	strb	r3, [r7, #15]
 800146c:	e004      	b.n	8001478 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	73fb      	strb	r3, [r7, #15]
 8001472:	e001      	b.n	8001478 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001478:	7bfb      	ldrb	r3, [r7, #15]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000008 	.word	0x20000008
 8001488:	20000000 	.word	0x20000000
 800148c:	20000004 	.word	0x20000004

08001490 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_IncTick+0x20>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_IncTick+0x24>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4413      	add	r3, r2
 80014a0:	4a04      	ldr	r2, [pc, #16]	; (80014b4 <HAL_IncTick+0x24>)
 80014a2:	6013      	str	r3, [r2, #0]
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20000008 	.word	0x20000008
 80014b4:	20000108 	.word	0x20000108

080014b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return uwTick;
 80014bc:	4b03      	ldr	r3, [pc, #12]	; (80014cc <HAL_GetTick+0x14>)
 80014be:	681b      	ldr	r3, [r3, #0]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000108 	.word	0x20000108

080014d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014d8:	f7ff ffee 	bl	80014b8 <HAL_GetTick>
 80014dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e8:	d005      	beq.n	80014f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_Delay+0x44>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4413      	add	r3, r2
 80014f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014f6:	bf00      	nop
 80014f8:	f7ff ffde 	bl	80014b8 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	429a      	cmp	r2, r3
 8001506:	d8f7      	bhi.n	80014f8 <HAL_Delay+0x28>
  {
  }
}
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000008 	.word	0x20000008

08001518 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	431a      	orrs	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	609a      	str	r2, [r3, #8]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	431a      	orrs	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	609a      	str	r2, [r3, #8]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001580:	b480      	push	{r7}
 8001582:	b087      	sub	sp, #28
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
 800158c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	3360      	adds	r3, #96	; 0x60
 8001592:	461a      	mov	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <LL_ADC_SetOffset+0x44>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	4313      	orrs	r3, r2
 80015b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80015b8:	bf00      	nop
 80015ba:	371c      	adds	r7, #28
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	03fff000 	.word	0x03fff000

080015c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3360      	adds	r3, #96	; 0x60
 80015d6:	461a      	mov	r2, r3
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	3360      	adds	r3, #96	; 0x60
 8001604:	461a      	mov	r2, r3
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	431a      	orrs	r2, r3
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800161e:	bf00      	nop
 8001620:	371c      	adds	r7, #28
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800163e:	2301      	movs	r3, #1
 8001640:	e000      	b.n	8001644 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001650:	b480      	push	{r7}
 8001652:	b087      	sub	sp, #28
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3330      	adds	r3, #48	; 0x30
 8001660:	461a      	mov	r2, r3
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	0a1b      	lsrs	r3, r3, #8
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	f003 030c 	and.w	r3, r3, #12
 800166c:	4413      	add	r3, r2
 800166e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	f003 031f 	and.w	r3, r3, #31
 800167a:	211f      	movs	r1, #31
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	401a      	ands	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	0e9b      	lsrs	r3, r3, #26
 8001688:	f003 011f 	and.w	r1, r3, #31
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	f003 031f 	and.w	r3, r3, #31
 8001692:	fa01 f303 	lsl.w	r3, r1, r3
 8001696:	431a      	orrs	r2, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800169c:	bf00      	nop
 800169e:	371c      	adds	r7, #28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b087      	sub	sp, #28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	3314      	adds	r3, #20
 80016b8:	461a      	mov	r2, r3
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	0e5b      	lsrs	r3, r3, #25
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	4413      	add	r3, r2
 80016c6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	0d1b      	lsrs	r3, r3, #20
 80016d0:	f003 031f 	and.w	r3, r3, #31
 80016d4:	2107      	movs	r1, #7
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	401a      	ands	r2, r3
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	0d1b      	lsrs	r3, r3, #20
 80016e2:	f003 031f 	and.w	r3, r3, #31
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ec:	431a      	orrs	r2, r3
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016f2:	bf00      	nop
 80016f4:	371c      	adds	r7, #28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001718:	43db      	mvns	r3, r3
 800171a:	401a      	ands	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f003 0318 	and.w	r3, r3, #24
 8001722:	4908      	ldr	r1, [pc, #32]	; (8001744 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001724:	40d9      	lsrs	r1, r3
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	400b      	ands	r3, r1
 800172a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800172e:	431a      	orrs	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001736:	bf00      	nop
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	0007ffff 	.word	0x0007ffff

08001748 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 031f 	and.w	r3, r3, #31
}
 8001758:	4618      	mov	r0, r3
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001774:	4618      	mov	r0, r3
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001790:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6093      	str	r3, [r2, #8]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017b8:	d101      	bne.n	80017be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80017dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001804:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001808:	d101      	bne.n	800180e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800182c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001830:	f043 0201 	orr.w	r2, r3, #1
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001854:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001858:	f043 0202 	orr.w	r2, r3, #2
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	2b01      	cmp	r3, #1
 800187e:	d101      	bne.n	8001884 <LL_ADC_IsEnabled+0x18>
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <LL_ADC_IsEnabled+0x1a>
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d101      	bne.n	80018aa <LL_ADC_IsDisableOngoing+0x18>
 80018a6:	2301      	movs	r3, #1
 80018a8:	e000      	b.n	80018ac <LL_ADC_IsDisableOngoing+0x1a>
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018cc:	f043 0204 	orr.w	r2, r3, #4
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018f4:	f043 0210 	orr.w	r2, r3, #16
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b04      	cmp	r3, #4
 800191a:	d101      	bne.n	8001920 <LL_ADC_REG_IsConversionOngoing+0x18>
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800193e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001942:	f043 0220 	orr.w	r2, r3, #32
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	2b08      	cmp	r3, #8
 8001968:	d101      	bne.n	800196e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800197c:	b590      	push	{r4, r7, lr}
 800197e:	b089      	sub	sp, #36	; 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001984:	2300      	movs	r3, #0
 8001986:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e130      	b.n	8001bf8 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d109      	bne.n	80019b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff fc33 	bl	8001210 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff fef1 	bl	80017a4 <LL_ADC_IsDeepPowerDownEnabled>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d004      	beq.n	80019d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fed7 	bl	8001780 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff ff0c 	bl	80017f4 <LL_ADC_IsInternalRegulatorEnabled>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d115      	bne.n	8001a0e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fef0 	bl	80017cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019ec:	4b84      	ldr	r3, [pc, #528]	; (8001c00 <HAL_ADC_Init+0x284>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	099b      	lsrs	r3, r3, #6
 80019f2:	4a84      	ldr	r2, [pc, #528]	; (8001c04 <HAL_ADC_Init+0x288>)
 80019f4:	fba2 2303 	umull	r2, r3, r2, r3
 80019f8:	099b      	lsrs	r3, r3, #6
 80019fa:	3301      	adds	r3, #1
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a00:	e002      	b.n	8001a08 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f9      	bne.n	8001a02 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff feee 	bl	80017f4 <LL_ADC_IsInternalRegulatorEnabled>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10d      	bne.n	8001a3a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a22:	f043 0210 	orr.w	r2, r3, #16
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2e:	f043 0201 	orr.w	r2, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff ff62 	bl	8001908 <LL_ADC_REG_IsConversionOngoing>
 8001a44:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4a:	f003 0310 	and.w	r3, r3, #16
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f040 80c9 	bne.w	8001be6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f040 80c5 	bne.w	8001be6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a60:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a64:	f043 0202 	orr.w	r2, r3, #2
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fefb 	bl	800186c <LL_ADC_IsEnabled>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d115      	bne.n	8001aa8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a7c:	4862      	ldr	r0, [pc, #392]	; (8001c08 <HAL_ADC_Init+0x28c>)
 8001a7e:	f7ff fef5 	bl	800186c <LL_ADC_IsEnabled>
 8001a82:	4604      	mov	r4, r0
 8001a84:	4861      	ldr	r0, [pc, #388]	; (8001c0c <HAL_ADC_Init+0x290>)
 8001a86:	f7ff fef1 	bl	800186c <LL_ADC_IsEnabled>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	431c      	orrs	r4, r3
 8001a8e:	4860      	ldr	r0, [pc, #384]	; (8001c10 <HAL_ADC_Init+0x294>)
 8001a90:	f7ff feec 	bl	800186c <LL_ADC_IsEnabled>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4323      	orrs	r3, r4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d105      	bne.n	8001aa8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	485c      	ldr	r0, [pc, #368]	; (8001c14 <HAL_ADC_Init+0x298>)
 8001aa4:	f7ff fd38 	bl	8001518 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	7e5b      	ldrb	r3, [r3, #25]
 8001aac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ab2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001ab8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001abe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d106      	bne.n	8001ae4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	3b01      	subs	r3, #1
 8001adc:	045b      	lsls	r3, r3, #17
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d009      	beq.n	8001b00 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	4b44      	ldr	r3, [pc, #272]	; (8001c18 <HAL_ADC_Init+0x29c>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6812      	ldr	r2, [r2, #0]
 8001b0e:	69b9      	ldr	r1, [r7, #24]
 8001b10:	430b      	orrs	r3, r1
 8001b12:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff1c 	bl	8001956 <LL_ADC_INJ_IsConversionOngoing>
 8001b1e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d13d      	bne.n	8001ba2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d13a      	bne.n	8001ba2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b30:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b38:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b48:	f023 0302 	bic.w	r3, r3, #2
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	69b9      	ldr	r1, [r7, #24]
 8001b52:	430b      	orrs	r3, r1
 8001b54:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d118      	bne.n	8001b92 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001b6a:	f023 0304 	bic.w	r3, r3, #4
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b76:	4311      	orrs	r1, r2
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b7c:	4311      	orrs	r1, r2
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b82:	430a      	orrs	r2, r1
 8001b84:	431a      	orrs	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0201 	orr.w	r2, r2, #1
 8001b8e:	611a      	str	r2, [r3, #16]
 8001b90:	e007      	b.n	8001ba2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 0201 	bic.w	r2, r2, #1
 8001ba0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	f023 010f 	bic.w	r1, r3, #15
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	1e5a      	subs	r2, r3, #1
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	631a      	str	r2, [r3, #48]	; 0x30
 8001bc2:	e007      	b.n	8001bd4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 020f 	bic.w	r2, r2, #15
 8001bd2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd8:	f023 0303 	bic.w	r3, r3, #3
 8001bdc:	f043 0201 	orr.w	r2, r3, #1
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	655a      	str	r2, [r3, #84]	; 0x54
 8001be4:	e007      	b.n	8001bf6 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bea:	f043 0210 	orr.w	r2, r3, #16
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bf6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3724      	adds	r7, #36	; 0x24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd90      	pop	{r4, r7, pc}
 8001c00:	20000000 	.word	0x20000000
 8001c04:	053e2d63 	.word	0x053e2d63
 8001c08:	50040000 	.word	0x50040000
 8001c0c:	50040100 	.word	0x50040100
 8001c10:	50040200 	.word	0x50040200
 8001c14:	50040300 	.word	0x50040300
 8001c18:	fff0c007 	.word	0xfff0c007

08001c1c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c24:	4857      	ldr	r0, [pc, #348]	; (8001d84 <HAL_ADC_Start+0x168>)
 8001c26:	f7ff fd8f 	bl	8001748 <LL_ADC_GetMultimode>
 8001c2a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fe69 	bl	8001908 <LL_ADC_REG_IsConversionOngoing>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f040 809c 	bne.w	8001d76 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <HAL_ADC_Start+0x30>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e097      	b.n	8001d7c <HAL_ADC_Start+0x160>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 fe63 	bl	8002920 <ADC_Enable>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c5e:	7dfb      	ldrb	r3, [r7, #23]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f040 8083 	bne.w	8001d6c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c6e:	f023 0301 	bic.w	r3, r3, #1
 8001c72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a42      	ldr	r2, [pc, #264]	; (8001d88 <HAL_ADC_Start+0x16c>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d002      	beq.n	8001c8a <HAL_ADC_Start+0x6e>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	e000      	b.n	8001c8c <HAL_ADC_Start+0x70>
 8001c8a:	4b40      	ldr	r3, [pc, #256]	; (8001d8c <HAL_ADC_Start+0x170>)
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d002      	beq.n	8001c9a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d105      	bne.n	8001ca6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001caa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cb2:	d106      	bne.n	8001cc2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb8:	f023 0206 	bic.w	r2, r3, #6
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	659a      	str	r2, [r3, #88]	; 0x58
 8001cc0:	e002      	b.n	8001cc8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	221c      	movs	r2, #28
 8001cce:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a2a      	ldr	r2, [pc, #168]	; (8001d88 <HAL_ADC_Start+0x16c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d002      	beq.n	8001ce8 <HAL_ADC_Start+0xcc>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	e000      	b.n	8001cea <HAL_ADC_Start+0xce>
 8001ce8:	4b28      	ldr	r3, [pc, #160]	; (8001d8c <HAL_ADC_Start+0x170>)
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d008      	beq.n	8001d04 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d005      	beq.n	8001d04 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	2b05      	cmp	r3, #5
 8001cfc:	d002      	beq.n	8001d04 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	2b09      	cmp	r3, #9
 8001d02:	d114      	bne.n	8001d2e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d007      	beq.n	8001d22 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fdc6 	bl	80018b8 <LL_ADC_REG_StartConversion>
 8001d2c:	e025      	b.n	8001d7a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a12      	ldr	r2, [pc, #72]	; (8001d88 <HAL_ADC_Start+0x16c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d002      	beq.n	8001d4a <HAL_ADC_Start+0x12e>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	e000      	b.n	8001d4c <HAL_ADC_Start+0x130>
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <HAL_ADC_Start+0x170>)
 8001d4c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00f      	beq.n	8001d7a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d62:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	655a      	str	r2, [r3, #84]	; 0x54
 8001d6a:	e006      	b.n	8001d7a <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001d74:	e001      	b.n	8001d7a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d76:	2302      	movs	r3, #2
 8001d78:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	50040300 	.word	0x50040300
 8001d88:	50040100 	.word	0x50040100
 8001d8c:	50040000 	.word	0x50040000

08001d90 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d101      	bne.n	8001da6 <HAL_ADC_Stop+0x16>
 8001da2:	2302      	movs	r3, #2
 8001da4:	e023      	b.n	8001dee <HAL_ADC_Stop+0x5e>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001dae:	2103      	movs	r1, #3
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 fcf9 	bl	80027a8 <ADC_ConversionStop>
 8001db6:	4603      	mov	r3, r0
 8001db8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d111      	bne.n	8001de4 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 fe33 	bl	8002a2c <ADC_Disable>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d109      	bne.n	8001de4 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001dd8:	f023 0301 	bic.w	r3, r3, #1
 8001ddc:	f043 0201 	orr.w	r2, r3, #1
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e02:	4866      	ldr	r0, [pc, #408]	; (8001f9c <HAL_ADC_PollForConversion+0x1a4>)
 8001e04:	f7ff fca0 	bl	8001748 <LL_ADC_GetMultimode>
 8001e08:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d102      	bne.n	8001e18 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001e12:	2308      	movs	r3, #8
 8001e14:	61fb      	str	r3, [r7, #28]
 8001e16:	e02a      	b.n	8001e6e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d005      	beq.n	8001e2a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	2b05      	cmp	r3, #5
 8001e22:	d002      	beq.n	8001e2a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	2b09      	cmp	r3, #9
 8001e28:	d111      	bne.n	8001e4e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d007      	beq.n	8001e48 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3c:	f043 0220 	orr.w	r2, r3, #32
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0a4      	b.n	8001f92 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001e48:	2304      	movs	r3, #4
 8001e4a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001e4c:	e00f      	b.n	8001e6e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001e4e:	4853      	ldr	r0, [pc, #332]	; (8001f9c <HAL_ADC_PollForConversion+0x1a4>)
 8001e50:	f7ff fc88 	bl	8001764 <LL_ADC_GetMultiDMATransfer>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d007      	beq.n	8001e6a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5e:	f043 0220 	orr.w	r2, r3, #32
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e093      	b.n	8001f92 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e6e:	f7ff fb23 	bl	80014b8 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e74:	e021      	b.n	8001eba <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7c:	d01d      	beq.n	8001eba <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001e7e:	f7ff fb1b 	bl	80014b8 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d302      	bcc.n	8001e94 <HAL_ADC_PollForConversion+0x9c>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d112      	bne.n	8001eba <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10b      	bne.n	8001eba <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea6:	f043 0204 	orr.w	r2, r3, #4
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e06b      	b.n	8001f92 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0d6      	beq.n	8001e76 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ecc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fba6 	bl	800162a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d01c      	beq.n	8001f1e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	7e5b      	ldrb	r3, [r3, #25]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d118      	bne.n	8001f1e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d111      	bne.n	8001f1e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d105      	bne.n	8001f1e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f16:	f043 0201 	orr.w	r2, r3, #1
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a1f      	ldr	r2, [pc, #124]	; (8001fa0 <HAL_ADC_PollForConversion+0x1a8>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d002      	beq.n	8001f2e <HAL_ADC_PollForConversion+0x136>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	e000      	b.n	8001f30 <HAL_ADC_PollForConversion+0x138>
 8001f2e:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <HAL_ADC_PollForConversion+0x1ac>)
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d008      	beq.n	8001f4a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d005      	beq.n	8001f4a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	2b05      	cmp	r3, #5
 8001f42:	d002      	beq.n	8001f4a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	2b09      	cmp	r3, #9
 8001f48:	d104      	bne.n	8001f54 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	61bb      	str	r3, [r7, #24]
 8001f52:	e00c      	b.n	8001f6e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a11      	ldr	r2, [pc, #68]	; (8001fa0 <HAL_ADC_PollForConversion+0x1a8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d002      	beq.n	8001f64 <HAL_ADC_PollForConversion+0x16c>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	e000      	b.n	8001f66 <HAL_ADC_PollForConversion+0x16e>
 8001f64:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <HAL_ADC_PollForConversion+0x1ac>)
 8001f66:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d104      	bne.n	8001f7e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2208      	movs	r2, #8
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	e008      	b.n	8001f90 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d103      	bne.n	8001f90 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	220c      	movs	r2, #12
 8001f8e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3720      	adds	r7, #32
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	50040300 	.word	0x50040300
 8001fa0:	50040100 	.word	0x50040100
 8001fa4:	50040000 	.word	0x50040000

08001fa8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b0b6      	sub	sp, #216	; 0xd8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x22>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e3c9      	b.n	800277a <HAL_ADC_ConfigChannel+0x7b6>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fc88 	bl	8001908 <LL_ADC_REG_IsConversionOngoing>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f040 83aa 	bne.w	8002754 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b05      	cmp	r3, #5
 800200e:	d824      	bhi.n	800205a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	3b02      	subs	r3, #2
 8002016:	2b03      	cmp	r3, #3
 8002018:	d81b      	bhi.n	8002052 <HAL_ADC_ConfigChannel+0x8e>
 800201a:	a201      	add	r2, pc, #4	; (adr r2, 8002020 <HAL_ADC_ConfigChannel+0x5c>)
 800201c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002020:	08002031 	.word	0x08002031
 8002024:	08002039 	.word	0x08002039
 8002028:	08002041 	.word	0x08002041
 800202c:	08002049 	.word	0x08002049
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002030:	230c      	movs	r3, #12
 8002032:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002036:	e010      	b.n	800205a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002038:	2312      	movs	r3, #18
 800203a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800203e:	e00c      	b.n	800205a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002040:	2318      	movs	r3, #24
 8002042:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002046:	e008      	b.n	800205a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002048:	f44f 7380 	mov.w	r3, #256	; 0x100
 800204c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002050:	e003      	b.n	800205a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002052:	2306      	movs	r3, #6
 8002054:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002058:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6818      	ldr	r0, [r3, #0]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	461a      	mov	r2, r3
 8002064:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002068:	f7ff faf2 	bl	8001650 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff fc49 	bl	8001908 <LL_ADC_REG_IsConversionOngoing>
 8002076:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff fc69 	bl	8001956 <LL_ADC_INJ_IsConversionOngoing>
 8002084:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002088:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800208c:	2b00      	cmp	r3, #0
 800208e:	f040 81a4 	bne.w	80023da <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002092:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002096:	2b00      	cmp	r3, #0
 8002098:	f040 819f 	bne.w	80023da <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6818      	ldr	r0, [r3, #0]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	6819      	ldr	r1, [r3, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	461a      	mov	r2, r3
 80020aa:	f7ff fafd 	bl	80016a8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	695a      	ldr	r2, [r3, #20]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	08db      	lsrs	r3, r3, #3
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d00a      	beq.n	80020e6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	6919      	ldr	r1, [r3, #16]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020e0:	f7ff fa4e 	bl	8001580 <LL_ADC_SetOffset>
 80020e4:	e179      	b.n	80023da <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2100      	movs	r1, #0
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fa6b 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 80020f2:	4603      	mov	r3, r0
 80020f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10a      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x14e>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2100      	movs	r1, #0
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff fa60 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 8002108:	4603      	mov	r3, r0
 800210a:	0e9b      	lsrs	r3, r3, #26
 800210c:	f003 021f 	and.w	r2, r3, #31
 8002110:	e01e      	b.n	8002150 <HAL_ADC_ConfigChannel+0x18c>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2100      	movs	r1, #0
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fa55 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 800211e:	4603      	mov	r3, r0
 8002120:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002124:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002128:	fa93 f3a3 	rbit	r3, r3
 800212c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002130:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002134:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002138:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002140:	2320      	movs	r3, #32
 8002142:	e004      	b.n	800214e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002144:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002148:	fab3 f383 	clz	r3, r3
 800214c:	b2db      	uxtb	r3, r3
 800214e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002158:	2b00      	cmp	r3, #0
 800215a:	d105      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x1a4>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	0e9b      	lsrs	r3, r3, #26
 8002162:	f003 031f 	and.w	r3, r3, #31
 8002166:	e018      	b.n	800219a <HAL_ADC_ConfigChannel+0x1d6>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002174:	fa93 f3a3 	rbit	r3, r3
 8002178:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800217c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002180:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002184:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800218c:	2320      	movs	r3, #32
 800218e:	e004      	b.n	800219a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002190:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002194:	fab3 f383 	clz	r3, r3
 8002198:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800219a:	429a      	cmp	r2, r3
 800219c:	d106      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2200      	movs	r2, #0
 80021a4:	2100      	movs	r1, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fa24 	bl	80015f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2101      	movs	r1, #1
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff fa08 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10a      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x214>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2101      	movs	r1, #1
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff f9fd 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 80021ce:	4603      	mov	r3, r0
 80021d0:	0e9b      	lsrs	r3, r3, #26
 80021d2:	f003 021f 	and.w	r2, r3, #31
 80021d6:	e01e      	b.n	8002216 <HAL_ADC_ConfigChannel+0x252>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2101      	movs	r1, #1
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff f9f2 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021ee:	fa93 f3a3 	rbit	r3, r3
 80021f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80021f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80021fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002206:	2320      	movs	r3, #32
 8002208:	e004      	b.n	8002214 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800220a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800220e:	fab3 f383 	clz	r3, r3
 8002212:	b2db      	uxtb	r3, r3
 8002214:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800221e:	2b00      	cmp	r3, #0
 8002220:	d105      	bne.n	800222e <HAL_ADC_ConfigChannel+0x26a>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	0e9b      	lsrs	r3, r3, #26
 8002228:	f003 031f 	and.w	r3, r3, #31
 800222c:	e018      	b.n	8002260 <HAL_ADC_ConfigChannel+0x29c>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800223a:	fa93 f3a3 	rbit	r3, r3
 800223e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002242:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002246:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800224a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002252:	2320      	movs	r3, #32
 8002254:	e004      	b.n	8002260 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002256:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800225a:	fab3 f383 	clz	r3, r3
 800225e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002260:	429a      	cmp	r2, r3
 8002262:	d106      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2200      	movs	r2, #0
 800226a:	2101      	movs	r1, #1
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff f9c1 	bl	80015f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2102      	movs	r1, #2
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff f9a5 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 800227e:	4603      	mov	r3, r0
 8002280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10a      	bne.n	800229e <HAL_ADC_ConfigChannel+0x2da>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2102      	movs	r1, #2
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff f99a 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 8002294:	4603      	mov	r3, r0
 8002296:	0e9b      	lsrs	r3, r3, #26
 8002298:	f003 021f 	and.w	r2, r3, #31
 800229c:	e01e      	b.n	80022dc <HAL_ADC_ConfigChannel+0x318>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2102      	movs	r1, #2
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff f98f 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 80022aa:	4603      	mov	r3, r0
 80022ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022b4:	fa93 f3a3 	rbit	r3, r3
 80022b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80022bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80022c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80022cc:	2320      	movs	r3, #32
 80022ce:	e004      	b.n	80022da <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80022d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022d4:	fab3 f383 	clz	r3, r3
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d105      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x330>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	0e9b      	lsrs	r3, r3, #26
 80022ee:	f003 031f 	and.w	r3, r3, #31
 80022f2:	e014      	b.n	800231e <HAL_ADC_ConfigChannel+0x35a>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022fc:	fa93 f3a3 	rbit	r3, r3
 8002300:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002302:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002304:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002308:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002310:	2320      	movs	r3, #32
 8002312:	e004      	b.n	800231e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002314:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002318:	fab3 f383 	clz	r3, r3
 800231c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800231e:	429a      	cmp	r2, r3
 8002320:	d106      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2200      	movs	r2, #0
 8002328:	2102      	movs	r1, #2
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff f962 	bl	80015f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2103      	movs	r1, #3
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff f946 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 800233c:	4603      	mov	r3, r0
 800233e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10a      	bne.n	800235c <HAL_ADC_ConfigChannel+0x398>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2103      	movs	r1, #3
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff f93b 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 8002352:	4603      	mov	r3, r0
 8002354:	0e9b      	lsrs	r3, r3, #26
 8002356:	f003 021f 	and.w	r2, r3, #31
 800235a:	e017      	b.n	800238c <HAL_ADC_ConfigChannel+0x3c8>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2103      	movs	r1, #3
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff f930 	bl	80015c8 <LL_ADC_GetOffsetChannel>
 8002368:	4603      	mov	r3, r0
 800236a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002376:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002378:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800237e:	2320      	movs	r3, #32
 8002380:	e003      	b.n	800238a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002382:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002384:	fab3 f383 	clz	r3, r3
 8002388:	b2db      	uxtb	r3, r3
 800238a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002394:	2b00      	cmp	r3, #0
 8002396:	d105      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x3e0>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	0e9b      	lsrs	r3, r3, #26
 800239e:	f003 031f 	and.w	r3, r3, #31
 80023a2:	e011      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x404>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023ac:	fa93 f3a3 	rbit	r3, r3
 80023b0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80023b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023b4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80023b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80023bc:	2320      	movs	r3, #32
 80023be:	e003      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80023c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023c2:	fab3 f383 	clz	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d106      	bne.n	80023da <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2200      	movs	r2, #0
 80023d2:	2103      	movs	r1, #3
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff f90d 	bl	80015f4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fa44 	bl	800186c <LL_ADC_IsEnabled>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f040 8140 	bne.w	800266c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6818      	ldr	r0, [r3, #0]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	6819      	ldr	r1, [r3, #0]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	461a      	mov	r2, r3
 80023fa:	f7ff f981 	bl	8001700 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	4a8f      	ldr	r2, [pc, #572]	; (8002640 <HAL_ADC_ConfigChannel+0x67c>)
 8002404:	4293      	cmp	r3, r2
 8002406:	f040 8131 	bne.w	800266c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10b      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x46e>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	0e9b      	lsrs	r3, r3, #26
 8002420:	3301      	adds	r3, #1
 8002422:	f003 031f 	and.w	r3, r3, #31
 8002426:	2b09      	cmp	r3, #9
 8002428:	bf94      	ite	ls
 800242a:	2301      	movls	r3, #1
 800242c:	2300      	movhi	r3, #0
 800242e:	b2db      	uxtb	r3, r3
 8002430:	e019      	b.n	8002466 <HAL_ADC_ConfigChannel+0x4a2>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800243a:	fa93 f3a3 	rbit	r3, r3
 800243e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002442:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800244a:	2320      	movs	r3, #32
 800244c:	e003      	b.n	8002456 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800244e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002450:	fab3 f383 	clz	r3, r3
 8002454:	b2db      	uxtb	r3, r3
 8002456:	3301      	adds	r3, #1
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	2b09      	cmp	r3, #9
 800245e:	bf94      	ite	ls
 8002460:	2301      	movls	r3, #1
 8002462:	2300      	movhi	r3, #0
 8002464:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002466:	2b00      	cmp	r3, #0
 8002468:	d079      	beq.n	800255e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002472:	2b00      	cmp	r3, #0
 8002474:	d107      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x4c2>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	0e9b      	lsrs	r3, r3, #26
 800247c:	3301      	adds	r3, #1
 800247e:	069b      	lsls	r3, r3, #26
 8002480:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002484:	e015      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x4ee>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800248e:	fa93 f3a3 	rbit	r3, r3
 8002492:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002496:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800249e:	2320      	movs	r3, #32
 80024a0:	e003      	b.n	80024aa <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80024a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024a4:	fab3 f383 	clz	r3, r3
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	3301      	adds	r3, #1
 80024ac:	069b      	lsls	r3, r3, #26
 80024ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d109      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x50e>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	0e9b      	lsrs	r3, r3, #26
 80024c4:	3301      	adds	r3, #1
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	2101      	movs	r1, #1
 80024cc:	fa01 f303 	lsl.w	r3, r1, r3
 80024d0:	e017      	b.n	8002502 <HAL_ADC_ConfigChannel+0x53e>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024da:	fa93 f3a3 	rbit	r3, r3
 80024de:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80024e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80024e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80024ea:	2320      	movs	r3, #32
 80024ec:	e003      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80024ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f0:	fab3 f383 	clz	r3, r3
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	3301      	adds	r3, #1
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	2101      	movs	r1, #1
 80024fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002502:	ea42 0103 	orr.w	r1, r2, r3
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10a      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x564>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	0e9b      	lsrs	r3, r3, #26
 8002518:	3301      	adds	r3, #1
 800251a:	f003 021f 	and.w	r2, r3, #31
 800251e:	4613      	mov	r3, r2
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	4413      	add	r3, r2
 8002524:	051b      	lsls	r3, r3, #20
 8002526:	e018      	b.n	800255a <HAL_ADC_ConfigChannel+0x596>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002530:	fa93 f3a3 	rbit	r3, r3
 8002534:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002538:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800253a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002540:	2320      	movs	r3, #32
 8002542:	e003      	b.n	800254c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002546:	fab3 f383 	clz	r3, r3
 800254a:	b2db      	uxtb	r3, r3
 800254c:	3301      	adds	r3, #1
 800254e:	f003 021f 	and.w	r2, r3, #31
 8002552:	4613      	mov	r3, r2
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	4413      	add	r3, r2
 8002558:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800255a:	430b      	orrs	r3, r1
 800255c:	e081      	b.n	8002662 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002566:	2b00      	cmp	r3, #0
 8002568:	d107      	bne.n	800257a <HAL_ADC_ConfigChannel+0x5b6>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	0e9b      	lsrs	r3, r3, #26
 8002570:	3301      	adds	r3, #1
 8002572:	069b      	lsls	r3, r3, #26
 8002574:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002578:	e015      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x5e2>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002582:	fa93 f3a3 	rbit	r3, r3
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800258c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002592:	2320      	movs	r3, #32
 8002594:	e003      	b.n	800259e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002598:	fab3 f383 	clz	r3, r3
 800259c:	b2db      	uxtb	r3, r3
 800259e:	3301      	adds	r3, #1
 80025a0:	069b      	lsls	r3, r3, #26
 80025a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d109      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x602>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	0e9b      	lsrs	r3, r3, #26
 80025b8:	3301      	adds	r3, #1
 80025ba:	f003 031f 	and.w	r3, r3, #31
 80025be:	2101      	movs	r1, #1
 80025c0:	fa01 f303 	lsl.w	r3, r1, r3
 80025c4:	e017      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x632>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	fa93 f3a3 	rbit	r3, r3
 80025d2:	61bb      	str	r3, [r7, #24]
  return result;
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80025de:	2320      	movs	r3, #32
 80025e0:	e003      	b.n	80025ea <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	fab3 f383 	clz	r3, r3
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	3301      	adds	r3, #1
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	2101      	movs	r1, #1
 80025f2:	fa01 f303 	lsl.w	r3, r1, r3
 80025f6:	ea42 0103 	orr.w	r1, r2, r3
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10d      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x65e>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	0e9b      	lsrs	r3, r3, #26
 800260c:	3301      	adds	r3, #1
 800260e:	f003 021f 	and.w	r2, r3, #31
 8002612:	4613      	mov	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	3b1e      	subs	r3, #30
 800261a:	051b      	lsls	r3, r3, #20
 800261c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002620:	e01e      	b.n	8002660 <HAL_ADC_ConfigChannel+0x69c>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	fa93 f3a3 	rbit	r3, r3
 800262e:	60fb      	str	r3, [r7, #12]
  return result;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d104      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800263a:	2320      	movs	r3, #32
 800263c:	e006      	b.n	800264c <HAL_ADC_ConfigChannel+0x688>
 800263e:	bf00      	nop
 8002640:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	fab3 f383 	clz	r3, r3
 800264a:	b2db      	uxtb	r3, r3
 800264c:	3301      	adds	r3, #1
 800264e:	f003 021f 	and.w	r2, r3, #31
 8002652:	4613      	mov	r3, r2
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	4413      	add	r3, r2
 8002658:	3b1e      	subs	r3, #30
 800265a:	051b      	lsls	r3, r3, #20
 800265c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002660:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002666:	4619      	mov	r1, r3
 8002668:	f7ff f81e 	bl	80016a8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4b44      	ldr	r3, [pc, #272]	; (8002784 <HAL_ADC_ConfigChannel+0x7c0>)
 8002672:	4013      	ands	r3, r2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d07a      	beq.n	800276e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002678:	4843      	ldr	r0, [pc, #268]	; (8002788 <HAL_ADC_ConfigChannel+0x7c4>)
 800267a:	f7fe ff73 	bl	8001564 <LL_ADC_GetCommonPathInternalCh>
 800267e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a41      	ldr	r2, [pc, #260]	; (800278c <HAL_ADC_ConfigChannel+0x7c8>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d12c      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800268c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002690:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d126      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a3c      	ldr	r2, [pc, #240]	; (8002790 <HAL_ADC_ConfigChannel+0x7cc>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d004      	beq.n	80026ac <HAL_ADC_ConfigChannel+0x6e8>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a3b      	ldr	r2, [pc, #236]	; (8002794 <HAL_ADC_ConfigChannel+0x7d0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d15d      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026b4:	4619      	mov	r1, r3
 80026b6:	4834      	ldr	r0, [pc, #208]	; (8002788 <HAL_ADC_ConfigChannel+0x7c4>)
 80026b8:	f7fe ff41 	bl	800153e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026bc:	4b36      	ldr	r3, [pc, #216]	; (8002798 <HAL_ADC_ConfigChannel+0x7d4>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	099b      	lsrs	r3, r3, #6
 80026c2:	4a36      	ldr	r2, [pc, #216]	; (800279c <HAL_ADC_ConfigChannel+0x7d8>)
 80026c4:	fba2 2303 	umull	r2, r3, r2, r3
 80026c8:	099b      	lsrs	r3, r3, #6
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	4613      	mov	r3, r2
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	4413      	add	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80026d6:	e002      	b.n	80026de <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	3b01      	subs	r3, #1
 80026dc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1f9      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026e4:	e040      	b.n	8002768 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a2d      	ldr	r2, [pc, #180]	; (80027a0 <HAL_ADC_ConfigChannel+0x7dc>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d118      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d112      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a23      	ldr	r2, [pc, #140]	; (8002790 <HAL_ADC_ConfigChannel+0x7cc>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d004      	beq.n	8002710 <HAL_ADC_ConfigChannel+0x74c>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a22      	ldr	r2, [pc, #136]	; (8002794 <HAL_ADC_ConfigChannel+0x7d0>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d12d      	bne.n	800276c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002710:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002714:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002718:	4619      	mov	r1, r3
 800271a:	481b      	ldr	r0, [pc, #108]	; (8002788 <HAL_ADC_ConfigChannel+0x7c4>)
 800271c:	f7fe ff0f 	bl	800153e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002720:	e024      	b.n	800276c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a1f      	ldr	r2, [pc, #124]	; (80027a4 <HAL_ADC_ConfigChannel+0x7e0>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d120      	bne.n	800276e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800272c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002730:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d11a      	bne.n	800276e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a14      	ldr	r2, [pc, #80]	; (8002790 <HAL_ADC_ConfigChannel+0x7cc>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d115      	bne.n	800276e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002742:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002746:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800274a:	4619      	mov	r1, r3
 800274c:	480e      	ldr	r0, [pc, #56]	; (8002788 <HAL_ADC_ConfigChannel+0x7c4>)
 800274e:	f7fe fef6 	bl	800153e <LL_ADC_SetCommonPathInternalCh>
 8002752:	e00c      	b.n	800276e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002758:	f043 0220 	orr.w	r2, r3, #32
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002766:	e002      	b.n	800276e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002768:	bf00      	nop
 800276a:	e000      	b.n	800276e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800276c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002776:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800277a:	4618      	mov	r0, r3
 800277c:	37d8      	adds	r7, #216	; 0xd8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	80080000 	.word	0x80080000
 8002788:	50040300 	.word	0x50040300
 800278c:	c7520000 	.word	0xc7520000
 8002790:	50040000 	.word	0x50040000
 8002794:	50040200 	.word	0x50040200
 8002798:	20000000 	.word	0x20000000
 800279c:	053e2d63 	.word	0x053e2d63
 80027a0:	cb840000 	.word	0xcb840000
 80027a4:	80000001 	.word	0x80000001

080027a8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff f8a2 	bl	8001908 <LL_ADC_REG_IsConversionOngoing>
 80027c4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff f8c3 	bl	8001956 <LL_ADC_INJ_IsConversionOngoing>
 80027d0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d103      	bne.n	80027e0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 8098 	beq.w	8002910 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d02a      	beq.n	8002844 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	7e5b      	ldrb	r3, [r3, #25]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d126      	bne.n	8002844 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	7e1b      	ldrb	r3, [r3, #24]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d122      	bne.n	8002844 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80027fe:	2301      	movs	r3, #1
 8002800:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002802:	e014      	b.n	800282e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	4a45      	ldr	r2, [pc, #276]	; (800291c <ADC_ConversionStop+0x174>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d90d      	bls.n	8002828 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002810:	f043 0210 	orr.w	r2, r3, #16
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281c:	f043 0201 	orr.w	r2, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e074      	b.n	8002912 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	3301      	adds	r3, #1
 800282c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002838:	2b40      	cmp	r3, #64	; 0x40
 800283a:	d1e3      	bne.n	8002804 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2240      	movs	r2, #64	; 0x40
 8002842:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d014      	beq.n	8002874 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff f85a 	bl	8001908 <LL_ADC_REG_IsConversionOngoing>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00c      	beq.n	8002874 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff f817 	bl	8001892 <LL_ADC_IsDisableOngoing>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d104      	bne.n	8002874 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff f836 	bl	80018e0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d014      	beq.n	80028a4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff f869 	bl	8001956 <LL_ADC_INJ_IsConversionOngoing>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00c      	beq.n	80028a4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7fe ffff 	bl	8001892 <LL_ADC_IsDisableOngoing>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d104      	bne.n	80028a4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff f845 	bl	800192e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d005      	beq.n	80028b6 <ADC_ConversionStop+0x10e>
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d105      	bne.n	80028bc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80028b0:	230c      	movs	r3, #12
 80028b2:	617b      	str	r3, [r7, #20]
        break;
 80028b4:	e005      	b.n	80028c2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80028b6:	2308      	movs	r3, #8
 80028b8:	617b      	str	r3, [r7, #20]
        break;
 80028ba:	e002      	b.n	80028c2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80028bc:	2304      	movs	r3, #4
 80028be:	617b      	str	r3, [r7, #20]
        break;
 80028c0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80028c2:	f7fe fdf9 	bl	80014b8 <HAL_GetTick>
 80028c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80028c8:	e01b      	b.n	8002902 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80028ca:	f7fe fdf5 	bl	80014b8 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b05      	cmp	r3, #5
 80028d6:	d914      	bls.n	8002902 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00d      	beq.n	8002902 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ea:	f043 0210 	orr.w	r2, r3, #16
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f6:	f043 0201 	orr.w	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e007      	b.n	8002912 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	4013      	ands	r3, r2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1dc      	bne.n	80028ca <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3720      	adds	r7, #32
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	a33fffff 	.word	0xa33fffff

08002920 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002928:	2300      	movs	r3, #0
 800292a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f7fe ff9b 	bl	800186c <LL_ADC_IsEnabled>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d169      	bne.n	8002a10 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	4b36      	ldr	r3, [pc, #216]	; (8002a1c <ADC_Enable+0xfc>)
 8002944:	4013      	ands	r3, r2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00d      	beq.n	8002966 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294e:	f043 0210 	orr.w	r2, r3, #16
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295a:	f043 0201 	orr.w	r2, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e055      	b.n	8002a12 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe ff56 	bl	800181c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002970:	482b      	ldr	r0, [pc, #172]	; (8002a20 <ADC_Enable+0x100>)
 8002972:	f7fe fdf7 	bl	8001564 <LL_ADC_GetCommonPathInternalCh>
 8002976:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002978:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800297c:	2b00      	cmp	r3, #0
 800297e:	d013      	beq.n	80029a8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002980:	4b28      	ldr	r3, [pc, #160]	; (8002a24 <ADC_Enable+0x104>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	099b      	lsrs	r3, r3, #6
 8002986:	4a28      	ldr	r2, [pc, #160]	; (8002a28 <ADC_Enable+0x108>)
 8002988:	fba2 2303 	umull	r2, r3, r2, r3
 800298c:	099b      	lsrs	r3, r3, #6
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	4613      	mov	r3, r2
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	4413      	add	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800299a:	e002      	b.n	80029a2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	3b01      	subs	r3, #1
 80029a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1f9      	bne.n	800299c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80029a8:	f7fe fd86 	bl	80014b8 <HAL_GetTick>
 80029ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029ae:	e028      	b.n	8002a02 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fe ff59 	bl	800186c <LL_ADC_IsEnabled>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d104      	bne.n	80029ca <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fe ff29 	bl	800181c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029ca:	f7fe fd75 	bl	80014b8 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d914      	bls.n	8002a02 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d00d      	beq.n	8002a02 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ea:	f043 0210 	orr.w	r2, r3, #16
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f6:	f043 0201 	orr.w	r2, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e007      	b.n	8002a12 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d1cf      	bne.n	80029b0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	8000003f 	.word	0x8000003f
 8002a20:	50040300 	.word	0x50040300
 8002a24:	20000000 	.word	0x20000000
 8002a28:	053e2d63 	.word	0x053e2d63

08002a2c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fe ff2a 	bl	8001892 <LL_ADC_IsDisableOngoing>
 8002a3e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fe ff11 	bl	800186c <LL_ADC_IsEnabled>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d047      	beq.n	8002ae0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d144      	bne.n	8002ae0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 030d 	and.w	r3, r3, #13
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d10c      	bne.n	8002a7e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fe feeb 	bl	8001844 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2203      	movs	r2, #3
 8002a74:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a76:	f7fe fd1f 	bl	80014b8 <HAL_GetTick>
 8002a7a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a7c:	e029      	b.n	8002ad2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a82:	f043 0210 	orr.w	r2, r3, #16
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8e:	f043 0201 	orr.w	r2, r3, #1
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e023      	b.n	8002ae2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a9a:	f7fe fd0d 	bl	80014b8 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d914      	bls.n	8002ad2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00d      	beq.n	8002ad2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aba:	f043 0210 	orr.w	r2, r3, #16
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac6:	f043 0201 	orr.w	r2, r3, #1
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e007      	b.n	8002ae2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1dc      	bne.n	8002a9a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <LL_ADC_IsEnabled>:
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <LL_ADC_IsEnabled+0x18>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <LL_ADC_IsEnabled+0x1a>
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <LL_ADC_REG_IsConversionOngoing>:
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d101      	bne.n	8002b28 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002b38:	b590      	push	{r4, r7, lr}
 8002b3a:	b09f      	sub	sp, #124	; 0x7c
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e093      	b.n	8002c7e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002b5e:	2300      	movs	r3, #0
 8002b60:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002b62:	2300      	movs	r3, #0
 8002b64:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a47      	ldr	r2, [pc, #284]	; (8002c88 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d102      	bne.n	8002b76 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b70:	4b46      	ldr	r3, [pc, #280]	; (8002c8c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002b72:	60bb      	str	r3, [r7, #8]
 8002b74:	e001      	b.n	8002b7a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b76:	2300      	movs	r3, #0
 8002b78:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10b      	bne.n	8002b98 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b84:	f043 0220 	orr.w	r2, r3, #32
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e072      	b.n	8002c7e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff ffb8 	bl	8002b10 <LL_ADC_REG_IsConversionOngoing>
 8002ba0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff ffb2 	bl	8002b10 <LL_ADC_REG_IsConversionOngoing>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d154      	bne.n	8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002bb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d151      	bne.n	8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002bb8:	4b35      	ldr	r3, [pc, #212]	; (8002c90 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002bba:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d02c      	beq.n	8002c1e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	6859      	ldr	r1, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bd6:	035b      	lsls	r3, r3, #13
 8002bd8:	430b      	orrs	r3, r1
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bde:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002be0:	4829      	ldr	r0, [pc, #164]	; (8002c88 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002be2:	f7ff ff82 	bl	8002aea <LL_ADC_IsEnabled>
 8002be6:	4604      	mov	r4, r0
 8002be8:	4828      	ldr	r0, [pc, #160]	; (8002c8c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002bea:	f7ff ff7e 	bl	8002aea <LL_ADC_IsEnabled>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	431c      	orrs	r4, r3
 8002bf2:	4828      	ldr	r0, [pc, #160]	; (8002c94 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002bf4:	f7ff ff79 	bl	8002aea <LL_ADC_IsEnabled>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	4323      	orrs	r3, r4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d137      	bne.n	8002c70 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c08:	f023 030f 	bic.w	r3, r3, #15
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	6811      	ldr	r1, [r2, #0]
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	6892      	ldr	r2, [r2, #8]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	431a      	orrs	r2, r3
 8002c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c1a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c1c:	e028      	b.n	8002c70 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c28:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c2a:	4817      	ldr	r0, [pc, #92]	; (8002c88 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002c2c:	f7ff ff5d 	bl	8002aea <LL_ADC_IsEnabled>
 8002c30:	4604      	mov	r4, r0
 8002c32:	4816      	ldr	r0, [pc, #88]	; (8002c8c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002c34:	f7ff ff59 	bl	8002aea <LL_ADC_IsEnabled>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	431c      	orrs	r4, r3
 8002c3c:	4815      	ldr	r0, [pc, #84]	; (8002c94 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002c3e:	f7ff ff54 	bl	8002aea <LL_ADC_IsEnabled>
 8002c42:	4603      	mov	r3, r0
 8002c44:	4323      	orrs	r3, r4
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d112      	bne.n	8002c70 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c52:	f023 030f 	bic.w	r3, r3, #15
 8002c56:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c58:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c5a:	e009      	b.n	8002c70 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c60:	f043 0220 	orr.w	r2, r3, #32
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002c6e:	e000      	b.n	8002c72 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c70:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c7a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	377c      	adds	r7, #124	; 0x7c
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd90      	pop	{r4, r7, pc}
 8002c86:	bf00      	nop
 8002c88:	50040000 	.word	0x50040000
 8002c8c:	50040100 	.word	0x50040100
 8002c90:	50040300 	.word	0x50040300
 8002c94:	50040200 	.word	0x50040200

08002c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <__NVIC_SetPriorityGrouping+0x44>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cca:	4a04      	ldr	r2, [pc, #16]	; (8002cdc <__NVIC_SetPriorityGrouping+0x44>)
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	60d3      	str	r3, [r2, #12]
}
 8002cd0:	bf00      	nop
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	e000ed00 	.word	0xe000ed00

08002ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ce4:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	0a1b      	lsrs	r3, r3, #8
 8002cea:	f003 0307 	and.w	r3, r3, #7
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	6039      	str	r1, [r7, #0]
 8002d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	db0a      	blt.n	8002d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	490c      	ldr	r1, [pc, #48]	; (8002d48 <__NVIC_SetPriority+0x4c>)
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	0112      	lsls	r2, r2, #4
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	440b      	add	r3, r1
 8002d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d24:	e00a      	b.n	8002d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	4908      	ldr	r1, [pc, #32]	; (8002d4c <__NVIC_SetPriority+0x50>)
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	3b04      	subs	r3, #4
 8002d34:	0112      	lsls	r2, r2, #4
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	440b      	add	r3, r1
 8002d3a:	761a      	strb	r2, [r3, #24]
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	e000e100 	.word	0xe000e100
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b089      	sub	sp, #36	; 0x24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f1c3 0307 	rsb	r3, r3, #7
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	bf28      	it	cs
 8002d6e:	2304      	movcs	r3, #4
 8002d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	3304      	adds	r3, #4
 8002d76:	2b06      	cmp	r3, #6
 8002d78:	d902      	bls.n	8002d80 <NVIC_EncodePriority+0x30>
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	3b03      	subs	r3, #3
 8002d7e:	e000      	b.n	8002d82 <NVIC_EncodePriority+0x32>
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d84:	f04f 32ff 	mov.w	r2, #4294967295
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	43da      	mvns	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	401a      	ands	r2, r3
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d98:	f04f 31ff 	mov.w	r1, #4294967295
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002da2:	43d9      	mvns	r1, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da8:	4313      	orrs	r3, r2
         );
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3724      	adds	r7, #36	; 0x24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
	...

08002db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dc8:	d301      	bcc.n	8002dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e00f      	b.n	8002dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dce:	4a0a      	ldr	r2, [pc, #40]	; (8002df8 <SysTick_Config+0x40>)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dd6:	210f      	movs	r1, #15
 8002dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ddc:	f7ff ff8e 	bl	8002cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <SysTick_Config+0x40>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002de6:	4b04      	ldr	r3, [pc, #16]	; (8002df8 <SysTick_Config+0x40>)
 8002de8:	2207      	movs	r2, #7
 8002dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	e000e010 	.word	0xe000e010

08002dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7ff ff47 	bl	8002c98 <__NVIC_SetPriorityGrouping>
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b086      	sub	sp, #24
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	4603      	mov	r3, r0
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]
 8002e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e24:	f7ff ff5c 	bl	8002ce0 <__NVIC_GetPriorityGrouping>
 8002e28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	68b9      	ldr	r1, [r7, #8]
 8002e2e:	6978      	ldr	r0, [r7, #20]
 8002e30:	f7ff ff8e 	bl	8002d50 <NVIC_EncodePriority>
 8002e34:	4602      	mov	r2, r0
 8002e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff ff5d 	bl	8002cfc <__NVIC_SetPriority>
}
 8002e42:	bf00      	nop
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7ff ffb0 	bl	8002db8 <SysTick_Config>
 8002e58:	4603      	mov	r3, r0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e014      	b.n	8002e9e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	791b      	ldrb	r3, [r3, #4]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d105      	bne.n	8002e8a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7fe fa0b 	bl	80012a0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	795b      	ldrb	r3, [r3, #5]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_DAC_Start+0x16>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e03b      	b.n	8002f34 <HAL_DAC_Start+0x8e>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6819      	ldr	r1, [r3, #0]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	f003 0310 	and.w	r3, r3, #16
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10f      	bne.n	8002f06 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d118      	bne.n	8002f26 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	605a      	str	r2, [r3, #4]
 8002f04:	e00f      	b.n	8002f26 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002f10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f14:	d107      	bne.n	8002f26 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f042 0202 	orr.w	r2, r2, #2
 8002f24:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
 8002f4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d105      	bne.n	8002f6a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4413      	add	r3, r2
 8002f64:	3308      	adds	r3, #8
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	e004      	b.n	8002f74 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4413      	add	r3, r2
 8002f70:	3314      	adds	r3, #20
 8002f72:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	461a      	mov	r2, r3
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	371c      	adds	r7, #28
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b088      	sub	sp, #32
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	60f8      	str	r0, [r7, #12]
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	795b      	ldrb	r3, [r3, #5]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d101      	bne.n	8002fa6 <HAL_DAC_ConfigChannel+0x1c>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	e114      	b.n	80031d0 <HAL_DAC_ConfigChannel+0x246>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	f040 8081 	bne.w	80030be <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002fbc:	f7fe fa7c 	bl	80014b8 <HAL_GetTick>
 8002fc0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d140      	bne.n	800304a <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002fc8:	e018      	b.n	8002ffc <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002fca:	f7fe fa75 	bl	80014b8 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d911      	bls.n	8002ffc <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f043 0208 	orr.w	r2, r3, #8
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e0e9      	b.n	80031d0 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003002:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1df      	bne.n	8002fca <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 800300a:	2001      	movs	r0, #1
 800300c:	f7fe fa60 	bl	80014d0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	6992      	ldr	r2, [r2, #24]
 8003018:	641a      	str	r2, [r3, #64]	; 0x40
 800301a:	e023      	b.n	8003064 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800301c:	f7fe fa4c 	bl	80014b8 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b01      	cmp	r3, #1
 8003028:	d90f      	bls.n	800304a <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003030:	2b00      	cmp	r3, #0
 8003032:	da0a      	bge.n	800304a <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	f043 0208 	orr.w	r2, r3, #8
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2203      	movs	r2, #3
 8003044:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e0c2      	b.n	80031d0 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003050:	2b00      	cmp	r3, #0
 8003052:	dbe3      	blt.n	800301c <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8003054:	2001      	movs	r0, #1
 8003056:	f7fe fa3b 	bl	80014d0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	6992      	ldr	r2, [r2, #24]
 8003062:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f003 0310 	and.w	r3, r3, #16
 8003070:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003074:	fa01 f303 	lsl.w	r3, r1, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	ea02 0103 	and.w	r1, r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	69da      	ldr	r2, [r3, #28]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	409a      	lsls	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f003 0310 	and.w	r3, r3, #16
 800309e:	21ff      	movs	r1, #255	; 0xff
 80030a0:	fa01 f303 	lsl.w	r3, r1, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	ea02 0103 	and.w	r1, r2, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	6a1a      	ldr	r2, [r3, #32]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f003 0310 	and.w	r3, r3, #16
 80030b4:	409a      	lsls	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d11d      	bne.n	8003102 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030cc:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	221f      	movs	r2, #31
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4013      	ands	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f003 0310 	and.w	r3, r3, #16
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003108:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f003 0310 	and.w	r3, r3, #16
 8003110:	2207      	movs	r2, #7
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43db      	mvns	r3, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4013      	ands	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	431a      	orrs	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	4313      	orrs	r3, r2
 800312e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f003 0310 	and.w	r3, r3, #16
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6819      	ldr	r1, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43da      	mvns	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	400a      	ands	r2, r1
 8003166:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	f640 72fc 	movw	r2, #4092	; 0xffc
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	43db      	mvns	r3, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4013      	ands	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f003 0310 	and.w	r3, r3, #16
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6819      	ldr	r1, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f003 0310 	and.w	r3, r3, #16
 80031b2:	22c0      	movs	r2, #192	; 0xc0
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43da      	mvns	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	400a      	ands	r2, r1
 80031c0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3720      	adds	r7, #32
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031e2:	2300      	movs	r3, #0
 80031e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031e6:	e17f      	b.n	80034e8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	2101      	movs	r1, #1
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	fa01 f303 	lsl.w	r3, r1, r3
 80031f4:	4013      	ands	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 8171 	beq.w	80034e2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 0303 	and.w	r3, r3, #3
 8003208:	2b01      	cmp	r3, #1
 800320a:	d005      	beq.n	8003218 <HAL_GPIO_Init+0x40>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 0303 	and.w	r3, r3, #3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d130      	bne.n	800327a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	2203      	movs	r2, #3
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	43db      	mvns	r3, r3
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	4013      	ands	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	4313      	orrs	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800324e:	2201      	movs	r2, #1
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43db      	mvns	r3, r3
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4013      	ands	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	091b      	lsrs	r3, r3, #4
 8003264:	f003 0201 	and.w	r2, r3, #1
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	2b03      	cmp	r3, #3
 8003284:	d118      	bne.n	80032b8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800328c:	2201      	movs	r2, #1
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	43db      	mvns	r3, r3
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	4013      	ands	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	08db      	lsrs	r3, r3, #3
 80032a2:	f003 0201 	and.w	r2, r3, #1
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f003 0303 	and.w	r3, r3, #3
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d017      	beq.n	80032f4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	2203      	movs	r2, #3
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	4013      	ands	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 0303 	and.w	r3, r3, #3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d123      	bne.n	8003348 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	08da      	lsrs	r2, r3, #3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3208      	adds	r2, #8
 8003308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800330c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	220f      	movs	r2, #15
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	43db      	mvns	r3, r3
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4013      	ands	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4313      	orrs	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	08da      	lsrs	r2, r3, #3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3208      	adds	r2, #8
 8003342:	6939      	ldr	r1, [r7, #16]
 8003344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	2203      	movs	r2, #3
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	43db      	mvns	r3, r3
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4013      	ands	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 0203 	and.w	r2, r3, #3
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	4313      	orrs	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 80ac 	beq.w	80034e2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800338a:	4b5f      	ldr	r3, [pc, #380]	; (8003508 <HAL_GPIO_Init+0x330>)
 800338c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800338e:	4a5e      	ldr	r2, [pc, #376]	; (8003508 <HAL_GPIO_Init+0x330>)
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	6613      	str	r3, [r2, #96]	; 0x60
 8003396:	4b5c      	ldr	r3, [pc, #368]	; (8003508 <HAL_GPIO_Init+0x330>)
 8003398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80033a2:	4a5a      	ldr	r2, [pc, #360]	; (800350c <HAL_GPIO_Init+0x334>)
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	089b      	lsrs	r3, r3, #2
 80033a8:	3302      	adds	r3, #2
 80033aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	220f      	movs	r2, #15
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43db      	mvns	r3, r3
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	4013      	ands	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80033cc:	d025      	beq.n	800341a <HAL_GPIO_Init+0x242>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a4f      	ldr	r2, [pc, #316]	; (8003510 <HAL_GPIO_Init+0x338>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d01f      	beq.n	8003416 <HAL_GPIO_Init+0x23e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a4e      	ldr	r2, [pc, #312]	; (8003514 <HAL_GPIO_Init+0x33c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d019      	beq.n	8003412 <HAL_GPIO_Init+0x23a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a4d      	ldr	r2, [pc, #308]	; (8003518 <HAL_GPIO_Init+0x340>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d013      	beq.n	800340e <HAL_GPIO_Init+0x236>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a4c      	ldr	r2, [pc, #304]	; (800351c <HAL_GPIO_Init+0x344>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00d      	beq.n	800340a <HAL_GPIO_Init+0x232>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a4b      	ldr	r2, [pc, #300]	; (8003520 <HAL_GPIO_Init+0x348>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d007      	beq.n	8003406 <HAL_GPIO_Init+0x22e>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a4a      	ldr	r2, [pc, #296]	; (8003524 <HAL_GPIO_Init+0x34c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d101      	bne.n	8003402 <HAL_GPIO_Init+0x22a>
 80033fe:	2306      	movs	r3, #6
 8003400:	e00c      	b.n	800341c <HAL_GPIO_Init+0x244>
 8003402:	2307      	movs	r3, #7
 8003404:	e00a      	b.n	800341c <HAL_GPIO_Init+0x244>
 8003406:	2305      	movs	r3, #5
 8003408:	e008      	b.n	800341c <HAL_GPIO_Init+0x244>
 800340a:	2304      	movs	r3, #4
 800340c:	e006      	b.n	800341c <HAL_GPIO_Init+0x244>
 800340e:	2303      	movs	r3, #3
 8003410:	e004      	b.n	800341c <HAL_GPIO_Init+0x244>
 8003412:	2302      	movs	r3, #2
 8003414:	e002      	b.n	800341c <HAL_GPIO_Init+0x244>
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <HAL_GPIO_Init+0x244>
 800341a:	2300      	movs	r3, #0
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	f002 0203 	and.w	r2, r2, #3
 8003422:	0092      	lsls	r2, r2, #2
 8003424:	4093      	lsls	r3, r2
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800342c:	4937      	ldr	r1, [pc, #220]	; (800350c <HAL_GPIO_Init+0x334>)
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	089b      	lsrs	r3, r3, #2
 8003432:	3302      	adds	r3, #2
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800343a:	4b3b      	ldr	r3, [pc, #236]	; (8003528 <HAL_GPIO_Init+0x350>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	43db      	mvns	r3, r3
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4013      	ands	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4313      	orrs	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800345e:	4a32      	ldr	r2, [pc, #200]	; (8003528 <HAL_GPIO_Init+0x350>)
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003464:	4b30      	ldr	r3, [pc, #192]	; (8003528 <HAL_GPIO_Init+0x350>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	43db      	mvns	r3, r3
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	4013      	ands	r3, r2
 8003472:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4313      	orrs	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003488:	4a27      	ldr	r2, [pc, #156]	; (8003528 <HAL_GPIO_Init+0x350>)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800348e:	4b26      	ldr	r3, [pc, #152]	; (8003528 <HAL_GPIO_Init+0x350>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	43db      	mvns	r3, r3
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4013      	ands	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034b2:	4a1d      	ldr	r2, [pc, #116]	; (8003528 <HAL_GPIO_Init+0x350>)
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80034b8:	4b1b      	ldr	r3, [pc, #108]	; (8003528 <HAL_GPIO_Init+0x350>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	43db      	mvns	r3, r3
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4013      	ands	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4313      	orrs	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034dc:	4a12      	ldr	r2, [pc, #72]	; (8003528 <HAL_GPIO_Init+0x350>)
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	3301      	adds	r3, #1
 80034e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	fa22 f303 	lsr.w	r3, r2, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f47f ae78 	bne.w	80031e8 <HAL_GPIO_Init+0x10>
  }
}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	371c      	adds	r7, #28
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40021000 	.word	0x40021000
 800350c:	40010000 	.word	0x40010000
 8003510:	48000400 	.word	0x48000400
 8003514:	48000800 	.word	0x48000800
 8003518:	48000c00 	.word	0x48000c00
 800351c:	48001000 	.word	0x48001000
 8003520:	48001400 	.word	0x48001400
 8003524:	48001800 	.word	0x48001800
 8003528:	40010400 	.word	0x40010400

0800352c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	887b      	ldrh	r3, [r7, #2]
 800353e:	4013      	ands	r3, r2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d002      	beq.n	800354a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003544:	2301      	movs	r3, #1
 8003546:	73fb      	strb	r3, [r7, #15]
 8003548:	e001      	b.n	800354e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800354a:	2300      	movs	r3, #0
 800354c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800354e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	807b      	strh	r3, [r7, #2]
 8003568:	4613      	mov	r3, r2
 800356a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800356c:	787b      	ldrb	r3, [r7, #1]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003572:	887a      	ldrh	r2, [r7, #2]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003578:	e002      	b.n	8003580 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800357a:	887a      	ldrh	r2, [r7, #2]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003590:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003598:	4618      	mov	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40007000 	.word	0x40007000

080035a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b6:	d130      	bne.n	800361a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80035b8:	4b23      	ldr	r3, [pc, #140]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035c4:	d038      	beq.n	8003638 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035c6:	4b20      	ldr	r3, [pc, #128]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035ce:	4a1e      	ldr	r2, [pc, #120]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035d6:	4b1d      	ldr	r3, [pc, #116]	; (800364c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2232      	movs	r2, #50	; 0x32
 80035dc:	fb02 f303 	mul.w	r3, r2, r3
 80035e0:	4a1b      	ldr	r2, [pc, #108]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	0c9b      	lsrs	r3, r3, #18
 80035e8:	3301      	adds	r3, #1
 80035ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035ec:	e002      	b.n	80035f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	3b01      	subs	r3, #1
 80035f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035f4:	4b14      	ldr	r3, [pc, #80]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003600:	d102      	bne.n	8003608 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1f2      	bne.n	80035ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003608:	4b0f      	ldr	r3, [pc, #60]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003614:	d110      	bne.n	8003638 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e00f      	b.n	800363a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800361a:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003626:	d007      	beq.n	8003638 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003628:	4b07      	ldr	r3, [pc, #28]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003630:	4a05      	ldr	r2, [pc, #20]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003632:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003636:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40007000 	.word	0x40007000
 800364c:	20000000 	.word	0x20000000
 8003650:	431bde83 	.word	0x431bde83

08003654 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e3ca      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003666:	4b97      	ldr	r3, [pc, #604]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 030c 	and.w	r3, r3, #12
 800366e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003670:	4b94      	ldr	r3, [pc, #592]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0310 	and.w	r3, r3, #16
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 80e4 	beq.w	8003850 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d007      	beq.n	800369e <HAL_RCC_OscConfig+0x4a>
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	2b0c      	cmp	r3, #12
 8003692:	f040 808b 	bne.w	80037ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2b01      	cmp	r3, #1
 800369a:	f040 8087 	bne.w	80037ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800369e:	4b89      	ldr	r3, [pc, #548]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d005      	beq.n	80036b6 <HAL_RCC_OscConfig+0x62>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e3a2      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1a      	ldr	r2, [r3, #32]
 80036ba:	4b82      	ldr	r3, [pc, #520]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d004      	beq.n	80036d0 <HAL_RCC_OscConfig+0x7c>
 80036c6:	4b7f      	ldr	r3, [pc, #508]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036ce:	e005      	b.n	80036dc <HAL_RCC_OscConfig+0x88>
 80036d0:	4b7c      	ldr	r3, [pc, #496]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80036d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036d6:	091b      	lsrs	r3, r3, #4
 80036d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036dc:	4293      	cmp	r3, r2
 80036de:	d223      	bcs.n	8003728 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 fd1d 	bl	8004124 <RCC_SetFlashLatencyFromMSIRange>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e383      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036f4:	4b73      	ldr	r3, [pc, #460]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a72      	ldr	r2, [pc, #456]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80036fa:	f043 0308 	orr.w	r3, r3, #8
 80036fe:	6013      	str	r3, [r2, #0]
 8003700:	4b70      	ldr	r3, [pc, #448]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	496d      	ldr	r1, [pc, #436]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 800370e:	4313      	orrs	r3, r2
 8003710:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003712:	4b6c      	ldr	r3, [pc, #432]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	021b      	lsls	r3, r3, #8
 8003720:	4968      	ldr	r1, [pc, #416]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003722:	4313      	orrs	r3, r2
 8003724:	604b      	str	r3, [r1, #4]
 8003726:	e025      	b.n	8003774 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003728:	4b66      	ldr	r3, [pc, #408]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a65      	ldr	r2, [pc, #404]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 800372e:	f043 0308 	orr.w	r3, r3, #8
 8003732:	6013      	str	r3, [r2, #0]
 8003734:	4b63      	ldr	r3, [pc, #396]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	4960      	ldr	r1, [pc, #384]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003746:	4b5f      	ldr	r3, [pc, #380]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	021b      	lsls	r3, r3, #8
 8003754:	495b      	ldr	r1, [pc, #364]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003756:	4313      	orrs	r3, r2
 8003758:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d109      	bne.n	8003774 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	4618      	mov	r0, r3
 8003766:	f000 fcdd 	bl	8004124 <RCC_SetFlashLatencyFromMSIRange>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e343      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003774:	f000 fc4a 	bl	800400c <HAL_RCC_GetSysClockFreq>
 8003778:	4602      	mov	r2, r0
 800377a:	4b52      	ldr	r3, [pc, #328]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	091b      	lsrs	r3, r3, #4
 8003780:	f003 030f 	and.w	r3, r3, #15
 8003784:	4950      	ldr	r1, [pc, #320]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 8003786:	5ccb      	ldrb	r3, [r1, r3]
 8003788:	f003 031f 	and.w	r3, r3, #31
 800378c:	fa22 f303 	lsr.w	r3, r2, r3
 8003790:	4a4e      	ldr	r2, [pc, #312]	; (80038cc <HAL_RCC_OscConfig+0x278>)
 8003792:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003794:	4b4e      	ldr	r3, [pc, #312]	; (80038d0 <HAL_RCC_OscConfig+0x27c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f7fd fe3d 	bl	8001418 <HAL_InitTick>
 800379e:	4603      	mov	r3, r0
 80037a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d052      	beq.n	800384e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
 80037aa:	e327      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d032      	beq.n	800381a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037b4:	4b43      	ldr	r3, [pc, #268]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a42      	ldr	r2, [pc, #264]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037c0:	f7fd fe7a 	bl	80014b8 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037c8:	f7fd fe76 	bl	80014b8 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e310      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037da:	4b3a      	ldr	r3, [pc, #232]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0f0      	beq.n	80037c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037e6:	4b37      	ldr	r3, [pc, #220]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a36      	ldr	r2, [pc, #216]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80037ec:	f043 0308 	orr.w	r3, r3, #8
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	4b34      	ldr	r3, [pc, #208]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	4931      	ldr	r1, [pc, #196]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003800:	4313      	orrs	r3, r2
 8003802:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003804:	4b2f      	ldr	r3, [pc, #188]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	021b      	lsls	r3, r3, #8
 8003812:	492c      	ldr	r1, [pc, #176]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003814:	4313      	orrs	r3, r2
 8003816:	604b      	str	r3, [r1, #4]
 8003818:	e01a      	b.n	8003850 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800381a:	4b2a      	ldr	r3, [pc, #168]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a29      	ldr	r2, [pc, #164]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003820:	f023 0301 	bic.w	r3, r3, #1
 8003824:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003826:	f7fd fe47 	bl	80014b8 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800382c:	e008      	b.n	8003840 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800382e:	f7fd fe43 	bl	80014b8 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e2dd      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003840:	4b20      	ldr	r3, [pc, #128]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1f0      	bne.n	800382e <HAL_RCC_OscConfig+0x1da>
 800384c:	e000      	b.n	8003850 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800384e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d074      	beq.n	8003946 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	2b08      	cmp	r3, #8
 8003860:	d005      	beq.n	800386e <HAL_RCC_OscConfig+0x21a>
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	2b0c      	cmp	r3, #12
 8003866:	d10e      	bne.n	8003886 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2b03      	cmp	r3, #3
 800386c:	d10b      	bne.n	8003886 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800386e:	4b15      	ldr	r3, [pc, #84]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d064      	beq.n	8003944 <HAL_RCC_OscConfig+0x2f0>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d160      	bne.n	8003944 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e2ba      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800388e:	d106      	bne.n	800389e <HAL_RCC_OscConfig+0x24a>
 8003890:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a0b      	ldr	r2, [pc, #44]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	e026      	b.n	80038ec <HAL_RCC_OscConfig+0x298>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038a6:	d115      	bne.n	80038d4 <HAL_RCC_OscConfig+0x280>
 80038a8:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a05      	ldr	r2, [pc, #20]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80038ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a02      	ldr	r2, [pc, #8]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80038ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038be:	6013      	str	r3, [r2, #0]
 80038c0:	e014      	b.n	80038ec <HAL_RCC_OscConfig+0x298>
 80038c2:	bf00      	nop
 80038c4:	40021000 	.word	0x40021000
 80038c8:	08004ca0 	.word	0x08004ca0
 80038cc:	20000000 	.word	0x20000000
 80038d0:	20000004 	.word	0x20000004
 80038d4:	4ba0      	ldr	r3, [pc, #640]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a9f      	ldr	r2, [pc, #636]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 80038da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038de:	6013      	str	r3, [r2, #0]
 80038e0:	4b9d      	ldr	r3, [pc, #628]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a9c      	ldr	r2, [pc, #624]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 80038e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d013      	beq.n	800391c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f4:	f7fd fde0 	bl	80014b8 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038fc:	f7fd fddc 	bl	80014b8 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b64      	cmp	r3, #100	; 0x64
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e276      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800390e:	4b92      	ldr	r3, [pc, #584]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0f0      	beq.n	80038fc <HAL_RCC_OscConfig+0x2a8>
 800391a:	e014      	b.n	8003946 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391c:	f7fd fdcc 	bl	80014b8 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003924:	f7fd fdc8 	bl	80014b8 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b64      	cmp	r3, #100	; 0x64
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e262      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003936:	4b88      	ldr	r3, [pc, #544]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f0      	bne.n	8003924 <HAL_RCC_OscConfig+0x2d0>
 8003942:	e000      	b.n	8003946 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d060      	beq.n	8003a14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	2b04      	cmp	r3, #4
 8003956:	d005      	beq.n	8003964 <HAL_RCC_OscConfig+0x310>
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	2b0c      	cmp	r3, #12
 800395c:	d119      	bne.n	8003992 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2b02      	cmp	r3, #2
 8003962:	d116      	bne.n	8003992 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003964:	4b7c      	ldr	r3, [pc, #496]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_RCC_OscConfig+0x328>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e23f      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800397c:	4b76      	ldr	r3, [pc, #472]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	061b      	lsls	r3, r3, #24
 800398a:	4973      	ldr	r1, [pc, #460]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 800398c:	4313      	orrs	r3, r2
 800398e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003990:	e040      	b.n	8003a14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d023      	beq.n	80039e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800399a:	4b6f      	ldr	r3, [pc, #444]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a6e      	ldr	r2, [pc, #440]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 80039a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a6:	f7fd fd87 	bl	80014b8 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ae:	f7fd fd83 	bl	80014b8 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e21d      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039c0:	4b65      	ldr	r3, [pc, #404]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d0f0      	beq.n	80039ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039cc:	4b62      	ldr	r3, [pc, #392]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	061b      	lsls	r3, r3, #24
 80039da:	495f      	ldr	r1, [pc, #380]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	604b      	str	r3, [r1, #4]
 80039e0:	e018      	b.n	8003a14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039e2:	4b5d      	ldr	r3, [pc, #372]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a5c      	ldr	r2, [pc, #368]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 80039e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ee:	f7fd fd63 	bl	80014b8 <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039f4:	e008      	b.n	8003a08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f6:	f7fd fd5f 	bl	80014b8 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e1f9      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a08:	4b53      	ldr	r3, [pc, #332]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1f0      	bne.n	80039f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d03c      	beq.n	8003a9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d01c      	beq.n	8003a62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a28:	4b4b      	ldr	r3, [pc, #300]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a2e:	4a4a      	ldr	r2, [pc, #296]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a38:	f7fd fd3e 	bl	80014b8 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a40:	f7fd fd3a 	bl	80014b8 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e1d4      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a52:	4b41      	ldr	r3, [pc, #260]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0ef      	beq.n	8003a40 <HAL_RCC_OscConfig+0x3ec>
 8003a60:	e01b      	b.n	8003a9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a62:	4b3d      	ldr	r3, [pc, #244]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a68:	4a3b      	ldr	r2, [pc, #236]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003a6a:	f023 0301 	bic.w	r3, r3, #1
 8003a6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a72:	f7fd fd21 	bl	80014b8 <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a78:	e008      	b.n	8003a8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a7a:	f7fd fd1d 	bl	80014b8 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e1b7      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a8c:	4b32      	ldr	r3, [pc, #200]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1ef      	bne.n	8003a7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0304 	and.w	r3, r3, #4
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 80a6 	beq.w	8003bf4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003aac:	4b2a      	ldr	r3, [pc, #168]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10d      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab8:	4b27      	ldr	r3, [pc, #156]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abc:	4a26      	ldr	r2, [pc, #152]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ac4:	4b24      	ldr	r3, [pc, #144]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ad4:	4b21      	ldr	r3, [pc, #132]	; (8003b5c <HAL_RCC_OscConfig+0x508>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d118      	bne.n	8003b12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ae0:	4b1e      	ldr	r3, [pc, #120]	; (8003b5c <HAL_RCC_OscConfig+0x508>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a1d      	ldr	r2, [pc, #116]	; (8003b5c <HAL_RCC_OscConfig+0x508>)
 8003ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aec:	f7fd fce4 	bl	80014b8 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af4:	f7fd fce0 	bl	80014b8 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e17a      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b06:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <HAL_RCC_OscConfig+0x508>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d108      	bne.n	8003b2c <HAL_RCC_OscConfig+0x4d8>
 8003b1a:	4b0f      	ldr	r3, [pc, #60]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b20:	4a0d      	ldr	r2, [pc, #52]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003b22:	f043 0301 	orr.w	r3, r3, #1
 8003b26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b2a:	e029      	b.n	8003b80 <HAL_RCC_OscConfig+0x52c>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	2b05      	cmp	r3, #5
 8003b32:	d115      	bne.n	8003b60 <HAL_RCC_OscConfig+0x50c>
 8003b34:	4b08      	ldr	r3, [pc, #32]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3a:	4a07      	ldr	r2, [pc, #28]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003b3c:	f043 0304 	orr.w	r3, r3, #4
 8003b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b44:	4b04      	ldr	r3, [pc, #16]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4a:	4a03      	ldr	r2, [pc, #12]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003b4c:	f043 0301 	orr.w	r3, r3, #1
 8003b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b54:	e014      	b.n	8003b80 <HAL_RCC_OscConfig+0x52c>
 8003b56:	bf00      	nop
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	40007000 	.word	0x40007000
 8003b60:	4b9c      	ldr	r3, [pc, #624]	; (8003dd4 <HAL_RCC_OscConfig+0x780>)
 8003b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b66:	4a9b      	ldr	r2, [pc, #620]	; (8003dd4 <HAL_RCC_OscConfig+0x780>)
 8003b68:	f023 0301 	bic.w	r3, r3, #1
 8003b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b70:	4b98      	ldr	r3, [pc, #608]	; (8003dd4 <HAL_RCC_OscConfig+0x780>)
 8003b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b76:	4a97      	ldr	r2, [pc, #604]	; (8003dd4 <HAL_RCC_OscConfig+0x780>)
 8003b78:	f023 0304 	bic.w	r3, r3, #4
 8003b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d016      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b88:	f7fd fc96 	bl	80014b8 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b8e:	e00a      	b.n	8003ba6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b90:	f7fd fc92 	bl	80014b8 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e12a      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ba6:	4b8b      	ldr	r3, [pc, #556]	; (8003dd4 <HAL_RCC_OscConfig+0x780>)
 8003ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0ed      	beq.n	8003b90 <HAL_RCC_OscConfig+0x53c>
 8003bb4:	e015      	b.n	8003be2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb6:	f7fd fc7f 	bl	80014b8 <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bbc:	e00a      	b.n	8003bd4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bbe:	f7fd fc7b 	bl	80014b8 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e113      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bd4:	4b7f      	ldr	r3, [pc, #508]	; (8003dd4 <HAL_RCC_OscConfig+0x780>)
 8003bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1ed      	bne.n	8003bbe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003be2:	7ffb      	ldrb	r3, [r7, #31]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d105      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be8:	4b7a      	ldr	r3, [pc, #488]	; (8003dd4 <HAL_RCC_OscConfig+0x780>)
 8003bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bec:	4a79      	ldr	r2, [pc, #484]	; (8003dd4 <HAL_RCC_OscConfig+0x780>)
 8003bee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bf2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 80fe 	beq.w	8003dfa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	f040 80d0 	bne.w	8003da8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c08:	4b72      	ldr	r3, [pc, #456]	; (8003dd4 <HAL_RCC_OscConfig+0x780>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f003 0203 	and.w	r2, r3, #3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d130      	bne.n	8003c7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	3b01      	subs	r3, #1
 8003c28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d127      	bne.n	8003c7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c38:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d11f      	bne.n	8003c7e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c48:	2a07      	cmp	r2, #7
 8003c4a:	bf14      	ite	ne
 8003c4c:	2201      	movne	r2, #1
 8003c4e:	2200      	moveq	r2, #0
 8003c50:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d113      	bne.n	8003c7e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c60:	085b      	lsrs	r3, r3, #1
 8003c62:	3b01      	subs	r3, #1
 8003c64:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d109      	bne.n	8003c7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	085b      	lsrs	r3, r3, #1
 8003c76:	3b01      	subs	r3, #1
 8003c78:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d06e      	beq.n	8003d5c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	2b0c      	cmp	r3, #12
 8003c82:	d069      	beq.n	8003d58 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c84:	4b53      	ldr	r3, [pc, #332]	; (8003dd4 <HAL_RCC_OscConfig+0x780>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d105      	bne.n	8003c9c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c90:	4b50      	ldr	r3, [pc, #320]	; (8003dd4 <HAL_RCC_OscConfig+0x780>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e0ad      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ca0:	4b4c      	ldr	r3, [pc, #304]	; (8003dd4 <HAL_RCC_OscConfig+0x780>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a4b      	ldr	r2, [pc, #300]	; (8003dd4 <HAL_RCC_OscConfig+0x780>)
 8003ca6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003caa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cac:	f7fd fc04 	bl	80014b8 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb4:	f7fd fc00 	bl	80014b8 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e09a      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cc6:	4b43      	ldr	r3, [pc, #268]	; (8003dd4 <HAL_RCC_OscConfig+0x780>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f0      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cd2:	4b40      	ldr	r3, [pc, #256]	; (8003dd4 <HAL_RCC_OscConfig+0x780>)
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	4b40      	ldr	r3, [pc, #256]	; (8003dd8 <HAL_RCC_OscConfig+0x784>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ce2:	3a01      	subs	r2, #1
 8003ce4:	0112      	lsls	r2, r2, #4
 8003ce6:	4311      	orrs	r1, r2
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cec:	0212      	lsls	r2, r2, #8
 8003cee:	4311      	orrs	r1, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cf4:	0852      	lsrs	r2, r2, #1
 8003cf6:	3a01      	subs	r2, #1
 8003cf8:	0552      	lsls	r2, r2, #21
 8003cfa:	4311      	orrs	r1, r2
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d00:	0852      	lsrs	r2, r2, #1
 8003d02:	3a01      	subs	r2, #1
 8003d04:	0652      	lsls	r2, r2, #25
 8003d06:	4311      	orrs	r1, r2
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d0c:	0912      	lsrs	r2, r2, #4
 8003d0e:	0452      	lsls	r2, r2, #17
 8003d10:	430a      	orrs	r2, r1
 8003d12:	4930      	ldr	r1, [pc, #192]	; (8003dd4 <HAL_RCC_OscConfig+0x780>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d18:	4b2e      	ldr	r3, [pc, #184]	; (8003dd4 <HAL_RCC_OscConfig+0x780>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a2d      	ldr	r2, [pc, #180]	; (8003dd4 <HAL_RCC_OscConfig+0x780>)
 8003d1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d22:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d24:	4b2b      	ldr	r3, [pc, #172]	; (8003dd4 <HAL_RCC_OscConfig+0x780>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	4a2a      	ldr	r2, [pc, #168]	; (8003dd4 <HAL_RCC_OscConfig+0x780>)
 8003d2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d2e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d30:	f7fd fbc2 	bl	80014b8 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d38:	f7fd fbbe 	bl	80014b8 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e058      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d4a:	4b22      	ldr	r3, [pc, #136]	; (8003dd4 <HAL_RCC_OscConfig+0x780>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0f0      	beq.n	8003d38 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d56:	e050      	b.n	8003dfa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e04f      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d5c:	4b1d      	ldr	r3, [pc, #116]	; (8003dd4 <HAL_RCC_OscConfig+0x780>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d148      	bne.n	8003dfa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d68:	4b1a      	ldr	r3, [pc, #104]	; (8003dd4 <HAL_RCC_OscConfig+0x780>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a19      	ldr	r2, [pc, #100]	; (8003dd4 <HAL_RCC_OscConfig+0x780>)
 8003d6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d74:	4b17      	ldr	r3, [pc, #92]	; (8003dd4 <HAL_RCC_OscConfig+0x780>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	4a16      	ldr	r2, [pc, #88]	; (8003dd4 <HAL_RCC_OscConfig+0x780>)
 8003d7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d80:	f7fd fb9a 	bl	80014b8 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d88:	f7fd fb96 	bl	80014b8 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e030      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d9a:	4b0e      	ldr	r3, [pc, #56]	; (8003dd4 <HAL_RCC_OscConfig+0x780>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0f0      	beq.n	8003d88 <HAL_RCC_OscConfig+0x734>
 8003da6:	e028      	b.n	8003dfa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	2b0c      	cmp	r3, #12
 8003dac:	d023      	beq.n	8003df6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dae:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <HAL_RCC_OscConfig+0x780>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a08      	ldr	r2, [pc, #32]	; (8003dd4 <HAL_RCC_OscConfig+0x780>)
 8003db4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003db8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dba:	f7fd fb7d 	bl	80014b8 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dc0:	e00c      	b.n	8003ddc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc2:	f7fd fb79 	bl	80014b8 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d905      	bls.n	8003ddc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e013      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a8>
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ddc:	4b09      	ldr	r3, [pc, #36]	; (8003e04 <HAL_RCC_OscConfig+0x7b0>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1ec      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003de8:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <HAL_RCC_OscConfig+0x7b0>)
 8003dea:	68da      	ldr	r2, [r3, #12]
 8003dec:	4905      	ldr	r1, [pc, #20]	; (8003e04 <HAL_RCC_OscConfig+0x7b0>)
 8003dee:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <HAL_RCC_OscConfig+0x7b4>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	60cb      	str	r3, [r1, #12]
 8003df4:	e001      	b.n	8003dfa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3720      	adds	r7, #32
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40021000 	.word	0x40021000
 8003e08:	feeefffc 	.word	0xfeeefffc

08003e0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0e7      	b.n	8003ff0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e20:	4b75      	ldr	r3, [pc, #468]	; (8003ff8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d910      	bls.n	8003e50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2e:	4b72      	ldr	r3, [pc, #456]	; (8003ff8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f023 0207 	bic.w	r2, r3, #7
 8003e36:	4970      	ldr	r1, [pc, #448]	; (8003ff8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3e:	4b6e      	ldr	r3, [pc, #440]	; (8003ff8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d001      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e0cf      	b.n	8003ff0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d010      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	4b66      	ldr	r3, [pc, #408]	; (8003ffc <HAL_RCC_ClockConfig+0x1f0>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d908      	bls.n	8003e7e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e6c:	4b63      	ldr	r3, [pc, #396]	; (8003ffc <HAL_RCC_ClockConfig+0x1f0>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	4960      	ldr	r1, [pc, #384]	; (8003ffc <HAL_RCC_ClockConfig+0x1f0>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d04c      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b03      	cmp	r3, #3
 8003e90:	d107      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e92:	4b5a      	ldr	r3, [pc, #360]	; (8003ffc <HAL_RCC_ClockConfig+0x1f0>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d121      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e0a6      	b.n	8003ff0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d107      	bne.n	8003eba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eaa:	4b54      	ldr	r3, [pc, #336]	; (8003ffc <HAL_RCC_ClockConfig+0x1f0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d115      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e09a      	b.n	8003ff0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d107      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ec2:	4b4e      	ldr	r3, [pc, #312]	; (8003ffc <HAL_RCC_ClockConfig+0x1f0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d109      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e08e      	b.n	8003ff0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ed2:	4b4a      	ldr	r3, [pc, #296]	; (8003ffc <HAL_RCC_ClockConfig+0x1f0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e086      	b.n	8003ff0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ee2:	4b46      	ldr	r3, [pc, #280]	; (8003ffc <HAL_RCC_ClockConfig+0x1f0>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f023 0203 	bic.w	r2, r3, #3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	4943      	ldr	r1, [pc, #268]	; (8003ffc <HAL_RCC_ClockConfig+0x1f0>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ef4:	f7fd fae0 	bl	80014b8 <HAL_GetTick>
 8003ef8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efa:	e00a      	b.n	8003f12 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003efc:	f7fd fadc 	bl	80014b8 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e06e      	b.n	8003ff0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f12:	4b3a      	ldr	r3, [pc, #232]	; (8003ffc <HAL_RCC_ClockConfig+0x1f0>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 020c 	and.w	r2, r3, #12
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d1eb      	bne.n	8003efc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d010      	beq.n	8003f52 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	4b31      	ldr	r3, [pc, #196]	; (8003ffc <HAL_RCC_ClockConfig+0x1f0>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d208      	bcs.n	8003f52 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f40:	4b2e      	ldr	r3, [pc, #184]	; (8003ffc <HAL_RCC_ClockConfig+0x1f0>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	492b      	ldr	r1, [pc, #172]	; (8003ffc <HAL_RCC_ClockConfig+0x1f0>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f52:	4b29      	ldr	r3, [pc, #164]	; (8003ff8 <HAL_RCC_ClockConfig+0x1ec>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0307 	and.w	r3, r3, #7
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d210      	bcs.n	8003f82 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f60:	4b25      	ldr	r3, [pc, #148]	; (8003ff8 <HAL_RCC_ClockConfig+0x1ec>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f023 0207 	bic.w	r2, r3, #7
 8003f68:	4923      	ldr	r1, [pc, #140]	; (8003ff8 <HAL_RCC_ClockConfig+0x1ec>)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f70:	4b21      	ldr	r3, [pc, #132]	; (8003ff8 <HAL_RCC_ClockConfig+0x1ec>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d001      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e036      	b.n	8003ff0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0304 	and.w	r3, r3, #4
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d008      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f8e:	4b1b      	ldr	r3, [pc, #108]	; (8003ffc <HAL_RCC_ClockConfig+0x1f0>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	4918      	ldr	r1, [pc, #96]	; (8003ffc <HAL_RCC_ClockConfig+0x1f0>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d009      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fac:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <HAL_RCC_ClockConfig+0x1f0>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	4910      	ldr	r1, [pc, #64]	; (8003ffc <HAL_RCC_ClockConfig+0x1f0>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fc0:	f000 f824 	bl	800400c <HAL_RCC_GetSysClockFreq>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	4b0d      	ldr	r3, [pc, #52]	; (8003ffc <HAL_RCC_ClockConfig+0x1f0>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	091b      	lsrs	r3, r3, #4
 8003fcc:	f003 030f 	and.w	r3, r3, #15
 8003fd0:	490b      	ldr	r1, [pc, #44]	; (8004000 <HAL_RCC_ClockConfig+0x1f4>)
 8003fd2:	5ccb      	ldrb	r3, [r1, r3]
 8003fd4:	f003 031f 	and.w	r3, r3, #31
 8003fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fdc:	4a09      	ldr	r2, [pc, #36]	; (8004004 <HAL_RCC_ClockConfig+0x1f8>)
 8003fde:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003fe0:	4b09      	ldr	r3, [pc, #36]	; (8004008 <HAL_RCC_ClockConfig+0x1fc>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fd fa17 	bl	8001418 <HAL_InitTick>
 8003fea:	4603      	mov	r3, r0
 8003fec:	72fb      	strb	r3, [r7, #11]

  return status;
 8003fee:	7afb      	ldrb	r3, [r7, #11]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40022000 	.word	0x40022000
 8003ffc:	40021000 	.word	0x40021000
 8004000:	08004ca0 	.word	0x08004ca0
 8004004:	20000000 	.word	0x20000000
 8004008:	20000004 	.word	0x20000004

0800400c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800400c:	b480      	push	{r7}
 800400e:	b089      	sub	sp, #36	; 0x24
 8004010:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004012:	2300      	movs	r3, #0
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	2300      	movs	r3, #0
 8004018:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800401a:	4b3e      	ldr	r3, [pc, #248]	; (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 030c 	and.w	r3, r3, #12
 8004022:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004024:	4b3b      	ldr	r3, [pc, #236]	; (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f003 0303 	and.w	r3, r3, #3
 800402c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <HAL_RCC_GetSysClockFreq+0x34>
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	2b0c      	cmp	r3, #12
 8004038:	d121      	bne.n	800407e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d11e      	bne.n	800407e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004040:	4b34      	ldr	r3, [pc, #208]	; (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0308 	and.w	r3, r3, #8
 8004048:	2b00      	cmp	r3, #0
 800404a:	d107      	bne.n	800405c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800404c:	4b31      	ldr	r3, [pc, #196]	; (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 800404e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004052:	0a1b      	lsrs	r3, r3, #8
 8004054:	f003 030f 	and.w	r3, r3, #15
 8004058:	61fb      	str	r3, [r7, #28]
 800405a:	e005      	b.n	8004068 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800405c:	4b2d      	ldr	r3, [pc, #180]	; (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	091b      	lsrs	r3, r3, #4
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004068:	4a2b      	ldr	r2, [pc, #172]	; (8004118 <HAL_RCC_GetSysClockFreq+0x10c>)
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004070:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10d      	bne.n	8004094 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800407c:	e00a      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	2b04      	cmp	r3, #4
 8004082:	d102      	bne.n	800408a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004084:	4b25      	ldr	r3, [pc, #148]	; (800411c <HAL_RCC_GetSysClockFreq+0x110>)
 8004086:	61bb      	str	r3, [r7, #24]
 8004088:	e004      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	2b08      	cmp	r3, #8
 800408e:	d101      	bne.n	8004094 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004090:	4b23      	ldr	r3, [pc, #140]	; (8004120 <HAL_RCC_GetSysClockFreq+0x114>)
 8004092:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	2b0c      	cmp	r3, #12
 8004098:	d134      	bne.n	8004104 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800409a:	4b1e      	ldr	r3, [pc, #120]	; (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d003      	beq.n	80040b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	d003      	beq.n	80040b8 <HAL_RCC_GetSysClockFreq+0xac>
 80040b0:	e005      	b.n	80040be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80040b2:	4b1a      	ldr	r3, [pc, #104]	; (800411c <HAL_RCC_GetSysClockFreq+0x110>)
 80040b4:	617b      	str	r3, [r7, #20]
      break;
 80040b6:	e005      	b.n	80040c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80040b8:	4b19      	ldr	r3, [pc, #100]	; (8004120 <HAL_RCC_GetSysClockFreq+0x114>)
 80040ba:	617b      	str	r3, [r7, #20]
      break;
 80040bc:	e002      	b.n	80040c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	617b      	str	r3, [r7, #20]
      break;
 80040c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040c4:	4b13      	ldr	r3, [pc, #76]	; (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	091b      	lsrs	r3, r3, #4
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	3301      	adds	r3, #1
 80040d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040d2:	4b10      	ldr	r3, [pc, #64]	; (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	0a1b      	lsrs	r3, r3, #8
 80040d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	fb03 f202 	mul.w	r2, r3, r2
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040ea:	4b0a      	ldr	r3, [pc, #40]	; (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	0e5b      	lsrs	r3, r3, #25
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	3301      	adds	r3, #1
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004102:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004104:	69bb      	ldr	r3, [r7, #24]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3724      	adds	r7, #36	; 0x24
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40021000 	.word	0x40021000
 8004118:	08004cb0 	.word	0x08004cb0
 800411c:	00f42400 	.word	0x00f42400
 8004120:	007a1200 	.word	0x007a1200

08004124 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800412c:	2300      	movs	r3, #0
 800412e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004130:	4b2a      	ldr	r3, [pc, #168]	; (80041dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800413c:	f7ff fa26 	bl	800358c <HAL_PWREx_GetVoltageRange>
 8004140:	6178      	str	r0, [r7, #20]
 8004142:	e014      	b.n	800416e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004144:	4b25      	ldr	r3, [pc, #148]	; (80041dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004148:	4a24      	ldr	r2, [pc, #144]	; (80041dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800414a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800414e:	6593      	str	r3, [r2, #88]	; 0x58
 8004150:	4b22      	ldr	r3, [pc, #136]	; (80041dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800415c:	f7ff fa16 	bl	800358c <HAL_PWREx_GetVoltageRange>
 8004160:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004162:	4b1e      	ldr	r3, [pc, #120]	; (80041dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004166:	4a1d      	ldr	r2, [pc, #116]	; (80041dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800416c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004174:	d10b      	bne.n	800418e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b80      	cmp	r3, #128	; 0x80
 800417a:	d919      	bls.n	80041b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2ba0      	cmp	r3, #160	; 0xa0
 8004180:	d902      	bls.n	8004188 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004182:	2302      	movs	r3, #2
 8004184:	613b      	str	r3, [r7, #16]
 8004186:	e013      	b.n	80041b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004188:	2301      	movs	r3, #1
 800418a:	613b      	str	r3, [r7, #16]
 800418c:	e010      	b.n	80041b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b80      	cmp	r3, #128	; 0x80
 8004192:	d902      	bls.n	800419a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004194:	2303      	movs	r3, #3
 8004196:	613b      	str	r3, [r7, #16]
 8004198:	e00a      	b.n	80041b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b80      	cmp	r3, #128	; 0x80
 800419e:	d102      	bne.n	80041a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041a0:	2302      	movs	r3, #2
 80041a2:	613b      	str	r3, [r7, #16]
 80041a4:	e004      	b.n	80041b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b70      	cmp	r3, #112	; 0x70
 80041aa:	d101      	bne.n	80041b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041ac:	2301      	movs	r3, #1
 80041ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041b0:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f023 0207 	bic.w	r2, r3, #7
 80041b8:	4909      	ldr	r1, [pc, #36]	; (80041e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	4313      	orrs	r3, r2
 80041be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80041c0:	4b07      	ldr	r3, [pc, #28]	; (80041e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0307 	and.w	r3, r3, #7
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d001      	beq.n	80041d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e000      	b.n	80041d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40021000 	.word	0x40021000
 80041e0:	40022000 	.word	0x40022000

080041e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041ec:	2300      	movs	r3, #0
 80041ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041f0:	2300      	movs	r3, #0
 80041f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d041      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004204:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004208:	d02a      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800420a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800420e:	d824      	bhi.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004210:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004214:	d008      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004216:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800421a:	d81e      	bhi.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00a      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004220:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004224:	d010      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004226:	e018      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004228:	4b86      	ldr	r3, [pc, #536]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	4a85      	ldr	r2, [pc, #532]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800422e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004232:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004234:	e015      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	3304      	adds	r3, #4
 800423a:	2100      	movs	r1, #0
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fabb 	bl	80047b8 <RCCEx_PLLSAI1_Config>
 8004242:	4603      	mov	r3, r0
 8004244:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004246:	e00c      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	3320      	adds	r3, #32
 800424c:	2100      	movs	r1, #0
 800424e:	4618      	mov	r0, r3
 8004250:	f000 fba6 	bl	80049a0 <RCCEx_PLLSAI2_Config>
 8004254:	4603      	mov	r3, r0
 8004256:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004258:	e003      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	74fb      	strb	r3, [r7, #19]
      break;
 800425e:	e000      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004260:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004262:	7cfb      	ldrb	r3, [r7, #19]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10b      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004268:	4b76      	ldr	r3, [pc, #472]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800426a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004276:	4973      	ldr	r1, [pc, #460]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004278:	4313      	orrs	r3, r2
 800427a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800427e:	e001      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004280:	7cfb      	ldrb	r3, [r7, #19]
 8004282:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d041      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004294:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004298:	d02a      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800429a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800429e:	d824      	bhi.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042a4:	d008      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042aa:	d81e      	bhi.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00a      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80042b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042b4:	d010      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80042b6:	e018      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042b8:	4b62      	ldr	r3, [pc, #392]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	4a61      	ldr	r2, [pc, #388]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042c4:	e015      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	3304      	adds	r3, #4
 80042ca:	2100      	movs	r1, #0
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fa73 	bl	80047b8 <RCCEx_PLLSAI1_Config>
 80042d2:	4603      	mov	r3, r0
 80042d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042d6:	e00c      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3320      	adds	r3, #32
 80042dc:	2100      	movs	r1, #0
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fb5e 	bl	80049a0 <RCCEx_PLLSAI2_Config>
 80042e4:	4603      	mov	r3, r0
 80042e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042e8:	e003      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	74fb      	strb	r3, [r7, #19]
      break;
 80042ee:	e000      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80042f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042f2:	7cfb      	ldrb	r3, [r7, #19]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10b      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042f8:	4b52      	ldr	r3, [pc, #328]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004306:	494f      	ldr	r1, [pc, #316]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004308:	4313      	orrs	r3, r2
 800430a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800430e:	e001      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004310:	7cfb      	ldrb	r3, [r7, #19]
 8004312:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 80a0 	beq.w	8004462 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004322:	2300      	movs	r3, #0
 8004324:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004326:	4b47      	ldr	r3, [pc, #284]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004332:	2301      	movs	r3, #1
 8004334:	e000      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004336:	2300      	movs	r3, #0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00d      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800433c:	4b41      	ldr	r3, [pc, #260]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800433e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004340:	4a40      	ldr	r2, [pc, #256]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004346:	6593      	str	r3, [r2, #88]	; 0x58
 8004348:	4b3e      	ldr	r3, [pc, #248]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800434a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004350:	60bb      	str	r3, [r7, #8]
 8004352:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004354:	2301      	movs	r3, #1
 8004356:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004358:	4b3b      	ldr	r3, [pc, #236]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a3a      	ldr	r2, [pc, #232]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800435e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004362:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004364:	f7fd f8a8 	bl	80014b8 <HAL_GetTick>
 8004368:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800436a:	e009      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800436c:	f7fd f8a4 	bl	80014b8 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d902      	bls.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	74fb      	strb	r3, [r7, #19]
        break;
 800437e:	e005      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004380:	4b31      	ldr	r3, [pc, #196]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004388:	2b00      	cmp	r3, #0
 800438a:	d0ef      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800438c:	7cfb      	ldrb	r3, [r7, #19]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d15c      	bne.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004392:	4b2c      	ldr	r3, [pc, #176]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004398:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800439c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d01f      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d019      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043b0:	4b24      	ldr	r3, [pc, #144]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043bc:	4b21      	ldr	r3, [pc, #132]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c2:	4a20      	ldr	r2, [pc, #128]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043cc:	4b1d      	ldr	r3, [pc, #116]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d2:	4a1c      	ldr	r2, [pc, #112]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043dc:	4a19      	ldr	r2, [pc, #100]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d016      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ee:	f7fd f863 	bl	80014b8 <HAL_GetTick>
 80043f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043f4:	e00b      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043f6:	f7fd f85f 	bl	80014b8 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	f241 3288 	movw	r2, #5000	; 0x1388
 8004404:	4293      	cmp	r3, r2
 8004406:	d902      	bls.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	74fb      	strb	r3, [r7, #19]
            break;
 800440c:	e006      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800440e:	4b0d      	ldr	r3, [pc, #52]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d0ec      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800441c:	7cfb      	ldrb	r3, [r7, #19]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10c      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004422:	4b08      	ldr	r3, [pc, #32]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004428:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004432:	4904      	ldr	r1, [pc, #16]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800443a:	e009      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800443c:	7cfb      	ldrb	r3, [r7, #19]
 800443e:	74bb      	strb	r3, [r7, #18]
 8004440:	e006      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004442:	bf00      	nop
 8004444:	40021000 	.word	0x40021000
 8004448:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800444c:	7cfb      	ldrb	r3, [r7, #19]
 800444e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004450:	7c7b      	ldrb	r3, [r7, #17]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d105      	bne.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004456:	4b9e      	ldr	r3, [pc, #632]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445a:	4a9d      	ldr	r2, [pc, #628]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004460:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00a      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800446e:	4b98      	ldr	r3, [pc, #608]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004474:	f023 0203 	bic.w	r2, r3, #3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447c:	4994      	ldr	r1, [pc, #592]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800447e:	4313      	orrs	r3, r2
 8004480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00a      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004490:	4b8f      	ldr	r3, [pc, #572]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004496:	f023 020c 	bic.w	r2, r3, #12
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449e:	498c      	ldr	r1, [pc, #560]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044b2:	4b87      	ldr	r3, [pc, #540]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c0:	4983      	ldr	r1, [pc, #524]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0308 	and.w	r3, r3, #8
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00a      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044d4:	4b7e      	ldr	r3, [pc, #504]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e2:	497b      	ldr	r1, [pc, #492]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0310 	and.w	r3, r3, #16
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044f6:	4b76      	ldr	r3, [pc, #472]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004504:	4972      	ldr	r1, [pc, #456]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004506:	4313      	orrs	r3, r2
 8004508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0320 	and.w	r3, r3, #32
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00a      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004518:	4b6d      	ldr	r3, [pc, #436]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004526:	496a      	ldr	r1, [pc, #424]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800453a:	4b65      	ldr	r3, [pc, #404]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800453c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004540:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004548:	4961      	ldr	r1, [pc, #388]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00a      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800455c:	4b5c      	ldr	r3, [pc, #368]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004562:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800456a:	4959      	ldr	r1, [pc, #356]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800457e:	4b54      	ldr	r3, [pc, #336]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004584:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800458c:	4950      	ldr	r1, [pc, #320]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800458e:	4313      	orrs	r3, r2
 8004590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00a      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045a0:	4b4b      	ldr	r3, [pc, #300]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ae:	4948      	ldr	r1, [pc, #288]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045c2:	4b43      	ldr	r3, [pc, #268]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d0:	493f      	ldr	r1, [pc, #252]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d028      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045e4:	4b3a      	ldr	r3, [pc, #232]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045f2:	4937      	ldr	r1, [pc, #220]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004602:	d106      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004604:	4b32      	ldr	r3, [pc, #200]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	4a31      	ldr	r2, [pc, #196]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800460a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800460e:	60d3      	str	r3, [r2, #12]
 8004610:	e011      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004616:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800461a:	d10c      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3304      	adds	r3, #4
 8004620:	2101      	movs	r1, #1
 8004622:	4618      	mov	r0, r3
 8004624:	f000 f8c8 	bl	80047b8 <RCCEx_PLLSAI1_Config>
 8004628:	4603      	mov	r3, r0
 800462a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800462c:	7cfb      	ldrb	r3, [r7, #19]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004632:	7cfb      	ldrb	r3, [r7, #19]
 8004634:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d028      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004642:	4b23      	ldr	r3, [pc, #140]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004648:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004650:	491f      	ldr	r1, [pc, #124]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004652:	4313      	orrs	r3, r2
 8004654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004660:	d106      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004662:	4b1b      	ldr	r3, [pc, #108]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	4a1a      	ldr	r2, [pc, #104]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800466c:	60d3      	str	r3, [r2, #12]
 800466e:	e011      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004674:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004678:	d10c      	bne.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	3304      	adds	r3, #4
 800467e:	2101      	movs	r1, #1
 8004680:	4618      	mov	r0, r3
 8004682:	f000 f899 	bl	80047b8 <RCCEx_PLLSAI1_Config>
 8004686:	4603      	mov	r3, r0
 8004688:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800468a:	7cfb      	ldrb	r3, [r7, #19]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004690:	7cfb      	ldrb	r3, [r7, #19]
 8004692:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d02b      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046a0:	4b0b      	ldr	r3, [pc, #44]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ae:	4908      	ldr	r1, [pc, #32]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046be:	d109      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046c0:	4b03      	ldr	r3, [pc, #12]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	4a02      	ldr	r2, [pc, #8]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ca:	60d3      	str	r3, [r2, #12]
 80046cc:	e014      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80046ce:	bf00      	nop
 80046d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046dc:	d10c      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3304      	adds	r3, #4
 80046e2:	2101      	movs	r1, #1
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 f867 	bl	80047b8 <RCCEx_PLLSAI1_Config>
 80046ea:	4603      	mov	r3, r0
 80046ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046ee:	7cfb      	ldrb	r3, [r7, #19]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80046f4:	7cfb      	ldrb	r3, [r7, #19]
 80046f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d02f      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004704:	4b2b      	ldr	r3, [pc, #172]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004712:	4928      	ldr	r1, [pc, #160]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800471e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004722:	d10d      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3304      	adds	r3, #4
 8004728:	2102      	movs	r1, #2
 800472a:	4618      	mov	r0, r3
 800472c:	f000 f844 	bl	80047b8 <RCCEx_PLLSAI1_Config>
 8004730:	4603      	mov	r3, r0
 8004732:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004734:	7cfb      	ldrb	r3, [r7, #19]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d014      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800473a:	7cfb      	ldrb	r3, [r7, #19]
 800473c:	74bb      	strb	r3, [r7, #18]
 800473e:	e011      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004744:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004748:	d10c      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3320      	adds	r3, #32
 800474e:	2102      	movs	r1, #2
 8004750:	4618      	mov	r0, r3
 8004752:	f000 f925 	bl	80049a0 <RCCEx_PLLSAI2_Config>
 8004756:	4603      	mov	r3, r0
 8004758:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800475a:	7cfb      	ldrb	r3, [r7, #19]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004760:	7cfb      	ldrb	r3, [r7, #19]
 8004762:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00a      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004770:	4b10      	ldr	r3, [pc, #64]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004776:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800477e:	490d      	ldr	r1, [pc, #52]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00b      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004792:	4b08      	ldr	r3, [pc, #32]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004798:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047a2:	4904      	ldr	r1, [pc, #16]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40021000 	.word	0x40021000

080047b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047c6:	4b75      	ldr	r3, [pc, #468]	; (800499c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d018      	beq.n	8004804 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047d2:	4b72      	ldr	r3, [pc, #456]	; (800499c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f003 0203 	and.w	r2, r3, #3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d10d      	bne.n	80047fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
       ||
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d009      	beq.n	80047fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80047ea:	4b6c      	ldr	r3, [pc, #432]	; (800499c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	091b      	lsrs	r3, r3, #4
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
       ||
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d047      	beq.n	800488e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	73fb      	strb	r3, [r7, #15]
 8004802:	e044      	b.n	800488e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b03      	cmp	r3, #3
 800480a:	d018      	beq.n	800483e <RCCEx_PLLSAI1_Config+0x86>
 800480c:	2b03      	cmp	r3, #3
 800480e:	d825      	bhi.n	800485c <RCCEx_PLLSAI1_Config+0xa4>
 8004810:	2b01      	cmp	r3, #1
 8004812:	d002      	beq.n	800481a <RCCEx_PLLSAI1_Config+0x62>
 8004814:	2b02      	cmp	r3, #2
 8004816:	d009      	beq.n	800482c <RCCEx_PLLSAI1_Config+0x74>
 8004818:	e020      	b.n	800485c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800481a:	4b60      	ldr	r3, [pc, #384]	; (800499c <RCCEx_PLLSAI1_Config+0x1e4>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d11d      	bne.n	8004862 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800482a:	e01a      	b.n	8004862 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800482c:	4b5b      	ldr	r3, [pc, #364]	; (800499c <RCCEx_PLLSAI1_Config+0x1e4>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004834:	2b00      	cmp	r3, #0
 8004836:	d116      	bne.n	8004866 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800483c:	e013      	b.n	8004866 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800483e:	4b57      	ldr	r3, [pc, #348]	; (800499c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10f      	bne.n	800486a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800484a:	4b54      	ldr	r3, [pc, #336]	; (800499c <RCCEx_PLLSAI1_Config+0x1e4>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d109      	bne.n	800486a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800485a:	e006      	b.n	800486a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	73fb      	strb	r3, [r7, #15]
      break;
 8004860:	e004      	b.n	800486c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004862:	bf00      	nop
 8004864:	e002      	b.n	800486c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004866:	bf00      	nop
 8004868:	e000      	b.n	800486c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800486a:	bf00      	nop
    }

    if(status == HAL_OK)
 800486c:	7bfb      	ldrb	r3, [r7, #15]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10d      	bne.n	800488e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004872:	4b4a      	ldr	r3, [pc, #296]	; (800499c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6819      	ldr	r1, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	3b01      	subs	r3, #1
 8004884:	011b      	lsls	r3, r3, #4
 8004886:	430b      	orrs	r3, r1
 8004888:	4944      	ldr	r1, [pc, #272]	; (800499c <RCCEx_PLLSAI1_Config+0x1e4>)
 800488a:	4313      	orrs	r3, r2
 800488c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800488e:	7bfb      	ldrb	r3, [r7, #15]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d17d      	bne.n	8004990 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004894:	4b41      	ldr	r3, [pc, #260]	; (800499c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a40      	ldr	r2, [pc, #256]	; (800499c <RCCEx_PLLSAI1_Config+0x1e4>)
 800489a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800489e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a0:	f7fc fe0a 	bl	80014b8 <HAL_GetTick>
 80048a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048a6:	e009      	b.n	80048bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048a8:	f7fc fe06 	bl	80014b8 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d902      	bls.n	80048bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	73fb      	strb	r3, [r7, #15]
        break;
 80048ba:	e005      	b.n	80048c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048bc:	4b37      	ldr	r3, [pc, #220]	; (800499c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1ef      	bne.n	80048a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d160      	bne.n	8004990 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d111      	bne.n	80048f8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048d4:	4b31      	ldr	r3, [pc, #196]	; (800499c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80048dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6892      	ldr	r2, [r2, #8]
 80048e4:	0211      	lsls	r1, r2, #8
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	68d2      	ldr	r2, [r2, #12]
 80048ea:	0912      	lsrs	r2, r2, #4
 80048ec:	0452      	lsls	r2, r2, #17
 80048ee:	430a      	orrs	r2, r1
 80048f0:	492a      	ldr	r1, [pc, #168]	; (800499c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	610b      	str	r3, [r1, #16]
 80048f6:	e027      	b.n	8004948 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d112      	bne.n	8004924 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048fe:	4b27      	ldr	r3, [pc, #156]	; (800499c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004906:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6892      	ldr	r2, [r2, #8]
 800490e:	0211      	lsls	r1, r2, #8
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6912      	ldr	r2, [r2, #16]
 8004914:	0852      	lsrs	r2, r2, #1
 8004916:	3a01      	subs	r2, #1
 8004918:	0552      	lsls	r2, r2, #21
 800491a:	430a      	orrs	r2, r1
 800491c:	491f      	ldr	r1, [pc, #124]	; (800499c <RCCEx_PLLSAI1_Config+0x1e4>)
 800491e:	4313      	orrs	r3, r2
 8004920:	610b      	str	r3, [r1, #16]
 8004922:	e011      	b.n	8004948 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004924:	4b1d      	ldr	r3, [pc, #116]	; (800499c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800492c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6892      	ldr	r2, [r2, #8]
 8004934:	0211      	lsls	r1, r2, #8
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6952      	ldr	r2, [r2, #20]
 800493a:	0852      	lsrs	r2, r2, #1
 800493c:	3a01      	subs	r2, #1
 800493e:	0652      	lsls	r2, r2, #25
 8004940:	430a      	orrs	r2, r1
 8004942:	4916      	ldr	r1, [pc, #88]	; (800499c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004944:	4313      	orrs	r3, r2
 8004946:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004948:	4b14      	ldr	r3, [pc, #80]	; (800499c <RCCEx_PLLSAI1_Config+0x1e4>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a13      	ldr	r2, [pc, #76]	; (800499c <RCCEx_PLLSAI1_Config+0x1e4>)
 800494e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004952:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004954:	f7fc fdb0 	bl	80014b8 <HAL_GetTick>
 8004958:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800495a:	e009      	b.n	8004970 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800495c:	f7fc fdac 	bl	80014b8 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d902      	bls.n	8004970 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	73fb      	strb	r3, [r7, #15]
          break;
 800496e:	e005      	b.n	800497c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004970:	4b0a      	ldr	r3, [pc, #40]	; (800499c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0ef      	beq.n	800495c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800497c:	7bfb      	ldrb	r3, [r7, #15]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d106      	bne.n	8004990 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004982:	4b06      	ldr	r3, [pc, #24]	; (800499c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004984:	691a      	ldr	r2, [r3, #16]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	4904      	ldr	r1, [pc, #16]	; (800499c <RCCEx_PLLSAI1_Config+0x1e4>)
 800498c:	4313      	orrs	r3, r2
 800498e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004990:	7bfb      	ldrb	r3, [r7, #15]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	40021000 	.word	0x40021000

080049a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049aa:	2300      	movs	r3, #0
 80049ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049ae:	4b6a      	ldr	r3, [pc, #424]	; (8004b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d018      	beq.n	80049ec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80049ba:	4b67      	ldr	r3, [pc, #412]	; (8004b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f003 0203 	and.w	r2, r3, #3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d10d      	bne.n	80049e6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
       ||
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d009      	beq.n	80049e6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80049d2:	4b61      	ldr	r3, [pc, #388]	; (8004b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	091b      	lsrs	r3, r3, #4
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	1c5a      	adds	r2, r3, #1
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
       ||
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d047      	beq.n	8004a76 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	73fb      	strb	r3, [r7, #15]
 80049ea:	e044      	b.n	8004a76 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b03      	cmp	r3, #3
 80049f2:	d018      	beq.n	8004a26 <RCCEx_PLLSAI2_Config+0x86>
 80049f4:	2b03      	cmp	r3, #3
 80049f6:	d825      	bhi.n	8004a44 <RCCEx_PLLSAI2_Config+0xa4>
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d002      	beq.n	8004a02 <RCCEx_PLLSAI2_Config+0x62>
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d009      	beq.n	8004a14 <RCCEx_PLLSAI2_Config+0x74>
 8004a00:	e020      	b.n	8004a44 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a02:	4b55      	ldr	r3, [pc, #340]	; (8004b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d11d      	bne.n	8004a4a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a12:	e01a      	b.n	8004a4a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a14:	4b50      	ldr	r3, [pc, #320]	; (8004b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d116      	bne.n	8004a4e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a24:	e013      	b.n	8004a4e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a26:	4b4c      	ldr	r3, [pc, #304]	; (8004b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10f      	bne.n	8004a52 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a32:	4b49      	ldr	r3, [pc, #292]	; (8004b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d109      	bne.n	8004a52 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a42:	e006      	b.n	8004a52 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	73fb      	strb	r3, [r7, #15]
      break;
 8004a48:	e004      	b.n	8004a54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a4a:	bf00      	nop
 8004a4c:	e002      	b.n	8004a54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a4e:	bf00      	nop
 8004a50:	e000      	b.n	8004a54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a52:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10d      	bne.n	8004a76 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a5a:	4b3f      	ldr	r3, [pc, #252]	; (8004b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6819      	ldr	r1, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	011b      	lsls	r3, r3, #4
 8004a6e:	430b      	orrs	r3, r1
 8004a70:	4939      	ldr	r1, [pc, #228]	; (8004b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a76:	7bfb      	ldrb	r3, [r7, #15]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d167      	bne.n	8004b4c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a7c:	4b36      	ldr	r3, [pc, #216]	; (8004b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a35      	ldr	r2, [pc, #212]	; (8004b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a88:	f7fc fd16 	bl	80014b8 <HAL_GetTick>
 8004a8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a8e:	e009      	b.n	8004aa4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a90:	f7fc fd12 	bl	80014b8 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d902      	bls.n	8004aa4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	73fb      	strb	r3, [r7, #15]
        break;
 8004aa2:	e005      	b.n	8004ab0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004aa4:	4b2c      	ldr	r3, [pc, #176]	; (8004b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1ef      	bne.n	8004a90 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d14a      	bne.n	8004b4c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d111      	bne.n	8004ae0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004abc:	4b26      	ldr	r3, [pc, #152]	; (8004b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6892      	ldr	r2, [r2, #8]
 8004acc:	0211      	lsls	r1, r2, #8
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	68d2      	ldr	r2, [r2, #12]
 8004ad2:	0912      	lsrs	r2, r2, #4
 8004ad4:	0452      	lsls	r2, r2, #17
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	491f      	ldr	r1, [pc, #124]	; (8004b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	614b      	str	r3, [r1, #20]
 8004ade:	e011      	b.n	8004b04 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ae0:	4b1d      	ldr	r3, [pc, #116]	; (8004b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ae8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6892      	ldr	r2, [r2, #8]
 8004af0:	0211      	lsls	r1, r2, #8
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6912      	ldr	r2, [r2, #16]
 8004af6:	0852      	lsrs	r2, r2, #1
 8004af8:	3a01      	subs	r2, #1
 8004afa:	0652      	lsls	r2, r2, #25
 8004afc:	430a      	orrs	r2, r1
 8004afe:	4916      	ldr	r1, [pc, #88]	; (8004b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b04:	4b14      	ldr	r3, [pc, #80]	; (8004b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a13      	ldr	r2, [pc, #76]	; (8004b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b10:	f7fc fcd2 	bl	80014b8 <HAL_GetTick>
 8004b14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b16:	e009      	b.n	8004b2c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b18:	f7fc fcce 	bl	80014b8 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d902      	bls.n	8004b2c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	73fb      	strb	r3, [r7, #15]
          break;
 8004b2a:	e005      	b.n	8004b38 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b2c:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0ef      	beq.n	8004b18 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004b38:	7bfb      	ldrb	r3, [r7, #15]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d106      	bne.n	8004b4c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b3e:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b40:	695a      	ldr	r2, [r3, #20]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	4904      	ldr	r1, [pc, #16]	; (8004b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40021000 	.word	0x40021000

08004b5c <arm_sin_f32>:
 8004b5c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004bdc <arm_sin_f32+0x80>
 8004b60:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004b64:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b6c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004b70:	d504      	bpl.n	8004b7c <arm_sin_f32+0x20>
 8004b72:	ee17 3a90 	vmov	r3, s15
 8004b76:	3b01      	subs	r3, #1
 8004b78:	ee07 3a90 	vmov	s15, r3
 8004b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b80:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004be0 <arm_sin_f32+0x84>
 8004b84:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004b88:	ee20 0a07 	vmul.f32	s0, s0, s14
 8004b8c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8004b90:	ee17 3a90 	vmov	r3, s15
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b9a:	d21a      	bcs.n	8004bd2 <arm_sin_f32+0x76>
 8004b9c:	ee07 3a90 	vmov	s15, r3
 8004ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba4:	1c59      	adds	r1, r3, #1
 8004ba6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004baa:	4a0e      	ldr	r2, [pc, #56]	; (8004be4 <arm_sin_f32+0x88>)
 8004bac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004bb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004bb4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8004bb8:	ed93 7a00 	vldr	s14, [r3]
 8004bbc:	edd2 6a00 	vldr	s13, [r2]
 8004bc0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004bc4:	ee20 0a26 	vmul.f32	s0, s0, s13
 8004bc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bcc:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004bd0:	4770      	bx	lr
 8004bd2:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	2300      	movs	r3, #0
 8004bda:	e7e6      	b.n	8004baa <arm_sin_f32+0x4e>
 8004bdc:	3e22f983 	.word	0x3e22f983
 8004be0:	44000000 	.word	0x44000000
 8004be4:	08004ce0 	.word	0x08004ce0

08004be8 <memset>:
 8004be8:	4402      	add	r2, r0
 8004bea:	4603      	mov	r3, r0
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d100      	bne.n	8004bf2 <memset+0xa>
 8004bf0:	4770      	bx	lr
 8004bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8004bf6:	e7f9      	b.n	8004bec <memset+0x4>

08004bf8 <__libc_init_array>:
 8004bf8:	b570      	push	{r4, r5, r6, lr}
 8004bfa:	4d0d      	ldr	r5, [pc, #52]	; (8004c30 <__libc_init_array+0x38>)
 8004bfc:	4c0d      	ldr	r4, [pc, #52]	; (8004c34 <__libc_init_array+0x3c>)
 8004bfe:	1b64      	subs	r4, r4, r5
 8004c00:	10a4      	asrs	r4, r4, #2
 8004c02:	2600      	movs	r6, #0
 8004c04:	42a6      	cmp	r6, r4
 8004c06:	d109      	bne.n	8004c1c <__libc_init_array+0x24>
 8004c08:	4d0b      	ldr	r5, [pc, #44]	; (8004c38 <__libc_init_array+0x40>)
 8004c0a:	4c0c      	ldr	r4, [pc, #48]	; (8004c3c <__libc_init_array+0x44>)
 8004c0c:	f000 f83c 	bl	8004c88 <_init>
 8004c10:	1b64      	subs	r4, r4, r5
 8004c12:	10a4      	asrs	r4, r4, #2
 8004c14:	2600      	movs	r6, #0
 8004c16:	42a6      	cmp	r6, r4
 8004c18:	d105      	bne.n	8004c26 <__libc_init_array+0x2e>
 8004c1a:	bd70      	pop	{r4, r5, r6, pc}
 8004c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c20:	4798      	blx	r3
 8004c22:	3601      	adds	r6, #1
 8004c24:	e7ee      	b.n	8004c04 <__libc_init_array+0xc>
 8004c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c2a:	4798      	blx	r3
 8004c2c:	3601      	adds	r6, #1
 8004c2e:	e7f2      	b.n	8004c16 <__libc_init_array+0x1e>
 8004c30:	080054e4 	.word	0x080054e4
 8004c34:	080054e4 	.word	0x080054e4
 8004c38:	080054e4 	.word	0x080054e4
 8004c3c:	080054e8 	.word	0x080054e8

08004c40 <roundf>:
 8004c40:	ee10 0a10 	vmov	r0, s0
 8004c44:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8004c48:	3a7f      	subs	r2, #127	; 0x7f
 8004c4a:	2a16      	cmp	r2, #22
 8004c4c:	dc15      	bgt.n	8004c7a <roundf+0x3a>
 8004c4e:	2a00      	cmp	r2, #0
 8004c50:	da08      	bge.n	8004c64 <roundf+0x24>
 8004c52:	3201      	adds	r2, #1
 8004c54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8004c58:	d101      	bne.n	8004c5e <roundf+0x1e>
 8004c5a:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8004c5e:	ee00 3a10 	vmov	s0, r3
 8004c62:	4770      	bx	lr
 8004c64:	4907      	ldr	r1, [pc, #28]	; (8004c84 <roundf+0x44>)
 8004c66:	4111      	asrs	r1, r2
 8004c68:	4208      	tst	r0, r1
 8004c6a:	d0fa      	beq.n	8004c62 <roundf+0x22>
 8004c6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c70:	4113      	asrs	r3, r2
 8004c72:	4403      	add	r3, r0
 8004c74:	ea23 0301 	bic.w	r3, r3, r1
 8004c78:	e7f1      	b.n	8004c5e <roundf+0x1e>
 8004c7a:	2a80      	cmp	r2, #128	; 0x80
 8004c7c:	d1f1      	bne.n	8004c62 <roundf+0x22>
 8004c7e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004c82:	4770      	bx	lr
 8004c84:	007fffff 	.word	0x007fffff

08004c88 <_init>:
 8004c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8a:	bf00      	nop
 8004c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c8e:	bc08      	pop	{r3}
 8004c90:	469e      	mov	lr, r3
 8004c92:	4770      	bx	lr

08004c94 <_fini>:
 8004c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c96:	bf00      	nop
 8004c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c9a:	bc08      	pop	{r3}
 8004c9c:	469e      	mov	lr, r3
 8004c9e:	4770      	bx	lr
