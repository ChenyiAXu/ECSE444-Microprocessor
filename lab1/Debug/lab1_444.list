
lab1_444.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cf4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c70  08003e80  08003e80  00013e80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004af0  08004af0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004af0  08004af0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004af0  08004af0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004af0  08004af0  00014af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004af4  08004af4  00014af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004af8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000070  08004b68  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08004b68  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000095f5  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a1e  00000000  00000000  0002974d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000668  00000000  00000000  0002b170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000402  00000000  00000000  0002b7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024dc9  00000000  00000000  0002bbda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007602  00000000  00000000  000509a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1d12  00000000  00000000  00057fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c54  00000000  00000000  00139cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  0013b90c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000557  00000000  00000000  0013b99f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000030  00000000  00000000  0013bef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003e64 	.word	0x08003e64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08003e64 	.word	0x08003e64

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <NR_Trig>:
 *
 *  Created on: Sep 18, 2023
 *      Author: alice
 */
#include "main.h"
void NR_Trig(float *input_omega, float *phi, float *Xguess, float *Xoutput) {
 8000b40:	b5b0      	push	{r4, r5, r7, lr}
 8000b42:	ed2d 8b02 	vpush	{d8}
 8000b46:	b08e      	sub	sp, #56	; 0x38
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
 8000b50:	603b      	str	r3, [r7, #0]
    int itr, maxmitr;
    float h, x0, x1, allerr, omega, angle, fx, dfx;

    maxmitr = 1234567;
 8000b52:	4b51      	ldr	r3, [pc, #324]	; (8000c98 <NR_Trig+0x158>)
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    x0 = *Xguess; // Initialize x0 to the value pointed to by Xguess
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	633b      	str	r3, [r7, #48]	; 0x30
    omega = *input_omega;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28

    allerr = 0.0001;
 8000b62:	4b4e      	ldr	r3, [pc, #312]	; (8000c9c <NR_Trig+0x15c>)
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24


    // Newton iterations
    for (itr = 1; itr <= maxmitr; itr++) {
 8000b66:	2301      	movs	r3, #1
 8000b68:	637b      	str	r3, [r7, #52]	; 0x34
 8000b6a:	e085      	b.n	8000c78 <NR_Trig+0x138>
        angle = omega * x0 + *phi; // Calculate wx + phi
 8000b6c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000b70:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000b74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	edd3 7a00 	vldr	s15, [r3]
 8000b7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b82:	edc7 7a08 	vstr	s15, [r7, #32]

        fx = pow(x0, 2) - cosf(angle); // Calculate f(x) = x^2 - cos(wx + phi)
 8000b86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b88:	f7ff fc82 	bl	8000490 <__aeabi_f2d>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	460b      	mov	r3, r1
 8000b90:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8000c90 <NR_Trig+0x150>
 8000b94:	ec43 2b10 	vmov	d0, r2, r3
 8000b98:	f001 fc8a 	bl	80024b0 <pow>
 8000b9c:	ec55 4b10 	vmov	r4, r5, d0
 8000ba0:	ed97 0a08 	vldr	s0, [r7, #32]
 8000ba4:	f001 fd12 	bl	80025cc <cosf>
 8000ba8:	ee10 3a10 	vmov	r3, s0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fc6f 	bl	8000490 <__aeabi_f2d>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	4620      	mov	r0, r4
 8000bb8:	4629      	mov	r1, r5
 8000bba:	f7ff fb09 	bl	80001d0 <__aeabi_dsub>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	4610      	mov	r0, r2
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f7ff ff6b 	bl	8000aa0 <__aeabi_d2f>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	61fb      	str	r3, [r7, #28]
        dfx = 2 * x0 + omega * sinf(angle); // Calculate f'(x) = 2x + wsin(wx + phi)
 8000bce:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000bd2:	ee37 8aa7 	vadd.f32	s16, s15, s15
 8000bd6:	ed97 0a08 	vldr	s0, [r7, #32]
 8000bda:	f001 fd3b 	bl	8002654 <sinf>
 8000bde:	eeb0 7a40 	vmov.f32	s14, s0
 8000be2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bea:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000bee:	edc7 7a06 	vstr	s15, [r7, #24]
        h = fx / dfx;
 8000bf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8000bf6:	ed97 7a06 	vldr	s14, [r7, #24]
 8000bfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bfe:	edc7 7a05 	vstr	s15, [r7, #20]
        x1 = x0 - h;
 8000c02:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000c06:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c0e:	edc7 7a04 	vstr	s15, [r7, #16]

        if (fabs(h) < allerr) {
 8000c12:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c16:	eef0 7ae7 	vabs.f32	s15, s15
 8000c1a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000c1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c26:	dd22      	ble.n	8000c6e <NR_Trig+0x12e>
        	 if(cosf(angle) < 0 || itr == maxmitr){
 8000c28:	ed97 0a08 	vldr	s0, [r7, #32]
 8000c2c:	f001 fcce 	bl	80025cc <cosf>
 8000c30:	eef0 7a40 	vmov.f32	s15, s0
 8000c34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c3c:	d421      	bmi.n	8000c82 <NR_Trig+0x142>
 8000c3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d01d      	beq.n	8000c82 <NR_Trig+0x142>
        		 break;
        	 }
        	 if(cosf(angle) == 0){
 8000c46:	ed97 0a08 	vldr	s0, [r7, #32]
 8000c4a:	f001 fcbf 	bl	80025cc <cosf>
 8000c4e:	eef0 7a40 	vmov.f32	s15, s0
 8000c52:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c5a:	d104      	bne.n	8000c66 <NR_Trig+0x126>
        		 *Xoutput = 0;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	f04f 0200 	mov.w	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
        	     return;
 8000c64:	e00d      	b.n	8000c82 <NR_Trig+0x142>
        	 }
            *Xoutput = x0;
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c6a:	601a      	str	r2, [r3, #0]
            return;
 8000c6c:	e009      	b.n	8000c82 <NR_Trig+0x142>
        }
        x0 = x1;
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	633b      	str	r3, [r7, #48]	; 0x30
    for (itr = 1; itr <= maxmitr; itr++) {
 8000c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c74:	3301      	adds	r3, #1
 8000c76:	637b      	str	r3, [r7, #52]	; 0x34
 8000c78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f77f af75 	ble.w	8000b6c <NR_Trig+0x2c>
    }
}
 8000c82:	3738      	adds	r7, #56	; 0x38
 8000c84:	46bd      	mov	sp, r7
 8000c86:	ecbd 8b02 	vpop	{d8}
 8000c8a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c8c:	f3af 8000 	nop.w
 8000c90:	00000000 	.word	0x00000000
 8000c94:	40000000 	.word	0x40000000
 8000c98:	0012d687 	.word	0x0012d687
 8000c9c:	38d1b717 	.word	0x38d1b717

08000ca0 <NR_root>:
 *
 *  Created on: Sep 18, 2023
 *      Author: alice
 */
#include "main.h"
void NR_root(float *input,  float *out,float *Xguess) {
 8000ca0:	b5b0      	push	{r4, r5, r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
	 	int itr, maxmitr;
	    float h, x0, x1, allerr;
	    maxmitr=1000;
 8000cac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb0:	61fb      	str	r3, [r7, #28]
	    x0=*Xguess;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	623b      	str	r3, [r7, #32]
	    allerr=0.0001;
 8000cb8:	4b37      	ldr	r3, [pc, #220]	; (8000d98 <NR_root+0xf8>)
 8000cba:	61bb      	str	r3, [r7, #24]

	    if(*input == 0){
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	edd3 7a00 	vldr	s15, [r3]
 8000cc2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cca:	d104      	bne.n	8000cd6 <NR_root+0x36>
	    	*out = 0;
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	f04f 0200 	mov.w	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
	    	return 0;
 8000cd4:	e056      	b.n	8000d84 <NR_root+0xe4>
	    }
	    for (itr=1; itr<=maxmitr; itr++)
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cda:	e04f      	b.n	8000d7c <NR_root+0xdc>
	    {
	        h=(*input-pow((x0),2))/(-2*x0);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fbd5 	bl	8000490 <__aeabi_f2d>
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	460d      	mov	r5, r1
 8000cea:	6a38      	ldr	r0, [r7, #32]
 8000cec:	f7ff fbd0 	bl	8000490 <__aeabi_f2d>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8000d90 <NR_root+0xf0>
 8000cf8:	ec43 2b10 	vmov	d0, r2, r3
 8000cfc:	f001 fbd8 	bl	80024b0 <pow>
 8000d00:	ec53 2b10 	vmov	r2, r3, d0
 8000d04:	4620      	mov	r0, r4
 8000d06:	4629      	mov	r1, r5
 8000d08:	f7ff fa62 	bl	80001d0 <__aeabi_dsub>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4614      	mov	r4, r2
 8000d12:	461d      	mov	r5, r3
 8000d14:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d18:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8000d1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d20:	ee17 0a90 	vmov	r0, s15
 8000d24:	f7ff fbb4 	bl	8000490 <__aeabi_f2d>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4620      	mov	r0, r4
 8000d2e:	4629      	mov	r1, r5
 8000d30:	f7ff fd30 	bl	8000794 <__aeabi_ddiv>
 8000d34:	4602      	mov	r2, r0
 8000d36:	460b      	mov	r3, r1
 8000d38:	4610      	mov	r0, r2
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	f7ff feb0 	bl	8000aa0 <__aeabi_d2f>
 8000d40:	4603      	mov	r3, r0
 8000d42:	617b      	str	r3, [r7, #20]
	        x1=x0-h;
 8000d44:	ed97 7a08 	vldr	s14, [r7, #32]
 8000d48:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d50:	edc7 7a04 	vstr	s15, [r7, #16]

	        if (fabs(h) < allerr)
 8000d54:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d58:	eef0 7ae7 	vabs.f32	s15, s15
 8000d5c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d68:	dd03      	ble.n	8000d72 <NR_root+0xd2>
	        {
	        	*out=x0;
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	6a3a      	ldr	r2, [r7, #32]
 8000d6e:	601a      	str	r2, [r3, #0]
	            return 0;
 8000d70:	e008      	b.n	8000d84 <NR_root+0xe4>
	        }
	        x0=x1;
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	623b      	str	r3, [r7, #32]
	    for (itr=1; itr<=maxmitr; itr++)
 8000d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d78:	3301      	adds	r3, #1
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	ddab      	ble.n	8000cdc <NR_root+0x3c>
	    }
}
 8000d84:	3728      	adds	r7, #40	; 0x28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bdb0      	pop	{r4, r5, r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	f3af 8000 	nop.w
 8000d90:	00000000 	.word	0x00000000
 8000d94:	40000000 	.word	0x40000000
 8000d98:	38d1b717 	.word	0x38d1b717

08000d9c <armSquareRoot>:
	R1--> pointer to output
	R2--> pointer to Xguess
*/

armSquareRoot:
	PUSH	{R4, R5}
 8000d9c:	b430      	push	{r4, r5}
	VLDR.f32	S0, [R0] 		//input
 8000d9e:	ed90 0a00 	vldr	s0, [r0]
	VLDR.f32	S1, [R1]		//output
 8000da2:	edd1 0a00 	vldr	s1, [r1]
	VLDR.f32	S2, [R2]		//Xguess
 8000da6:	ed92 1a00 	vldr	s2, [r2]

08000daa <input_less_than_0>:

//special cases
input_less_than_0:
	VCMP.f32 S0, #0.0
 8000daa:	eeb5 0a40 	vcmp.f32	s0, #0.0
	VMRS		APSR_nzvc, FPSCR	// load the FP PSR to branch using FP conditions
 8000dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	BLT	 done
 8000db2:	db28      	blt.n	8000e06 <done>
	BEQ	 zero_result
 8000db4:	d02d      	beq.n	8000e12 <zero_result>

08000db6 <input_is_1>:

input_is_1:
	VMOV.f32 S3, #1.0		//S3<-temp value = 1.0
 8000db6:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
	VCMP.f32 S0, S3
 8000dba:	eeb4 0a61 	vcmp.f32	s0, s3
	VMRS		APSR_nzvc, FPSCR	// load the FP PSR to branch using FP conditions
 8000dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	BEQ	one_result
 8000dc2:	d02b      	beq.n	8000e1c <one_result>

08000dc4 <sqrt>:

sqrt:
//constant initialization (2 for division, and 0.001 for alleerrr

	LDR     R4, =0x3c23d70a   // Load the IEEE 754 representation of 0.0001 as a 32-bit integer
 8000dc4:	4c18      	ldr	r4, [pc, #96]	; (8000e28 <one_result+0xc>)
	VMOV    S3, R4           // Convert to a floating-point value
 8000dc6:	ee01 4a90 	vmov	s3, r4
	VMOV.f32 	S4, #0x40000000	//S3<---temp variable = 2
 8000dca:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0

08000dce <newton_loop>:

//newton iteration
newton_loop:
    // Calculate h = (input - x0^2) / (-2 * x0)
    VMOV.f32	S6, S2		// Copy x0 to S6
 8000dce:	eeb0 3a41 	vmov.f32	s6, s2
    VMUL.f32	S6, S6, S6	// Calculate x0^2 and store in S6
 8000dd2:	ee23 3a03 	vmul.f32	s6, s6, s6
    VSUB.f32	S5, S0, S6	// Calculate (input - x0^2) and store in S5  f(x)
 8000dd6:	ee70 2a43 	vsub.f32	s5, s0, s6
    VMUL.f32	S6,	S6, S4	//2 * x0
 8000dda:	ee23 3a02 	vmul.f32	s6, s6, s4

	MOV			R5, #0		//temp variable R5<--=0
 8000dde:	f04f 0500 	mov.w	r5, #0
    VMOV.f32	S7, R5		//0 in float
 8000de2:	ee03 5a90 	vmov	s7, r5
    VSUB.f32	S6, S6, S7	//-2x df(x)
 8000de6:	ee33 3a63 	vsub.f32	s6, s6, s7
    VDIV.f32	S5, S5, S6	//h <- S5
 8000dea:	eec2 2a83 	vdiv.f32	s5, s5, s6

    VSUB.f32	S1, S2, S5	// Update x1 = x0 - h
 8000dee:	ee71 0a62 	vsub.f32	s1, s2, s5


    // Check for convergence: fabs(h) < allerr
    VABS.f32	S7, S5		// Calculate the absolute value of h and store in S7
 8000df2:	eef0 3ae2 	vabs.f32	s7, s5
    VCMP.f32	S7, S3		// Compare with 'allerr'
 8000df6:	eef4 3a61 	vcmp.f32	s7, s3
    VMRS		APSR_nzvc, FPSCR	// load the FP PSR to branch using FP conditions
 8000dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    BLE	done			// If |h| < allerr, exit the loop
 8000dfe:	dd02      	ble.n	8000e06 <done>

    // Update x0 with x1
    VMOV.f32	S2, S1
 8000e00:	eeb0 1a60 	vmov.f32	s2, s1

//back to iterations
	B	newton_loop
 8000e04:	e7e3      	b.n	8000dce <newton_loop>

08000e06 <done>:
done:
	VABS.f32	S1, S1
 8000e06:	eef0 0ae0 	vabs.f32	s1, s1
	VSTR.f32	S1, [R1]		//store output into R1
 8000e0a:	edc1 0a00 	vstr	s1, [r1]
	POP	{R4, R5}
 8000e0e:	bc30      	pop	{r4, r5}
	BX	LR
 8000e10:	4770      	bx	lr

08000e12 <zero_result>:

zero_result:
//input zero--> output zero
	MOV		R4, #0			// R4 <- temperary value = 0
 8000e12:	f04f 0400 	mov.w	r4, #0
	VMOV	S1, R4			//S1<--output = R4 = 0
 8000e16:	ee00 4a90 	vmov	s1, r4
	B		done
 8000e1a:	e7f4      	b.n	8000e06 <done>

08000e1c <one_result>:

one_result:
	MOV		R4, #1			// R4 <- temperary value = 1
 8000e1c:	f04f 0401 	mov.w	r4, #1
	VMOV	S1, R4			//S1<--output = R4 = 1
 8000e20:	ee00 4a90 	vmov	s1, r4
	B		done
 8000e24:	e7ef      	b.n	8000e06 <done>
 8000e26:	0000      	.short	0x0000
	LDR     R4, =0x3c23d70a   // Load the IEEE 754 representation of 0.0001 as a 32-bit integer
 8000e28:	3c23d70a 	.word	0x3c23d70a

08000e2c <asmMax>:
 * R2 = pointer to max
 * R3 = pointer to maxIndex
 */

asmMax:
  PUSH 		{R4, R5}		// saving R4 and R5 according to calling convention
 8000e2c:	b430      	push	{r4, r5}
  VLDR.f32 	S0, [R0]		// max = array[0] (fp register S0 is used for max)
 8000e2e:	ed90 0a00 	vldr	s0, [r0]
  MOV 		R4, #0			// maxIndex = 0 (register R4 is used for maxIndex)
 8000e32:	f04f 0400 	mov.w	r4, #0

08000e36 <loop>:

loop:
  SUBS		R1, R1, #1		// size = size - 1
 8000e36:	3901      	subs	r1, #1
  BLT		done			// loop finishes when R1 < 0
 8000e38:	db0c      	blt.n	8000e54 <done>
  ADD		R5, R0, R1, LSL #2	// calculate base address (in R5) for array element
 8000e3a:	eb00 0581 	add.w	r5, r0, r1, lsl #2
  VLDR.f32	S1, [R5]		// load element into fp register S1 (from address in R5)
 8000e3e:	edd5 0a00 	vldr	s1, [r5]
  VCMP.f32	S0, S1			// compare new element with current max
 8000e42:	eeb4 0a60 	vcmp.f32	s0, s1
  VMRS		APSR_nzvc, FPSCR	// load the FP PSR to branch using FP conditions
 8000e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  BGT		continue		// if max > new element, on to the next element
 8000e4a:	dc02      	bgt.n	8000e52 <continue>
  VMOV.f32	S0, S1			// otherwise, max = new element
 8000e4c:	eeb0 0a60 	vmov.f32	s0, s1
  MOV		R4, R1			// update maxIndex
 8000e50:	460c      	mov	r4, r1

08000e52 <continue>:

continue:
  B		loop			// next iteration
 8000e52:	e7f0      	b.n	8000e36 <loop>

08000e54 <done>:

done:
  VSTR.f32	S0, [R2]		// store max value in the pointer to max variable given
 8000e54:	ed82 0a00 	vstr	s0, [r2]
  STR		R4, [R3]		// store max index in the pointer to maxIndex given
 8000e58:	601c      	str	r4, [r3, #0]
  POP		{R4, R5}		// restore context
 8000e5a:	bc30      	pop	{r4, r5}
  BX LR					// return
 8000e5c:	4770      	bx	lr

08000e5e <cMax>:
 *  Created on: Sep 18, 2023
 *      Author: alice
 */

#include "main.h"
void cMax(float *array, uint32_t size, float *max, uint32_t *maxIndex) {
 8000e5e:	b480      	push	{r7}
 8000e60:	b087      	sub	sp, #28
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	60f8      	str	r0, [r7, #12]
 8000e66:	60b9      	str	r1, [r7, #8]
 8000e68:	607a      	str	r2, [r7, #4]
 8000e6a:	603b      	str	r3, [r7, #0]
	(*max) = array[0];
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	601a      	str	r2, [r3, #0]
	(*maxIndex) = 0;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]

	for (uint32_t i = 1; i < size; i++) {
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	617b      	str	r3, [r7, #20]
 8000e7e:	e01a      	b.n	8000eb6 <cMax+0x58>
		if (array[i] > (*max)) {
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	4413      	add	r3, r2
 8000e88:	ed93 7a00 	vldr	s14, [r3]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	edd3 7a00 	vldr	s15, [r3]
 8000e92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e9a:	dd09      	ble.n	8000eb0 <cMax+0x52>
			(*max) = array[i];
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	68fa      	ldr	r2, [r7, #12]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	601a      	str	r2, [r3, #0]
			(*maxIndex) = i;
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 1; i < size; i++) {
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d3e0      	bcc.n	8000e80 <cMax+0x22>
		} // if
	} // for
} // cMax
 8000ebe:	bf00      	nop
 8000ec0:	bf00      	nop
 8000ec2:	371c      	adds	r7, #28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <cosroot>:
	R2--> pointer to Xguess
	R3--> pointer to output
*/

cosroot:
	PUSH	{R4,R5}
 8000ecc:	b430      	push	{r4, r5}
	//PUSH {lr}
	VLDR.f32	S1, [R0] 		//angle
 8000ece:	edd0 0a00 	vldr	s1, [r0]
	VLDR.f32	S2, [R1]		//w
 8000ed2:	ed91 1a00 	vldr	s2, [r1]
	VLDR.f32	S3, [R2]		//Xguess
 8000ed6:	edd2 1a00 	vldr	s3, [r2]

08000eda <init>:
//special cases


init:
//constant initialization (2 for division, and 0.001 for alleerrr
	MOV		R5 , #1
 8000eda:	f04f 0501 	mov.w	r5, #1
	LDR     R4, =0x3a83126f   // Load the IEEE 754 representation of 0.0001 as a 32-bit integer
 8000ede:	4c21      	ldr	r4, [pc, #132]	; (8000f64 <done+0x10>)
	VMOV    S5, R4           // Convert to a floating-point value
 8000ee0:	ee02 4a90 	vmov	s5, r4

08000ee4 <newton_loop>:
//newton iteration
newton_loop:
    // Calculate h = (input - x0^2) / (-2 * x0)

    //VMOV.f32	S5, S2		// Copy xguess to s5 , imtermidate
    VMUL.f32    S6, S2, S3 //WX//wx
 8000ee4:	ee21 3a21 	vmul.f32	s6, s2, s3
    VADD.f32	S6, S6, S1 //WX+theta
 8000ee8:	ee33 3a20 	vadd.f32	s6, s6, s1
    //vcvt.f32.f64 S0, D0  // Convert the input angle from double to float
    //VPUSH.32	{S0}
    VMOV.f32	S0,S6 // s6 input
 8000eec:	eeb0 0a43 	vmov.f32	s0, s6
	push {lr,r0-r5}
 8000ef0:	b53f      	push	{r0, r1, r2, r3, r4, r5, lr}
    Bl arm_cos_f32 //s0 is cos()
 8000ef2:	f001 fa61 	bl	80023b8 <arm_cos_f32>
    pop {lr,r0-r5}
 8000ef6:	e8bd 403f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, lr}
    VMOV.f32	S7,S0 // s7 is cos
 8000efa:	eef0 3a40 	vmov.f32	s7, s0
   // VPOP.32		{S0}

    //VCOS.f32 	S6, S5     // Compute the cosine USEING S5 INPUT
    VMUL.f32	S8, S3, S3	// Calculate x0^2 and store in S7 , TEMPLATE
 8000efe:	ee21 4aa1 	vmul.f32	s8, s3, s3
    VSUB.f32	S7,	S8,	S7 //x^2-cos() IN S6
 8000f02:	ee74 3a63 	vsub.f32	s7, s8, s7

    //VPUSH.32	{S0}
    VMOV.f32	S0,S6 // s6 input
 8000f06:	eeb0 0a43 	vmov.f32	s0, s6
    push {lr,r0-r5}
 8000f0a:	b53f      	push	{r0, r1, r2, r3, r4, r5, lr}
    Bl arm_sin_f32
 8000f0c:	f001 fa0e 	bl	800232c <arm_sin_f32>
    pop {lr,r0-r5}
 8000f10:	e8bd 403f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, lr}
    VMOV.f32	S8,S0 // s6 is sin
 8000f14:	eeb0 4a40 	vmov.f32	s8, s0
    //VPOP.32		{S0}
	//vsin.f32 	S7, S5  //sin()
	VMUL.f32	S8, S2, S8 //w*sin
 8000f18:	ee21 4a04 	vmul.f32	s8, s2, s8
	VADD.f32	s9, s3, s3 //2x
 8000f1c:	ee71 4aa1 	vadd.f32	s9, s3, s3
	vadd.f32	s9, s8, s9 //2x+wsin
 8000f20:	ee74 4a24 	vadd.f32	s9, s8, s9
	VDIV.F32	s9, s7,	s9 //x^2-cos()/2x+wsin,h
 8000f24:	eec3 4aa4 	vdiv.f32	s9, s7, s9


    VSUB.f32	S3, S3, S9	// Update x1 = x0 - h
 8000f28:	ee71 1ae4 	vsub.f32	s3, s3, s9

    // Check for convergence: fabs(h) < allerr
    VABS.f32	S10, S9		// Calculate the absolute value of h and store in S7
 8000f2c:	eeb0 5ae4 	vabs.f32	s10, s9
    VCMP.f32	S10, S5		// Compare with 'allerr'
 8000f30:	eeb4 5a62 	vcmp.f32	s10, s5
    VMRS		APSR_nzvc, FPSCR	// load the FP PSR to branch using FP conditions
 8000f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr


    BLT	done
 8000f38:	db0c      	blt.n	8000f54 <done>
    //BGE	done		// If |h| < allerr, exit the loop
	ADD	R5,	#1 // add iteration max
 8000f3a:	f105 0501 	add.w	r5, r5, #1
	//VMRS		APSR_nzvc, FPSCR	// load the FP PSR to branch using FP conditions

	CMP R5 , #100 // larger 100 iteration
 8000f3e:	2d64      	cmp	r5, #100	; 0x64
	//VMRS		APSR_nzvc, FPSCR	// load the FP PSR to branch using FP conditions

	BGE exit_loop
 8000f40:	da00      	bge.n	8000f44 <exit_loop>
    // Update x0 with x1


//back to iterations
	B	newton_loop
 8000f42:	e7cf      	b.n	8000ee4 <newton_loop>

08000f44 <exit_loop>:
exit_loop:
	LDR     R5, =0x0   // Load the IEEE 754 representation of 0.0001 as a 32-bit integer
 8000f44:	f04f 0500 	mov.w	r5, #0

	VMOV.F32	S4 , R5 // if no solution return 0
 8000f48:	ee02 5a10 	vmov	s4, r5
	VSTR.f32	S4, [R3]
 8000f4c:	ed83 2a00 	vstr	s4, [r3]
	POP	{R4, R5}
 8000f50:	bc30      	pop	{r4, r5}
	BX	LR
 8000f52:	4770      	bx	lr

08000f54 <done>:

done:
	//VCVT.f32.U32	S2,S2			 //convert S1 from 32-bit unsigned integer to 32-bit float
	//bx lr
	VMOV.f32	S4, S3
 8000f54:	eeb0 2a61 	vmov.f32	s4, s3
	VABS.f32	S4 , S4
 8000f58:	eeb0 2ac2 	vabs.f32	s4, s4
	//VCVT.f32.U32	S2,S2
	//vcvt.F32 Fd, S2
	//vmov.f32 R4 , S2


	VSTR.f32	s4, [R3]		//store output into R17
 8000f5c:	ed83 2a00 	vstr	s4, [r3]
	//LDR     R5, =0x0
	POP	{R4, R5}
 8000f60:	bc30      	pop	{r4, r5}
	//pop {lr}
	BX	LR
 8000f62:	4770      	bx	lr
	LDR     R4, =0x3a83126f   // Load the IEEE 754 representation of 0.0001 as a 32-bit integer
 8000f64:	3a83126f 	.word	0x3a83126f

08000f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f68:	b5b0      	push	{r4, r5, r7, lr}
 8000f6a:	b09c      	sub	sp, #112	; 0x70
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6e:	f000 f9ea 	bl	8001346 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f72:	f000 f8ef 	bl	8001154 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f76:	f000 f93f 	bl	80011f8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // define our variables and array
     float max = 0;
 8000f7a:	f04f 0300 	mov.w	r3, #0
 8000f7e:	647b      	str	r3, [r7, #68]	; 0x44
     uint32_t maxIndex;

     // the max is 88.49 at index 5
     float array[10] = {48.21, 79.48, 24.27, 28.82, 78.24, 88.49, 31.19, 5.52, 82.70, 77.73};
 8000f80:	4b70      	ldr	r3, [pc, #448]	; (8001144 <main+0x1dc>)
 8000f82:	f107 0418 	add.w	r4, r7, #24
 8000f86:	461d      	mov	r5, r3
 8000f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f90:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f94:	e884 0003 	stmia.w	r4, {r0, r1}
     float pout = 1;
 8000f98:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000f9c:	617b      	str	r3, [r7, #20]
     float input = 4;
 8000f9e:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8000fa2:	613b      	str	r3, [r7, #16]
     float Xguess=1.0;
 8000fa4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000fa8:	60fb      	str	r3, [r7, #12]


     //&input_omega, &phi, &Xguess, &Xoutput

     float input_omega = 1.6;
 8000faa:	4b67      	ldr	r3, [pc, #412]	; (8001148 <main+0x1e0>)
 8000fac:	60bb      	str	r3, [r7, #8]
     float phi = 1.5;
 8000fae:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8000fb2:	607b      	str	r3, [r7, #4]
     float Xoutput = 1;
 8000fb4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000fb8:	603b      	str	r3, [r7, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //array max
	  	  	  	  ITM_Port32(31) = 1;
 8000fba:	4b64      	ldr	r3, [pc, #400]	; (800114c <main+0x1e4>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	601a      	str	r2, [r3, #0]
	 		  	  for (uint32_t i=0; i<1000; i++)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000fc4:	e00b      	b.n	8000fde <main+0x76>
	 		  	  {
	 		  		  cMax(&array, 10, &max, &maxIndex);
 8000fc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fca:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000fce:	f107 0018 	add.w	r0, r7, #24
 8000fd2:	210a      	movs	r1, #10
 8000fd4:	f7ff ff43 	bl	8000e5e <cMax>
	 		  	  for (uint32_t i=0; i<1000; i++)
 8000fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fda:	3301      	adds	r3, #1
 8000fdc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fe0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fe4:	d3ef      	bcc.n	8000fc6 <main+0x5e>
	 		  	  }

	 		  	  ITM_Port32(31) = 2;
 8000fe6:	4b59      	ldr	r3, [pc, #356]	; (800114c <main+0x1e4>)
 8000fe8:	2202      	movs	r2, #2
 8000fea:	601a      	str	r2, [r3, #0]
	 		  	  for(uint32_t i=0; i<1000; i++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	66bb      	str	r3, [r7, #104]	; 0x68
 8000ff0:	e00b      	b.n	800100a <main+0xa2>
	 		  	  {
	 		  		 asmMax(&array, 10, &max, &maxIndex);
 8000ff2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ff6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000ffa:	f107 0018 	add.w	r0, r7, #24
 8000ffe:	210a      	movs	r1, #10
 8001000:	f7ff ff14 	bl	8000e2c <asmMax>
	 		  	  for(uint32_t i=0; i<1000; i++)
 8001004:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001006:	3301      	adds	r3, #1
 8001008:	66bb      	str	r3, [r7, #104]	; 0x68
 800100a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800100c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001010:	d3ef      	bcc.n	8000ff2 <main+0x8a>

	 		  	  }
	 		  	  ITM_Port32(31) = 3;
 8001012:	4b4e      	ldr	r3, [pc, #312]	; (800114c <main+0x1e4>)
 8001014:	2203      	movs	r2, #3
 8001016:	601a      	str	r2, [r3, #0]
	 		  	  for(uint32_t i=0; i<1000; i++)
 8001018:	2300      	movs	r3, #0
 800101a:	667b      	str	r3, [r7, #100]	; 0x64
 800101c:	e00b      	b.n	8001036 <main+0xce>
	 		  	  {
	 		  		 arm_max_f32(&array, 10, &max, &maxIndex);
 800101e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001022:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001026:	f107 0018 	add.w	r0, r7, #24
 800102a:	210a      	movs	r1, #10
 800102c:	f001 f912 	bl	8002254 <arm_max_f32>
	 		  	  for(uint32_t i=0; i<1000; i++)
 8001030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001032:	3301      	adds	r3, #1
 8001034:	667b      	str	r3, [r7, #100]	; 0x64
 8001036:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001038:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800103c:	d3ef      	bcc.n	800101e <main+0xb6>

	 		  	  }

	 		  	  //square root
	 		  	  ITM_Port32(31) = 4;
 800103e:	4b43      	ldr	r3, [pc, #268]	; (800114c <main+0x1e4>)
 8001040:	2204      	movs	r2, #4
 8001042:	601a      	str	r2, [r3, #0]
	 		  	  for(uint32_t i = 0; i<1000; i++)
 8001044:	2300      	movs	r3, #0
 8001046:	663b      	str	r3, [r7, #96]	; 0x60
 8001048:	e01d      	b.n	8001086 <main+0x11e>
 800104a:	4b41      	ldr	r3, [pc, #260]	; (8001150 <main+0x1e8>)
 800104c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001054:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001058:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800105c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001060:	db09      	blt.n	8001076 <main+0x10e>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8001062:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8001066:	f001 fa93 	bl	8002590 <sqrtf>
 800106a:	eef0 7a40 	vmov.f32	s15, s0
 800106e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001070:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8001074:	e004      	b.n	8001080 <main+0x118>
    }
    else
    {
      *pOut = 0.0f;
 8001076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800107e:	bf00      	nop
 8001080:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001082:	3301      	adds	r3, #1
 8001084:	663b      	str	r3, [r7, #96]	; 0x60
 8001086:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001088:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800108c:	d3dd      	bcc.n	800104a <main+0xe2>
	 		  	  {
	 		  		 arm_sqrt_f32 (9 ,&pout);
	 		  	  }
	 		  	  //in C
	 		  	 ITM_Port32(31) = 5;
 800108e:	4b2f      	ldr	r3, [pc, #188]	; (800114c <main+0x1e4>)
 8001090:	2205      	movs	r2, #5
 8001092:	601a      	str	r2, [r3, #0]
	 		  	 for(uint32_t i = 0; i<1000; i++)
 8001094:	2300      	movs	r3, #0
 8001096:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001098:	e00b      	b.n	80010b2 <main+0x14a>
	 		  	 {
	 		  		 NR_root(&input,&pout,&Xguess);
 800109a:	f107 020c 	add.w	r2, r7, #12
 800109e:	f107 0114 	add.w	r1, r7, #20
 80010a2:	f107 0310 	add.w	r3, r7, #16
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fdfa 	bl	8000ca0 <NR_root>
	 		  	 for(uint32_t i = 0; i<1000; i++)
 80010ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010ae:	3301      	adds	r3, #1
 80010b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80010b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010b8:	d3ef      	bcc.n	800109a <main+0x132>
	 		  	 }

	 		  	 ITM_Port32(31) = 6;
 80010ba:	4b24      	ldr	r3, [pc, #144]	; (800114c <main+0x1e4>)
 80010bc:	2206      	movs	r2, #6
 80010be:	601a      	str	r2, [r3, #0]
	 		  	 for(uint32_t i = 0; i<1000; i++)
 80010c0:	2300      	movs	r3, #0
 80010c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80010c4:	e00b      	b.n	80010de <main+0x176>
	 		  	 {
	 		  		armSquareRoot(&input,&pout,&Xguess);
 80010c6:	f107 020c 	add.w	r2, r7, #12
 80010ca:	f107 0114 	add.w	r1, r7, #20
 80010ce:	f107 0310 	add.w	r3, r7, #16
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fe62 	bl	8000d9c <armSquareRoot>
	 		  	 for(uint32_t i = 0; i<1000; i++)
 80010d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010da:	3301      	adds	r3, #1
 80010dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80010de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010e4:	d3ef      	bcc.n	80010c6 <main+0x15e>
	 		  	 }

	 		  	 //Trig
	 		  	 ITM_Port32(31)= 7;
 80010e6:	4b19      	ldr	r3, [pc, #100]	; (800114c <main+0x1e4>)
 80010e8:	2207      	movs	r2, #7
 80010ea:	601a      	str	r2, [r3, #0]
	 		  	 for(uint32_t i = 0; i<1000; i++)
 80010ec:	2300      	movs	r3, #0
 80010ee:	657b      	str	r3, [r7, #84]	; 0x54
 80010f0:	e00a      	b.n	8001108 <main+0x1a0>
	 		  	 {
	 		  		NR_Trig(&input_omega, &phi, &Xguess, &Xoutput);
 80010f2:	463b      	mov	r3, r7
 80010f4:	f107 020c 	add.w	r2, r7, #12
 80010f8:	1d39      	adds	r1, r7, #4
 80010fa:	f107 0008 	add.w	r0, r7, #8
 80010fe:	f7ff fd1f 	bl	8000b40 <NR_Trig>
	 		  	 for(uint32_t i = 0; i<1000; i++)
 8001102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001104:	3301      	adds	r3, #1
 8001106:	657b      	str	r3, [r7, #84]	; 0x54
 8001108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800110a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800110e:	d3f0      	bcc.n	80010f2 <main+0x18a>
	 		  	 }

	 		  	 ITM_Port32(31)= 8;
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <main+0x1e4>)
 8001112:	2208      	movs	r2, #8
 8001114:	601a      	str	r2, [r3, #0]
	 		  	 for(uint32_t i = 0; i<1000; i++)
 8001116:	2300      	movs	r3, #0
 8001118:	653b      	str	r3, [r7, #80]	; 0x50
 800111a:	e00a      	b.n	8001132 <main+0x1ca>
	 		  	 {

	 		  	    cosroot(&phi, &input_omega , &Xguess, &Xoutput );
 800111c:	463b      	mov	r3, r7
 800111e:	f107 020c 	add.w	r2, r7, #12
 8001122:	f107 0108 	add.w	r1, r7, #8
 8001126:	1d38      	adds	r0, r7, #4
 8001128:	f7ff fed0 	bl	8000ecc <cosroot>
	 		  	 for(uint32_t i = 0; i<1000; i++)
 800112c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800112e:	3301      	adds	r3, #1
 8001130:	653b      	str	r3, [r7, #80]	; 0x50
 8001132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001134:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001138:	d3f0      	bcc.n	800111c <main+0x1b4>
	 		  	 }
	 		  	 ITM_Port32(31) = 9;
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <main+0x1e4>)
 800113c:	2209      	movs	r2, #9
 800113e:	601a      	str	r2, [r3, #0]
	  	  	  	  ITM_Port32(31) = 1;
 8001140:	e73b      	b.n	8000fba <main+0x52>
 8001142:	bf00      	nop
 8001144:	08003e80 	.word	0x08003e80
 8001148:	3fcccccd 	.word	0x3fcccccd
 800114c:	e000007c 	.word	0xe000007c
 8001150:	41100000 	.word	0x41100000

08001154 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b096      	sub	sp, #88	; 0x58
 8001158:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	2244      	movs	r2, #68	; 0x44
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f001 f972 	bl	800244c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001168:	463b      	mov	r3, r7
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001176:	f44f 7000 	mov.w	r0, #512	; 0x200
 800117a:	f000 fa4d 	bl	8001618 <HAL_PWREx_ControlVoltageScaling>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001184:	f000 f850 	bl	8001228 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001188:	2310      	movs	r3, #16
 800118a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800118c:	2301      	movs	r3, #1
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001194:	2360      	movs	r3, #96	; 0x60
 8001196:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001198:	2302      	movs	r3, #2
 800119a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800119c:	2301      	movs	r3, #1
 800119e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011a0:	2301      	movs	r3, #1
 80011a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80011a4:	2328      	movs	r3, #40	; 0x28
 80011a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011a8:	2307      	movs	r3, #7
 80011aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011ac:	2302      	movs	r3, #2
 80011ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011b0:	2302      	movs	r3, #2
 80011b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 fa83 	bl	80016c4 <HAL_RCC_OscConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80011c4:	f000 f830 	bl	8001228 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c8:	230f      	movs	r3, #15
 80011ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011cc:	2303      	movs	r3, #3
 80011ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d8:	2300      	movs	r3, #0
 80011da:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011dc:	463b      	mov	r3, r7
 80011de:	2104      	movs	r1, #4
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 fe4b 	bl	8001e7c <HAL_RCC_ClockConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011ec:	f000 f81c 	bl	8001228 <Error_Handler>
  }
}
 80011f0:	bf00      	nop
 80011f2:	3758      	adds	r7, #88	; 0x58
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_GPIO_Init+0x2c>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	4a08      	ldr	r2, [pc, #32]	; (8001224 <MX_GPIO_Init+0x2c>)
 8001204:	f043 0302 	orr.w	r3, r3, #2
 8001208:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_GPIO_Init+0x2c>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000

08001228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800122c:	b672      	cpsid	i
}
 800122e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001230:	e7fe      	b.n	8001230 <Error_Handler+0x8>
	...

08001234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123a:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <HAL_MspInit+0x44>)
 800123c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800123e:	4a0e      	ldr	r2, [pc, #56]	; (8001278 <HAL_MspInit+0x44>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6613      	str	r3, [r2, #96]	; 0x60
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <HAL_MspInit+0x44>)
 8001248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <HAL_MspInit+0x44>)
 8001254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001256:	4a08      	ldr	r2, [pc, #32]	; (8001278 <HAL_MspInit+0x44>)
 8001258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125c:	6593      	str	r3, [r2, #88]	; 0x58
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_MspInit+0x44>)
 8001260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000

0800127c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <NMI_Handler+0x4>

08001282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001286:	e7fe      	b.n	8001286 <HardFault_Handler+0x4>

08001288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800128c:	e7fe      	b.n	800128c <MemManage_Handler+0x4>

0800128e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <BusFault_Handler+0x4>

08001294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <UsageFault_Handler+0x4>

0800129a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c8:	f000 f892 	bl	80013f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <SystemInit+0x20>)
 80012d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012da:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <SystemInit+0x20>)
 80012dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800132c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012f8:	f7ff ffea 	bl	80012d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012fc:	480c      	ldr	r0, [pc, #48]	; (8001330 <LoopForever+0x6>)
  ldr r1, =_edata
 80012fe:	490d      	ldr	r1, [pc, #52]	; (8001334 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001300:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <LoopForever+0xe>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001304:	e002      	b.n	800130c <LoopCopyDataInit>

08001306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130a:	3304      	adds	r3, #4

0800130c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800130c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001310:	d3f9      	bcc.n	8001306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001312:	4a0a      	ldr	r2, [pc, #40]	; (800133c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001314:	4c0a      	ldr	r4, [pc, #40]	; (8001340 <LoopForever+0x16>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001318:	e001      	b.n	800131e <LoopFillZerobss>

0800131a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800131c:	3204      	adds	r2, #4

0800131e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001320:	d3fb      	bcc.n	800131a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001322:	f001 f8a1 	bl	8002468 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001326:	f7ff fe1f 	bl	8000f68 <main>

0800132a <LoopForever>:

LoopForever:
    b LoopForever
 800132a:	e7fe      	b.n	800132a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800132c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001334:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001338:	08004af8 	.word	0x08004af8
  ldr r2, =_sbss
 800133c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001340:	200001c8 	.word	0x200001c8

08001344 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001344:	e7fe      	b.n	8001344 <ADC1_2_IRQHandler>

08001346 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800134c:	2300      	movs	r3, #0
 800134e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001350:	2003      	movs	r0, #3
 8001352:	f000 f91f 	bl	8001594 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001356:	2000      	movs	r0, #0
 8001358:	f000 f80e 	bl	8001378 <HAL_InitTick>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d002      	beq.n	8001368 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	71fb      	strb	r3, [r7, #7]
 8001366:	e001      	b.n	800136c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001368:	f7ff ff64 	bl	8001234 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800136c:	79fb      	ldrb	r3, [r7, #7]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001380:	2300      	movs	r3, #0
 8001382:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001384:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <HAL_InitTick+0x6c>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d023      	beq.n	80013d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800138c:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <HAL_InitTick+0x70>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <HAL_InitTick+0x6c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4619      	mov	r1, r3
 8001396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139a:	fbb3 f3f1 	udiv	r3, r3, r1
 800139e:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 f91d 	bl	80015e2 <HAL_SYSTICK_Config>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d10f      	bne.n	80013ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b0f      	cmp	r3, #15
 80013b2:	d809      	bhi.n	80013c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b4:	2200      	movs	r2, #0
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295
 80013bc:	f000 f8f5 	bl	80015aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013c0:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <HAL_InitTick+0x74>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	e007      	b.n	80013d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	73fb      	strb	r3, [r7, #15]
 80013cc:	e004      	b.n	80013d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	73fb      	strb	r3, [r7, #15]
 80013d2:	e001      	b.n	80013d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000008 	.word	0x20000008
 80013e8:	20000000 	.word	0x20000000
 80013ec:	20000004 	.word	0x20000004

080013f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_IncTick+0x20>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_IncTick+0x24>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <HAL_IncTick+0x24>)
 8001402:	6013      	str	r3, [r2, #0]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000008 	.word	0x20000008
 8001414:	2000008c 	.word	0x2000008c

08001418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return uwTick;
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <HAL_GetTick+0x14>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	2000008c 	.word	0x2000008c

08001430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <__NVIC_SetPriorityGrouping+0x44>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800144c:	4013      	ands	r3, r2
 800144e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001458:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800145c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001462:	4a04      	ldr	r2, [pc, #16]	; (8001474 <__NVIC_SetPriorityGrouping+0x44>)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	60d3      	str	r3, [r2, #12]
}
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <__NVIC_GetPriorityGrouping+0x18>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	f003 0307 	and.w	r3, r3, #7
}
 8001486:	4618      	mov	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	6039      	str	r1, [r7, #0]
 800149e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	db0a      	blt.n	80014be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	490c      	ldr	r1, [pc, #48]	; (80014e0 <__NVIC_SetPriority+0x4c>)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	0112      	lsls	r2, r2, #4
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	440b      	add	r3, r1
 80014b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014bc:	e00a      	b.n	80014d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4908      	ldr	r1, [pc, #32]	; (80014e4 <__NVIC_SetPriority+0x50>)
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	3b04      	subs	r3, #4
 80014cc:	0112      	lsls	r2, r2, #4
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	440b      	add	r3, r1
 80014d2:	761a      	strb	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000e100 	.word	0xe000e100
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b089      	sub	sp, #36	; 0x24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f1c3 0307 	rsb	r3, r3, #7
 8001502:	2b04      	cmp	r3, #4
 8001504:	bf28      	it	cs
 8001506:	2304      	movcs	r3, #4
 8001508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3304      	adds	r3, #4
 800150e:	2b06      	cmp	r3, #6
 8001510:	d902      	bls.n	8001518 <NVIC_EncodePriority+0x30>
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3b03      	subs	r3, #3
 8001516:	e000      	b.n	800151a <NVIC_EncodePriority+0x32>
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	f04f 32ff 	mov.w	r2, #4294967295
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43da      	mvns	r2, r3
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	401a      	ands	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001530:	f04f 31ff 	mov.w	r1, #4294967295
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	43d9      	mvns	r1, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	4313      	orrs	r3, r2
         );
}
 8001542:	4618      	mov	r0, r3
 8001544:	3724      	adds	r7, #36	; 0x24
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3b01      	subs	r3, #1
 800155c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001560:	d301      	bcc.n	8001566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001562:	2301      	movs	r3, #1
 8001564:	e00f      	b.n	8001586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001566:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <SysTick_Config+0x40>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800156e:	210f      	movs	r1, #15
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	f7ff ff8e 	bl	8001494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <SysTick_Config+0x40>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800157e:	4b04      	ldr	r3, [pc, #16]	; (8001590 <SysTick_Config+0x40>)
 8001580:	2207      	movs	r2, #7
 8001582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	e000e010 	.word	0xe000e010

08001594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ff47 	bl	8001430 <__NVIC_SetPriorityGrouping>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b086      	sub	sp, #24
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
 80015b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015bc:	f7ff ff5c 	bl	8001478 <__NVIC_GetPriorityGrouping>
 80015c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	68b9      	ldr	r1, [r7, #8]
 80015c6:	6978      	ldr	r0, [r7, #20]
 80015c8:	f7ff ff8e 	bl	80014e8 <NVIC_EncodePriority>
 80015cc:	4602      	mov	r2, r0
 80015ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff5d 	bl	8001494 <__NVIC_SetPriority>
}
 80015da:	bf00      	nop
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff ffb0 	bl	8001550 <SysTick_Config>
 80015f0:	4603      	mov	r3, r0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <HAL_PWREx_GetVoltageRange+0x18>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	40007000 	.word	0x40007000

08001618 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001626:	d130      	bne.n	800168a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001628:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001634:	d038      	beq.n	80016a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001636:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800163e:	4a1e      	ldr	r2, [pc, #120]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001640:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001644:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001646:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2232      	movs	r2, #50	; 0x32
 800164c:	fb02 f303 	mul.w	r3, r2, r3
 8001650:	4a1b      	ldr	r2, [pc, #108]	; (80016c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001652:	fba2 2303 	umull	r2, r3, r2, r3
 8001656:	0c9b      	lsrs	r3, r3, #18
 8001658:	3301      	adds	r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800165c:	e002      	b.n	8001664 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	3b01      	subs	r3, #1
 8001662:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001664:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800166c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001670:	d102      	bne.n	8001678 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f2      	bne.n	800165e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001684:	d110      	bne.n	80016a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e00f      	b.n	80016aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001696:	d007      	beq.n	80016a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016a0:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40007000 	.word	0x40007000
 80016bc:	20000000 	.word	0x20000000
 80016c0:	431bde83 	.word	0x431bde83

080016c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e3ca      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016d6:	4b97      	ldr	r3, [pc, #604]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016e0:	4b94      	ldr	r3, [pc, #592]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0310 	and.w	r3, r3, #16
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 80e4 	beq.w	80018c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d007      	beq.n	800170e <HAL_RCC_OscConfig+0x4a>
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	2b0c      	cmp	r3, #12
 8001702:	f040 808b 	bne.w	800181c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	2b01      	cmp	r3, #1
 800170a:	f040 8087 	bne.w	800181c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800170e:	4b89      	ldr	r3, [pc, #548]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d005      	beq.n	8001726 <HAL_RCC_OscConfig+0x62>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e3a2      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a1a      	ldr	r2, [r3, #32]
 800172a:	4b82      	ldr	r3, [pc, #520]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	2b00      	cmp	r3, #0
 8001734:	d004      	beq.n	8001740 <HAL_RCC_OscConfig+0x7c>
 8001736:	4b7f      	ldr	r3, [pc, #508]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800173e:	e005      	b.n	800174c <HAL_RCC_OscConfig+0x88>
 8001740:	4b7c      	ldr	r3, [pc, #496]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 8001742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001746:	091b      	lsrs	r3, r3, #4
 8001748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800174c:	4293      	cmp	r3, r2
 800174e:	d223      	bcs.n	8001798 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	4618      	mov	r0, r3
 8001756:	f000 fd1d 	bl	8002194 <RCC_SetFlashLatencyFromMSIRange>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e383      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001764:	4b73      	ldr	r3, [pc, #460]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a72      	ldr	r2, [pc, #456]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 800176a:	f043 0308 	orr.w	r3, r3, #8
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	4b70      	ldr	r3, [pc, #448]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	496d      	ldr	r1, [pc, #436]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 800177e:	4313      	orrs	r3, r2
 8001780:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001782:	4b6c      	ldr	r3, [pc, #432]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	4968      	ldr	r1, [pc, #416]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 8001792:	4313      	orrs	r3, r2
 8001794:	604b      	str	r3, [r1, #4]
 8001796:	e025      	b.n	80017e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001798:	4b66      	ldr	r3, [pc, #408]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a65      	ldr	r2, [pc, #404]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 800179e:	f043 0308 	orr.w	r3, r3, #8
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	4b63      	ldr	r3, [pc, #396]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	4960      	ldr	r1, [pc, #384]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017b6:	4b5f      	ldr	r3, [pc, #380]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	021b      	lsls	r3, r3, #8
 80017c4:	495b      	ldr	r1, [pc, #364]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d109      	bne.n	80017e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f000 fcdd 	bl	8002194 <RCC_SetFlashLatencyFromMSIRange>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e343      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017e4:	f000 fc4a 	bl	800207c <HAL_RCC_GetSysClockFreq>
 80017e8:	4602      	mov	r2, r0
 80017ea:	4b52      	ldr	r3, [pc, #328]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	091b      	lsrs	r3, r3, #4
 80017f0:	f003 030f 	and.w	r3, r3, #15
 80017f4:	4950      	ldr	r1, [pc, #320]	; (8001938 <HAL_RCC_OscConfig+0x274>)
 80017f6:	5ccb      	ldrb	r3, [r1, r3]
 80017f8:	f003 031f 	and.w	r3, r3, #31
 80017fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001800:	4a4e      	ldr	r2, [pc, #312]	; (800193c <HAL_RCC_OscConfig+0x278>)
 8001802:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001804:	4b4e      	ldr	r3, [pc, #312]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fdb5 	bl	8001378 <HAL_InitTick>
 800180e:	4603      	mov	r3, r0
 8001810:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d052      	beq.n	80018be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	e327      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d032      	beq.n	800188a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001824:	4b43      	ldr	r3, [pc, #268]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a42      	ldr	r2, [pc, #264]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001830:	f7ff fdf2 	bl	8001418 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001838:	f7ff fdee 	bl	8001418 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e310      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800184a:	4b3a      	ldr	r3, [pc, #232]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f0      	beq.n	8001838 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001856:	4b37      	ldr	r3, [pc, #220]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a36      	ldr	r2, [pc, #216]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 800185c:	f043 0308 	orr.w	r3, r3, #8
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	4b34      	ldr	r3, [pc, #208]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	4931      	ldr	r1, [pc, #196]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 8001870:	4313      	orrs	r3, r2
 8001872:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001874:	4b2f      	ldr	r3, [pc, #188]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69db      	ldr	r3, [r3, #28]
 8001880:	021b      	lsls	r3, r3, #8
 8001882:	492c      	ldr	r1, [pc, #176]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 8001884:	4313      	orrs	r3, r2
 8001886:	604b      	str	r3, [r1, #4]
 8001888:	e01a      	b.n	80018c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800188a:	4b2a      	ldr	r3, [pc, #168]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a29      	ldr	r2, [pc, #164]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 8001890:	f023 0301 	bic.w	r3, r3, #1
 8001894:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001896:	f7ff fdbf 	bl	8001418 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800189e:	f7ff fdbb 	bl	8001418 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e2dd      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018b0:	4b20      	ldr	r3, [pc, #128]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f0      	bne.n	800189e <HAL_RCC_OscConfig+0x1da>
 80018bc:	e000      	b.n	80018c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d074      	beq.n	80019b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d005      	beq.n	80018de <HAL_RCC_OscConfig+0x21a>
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	2b0c      	cmp	r3, #12
 80018d6:	d10e      	bne.n	80018f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	2b03      	cmp	r3, #3
 80018dc:	d10b      	bne.n	80018f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d064      	beq.n	80019b4 <HAL_RCC_OscConfig+0x2f0>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d160      	bne.n	80019b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e2ba      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018fe:	d106      	bne.n	800190e <HAL_RCC_OscConfig+0x24a>
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0b      	ldr	r2, [pc, #44]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 8001906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	e026      	b.n	800195c <HAL_RCC_OscConfig+0x298>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001916:	d115      	bne.n	8001944 <HAL_RCC_OscConfig+0x280>
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a05      	ldr	r2, [pc, #20]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 800191e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a02      	ldr	r2, [pc, #8]	; (8001934 <HAL_RCC_OscConfig+0x270>)
 800192a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	e014      	b.n	800195c <HAL_RCC_OscConfig+0x298>
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000
 8001938:	08003ea8 	.word	0x08003ea8
 800193c:	20000000 	.word	0x20000000
 8001940:	20000004 	.word	0x20000004
 8001944:	4ba0      	ldr	r3, [pc, #640]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a9f      	ldr	r2, [pc, #636]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 800194a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b9d      	ldr	r3, [pc, #628]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a9c      	ldr	r2, [pc, #624]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800195a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d013      	beq.n	800198c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001964:	f7ff fd58 	bl	8001418 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800196c:	f7ff fd54 	bl	8001418 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b64      	cmp	r3, #100	; 0x64
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e276      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800197e:	4b92      	ldr	r3, [pc, #584]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0x2a8>
 800198a:	e014      	b.n	80019b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff fd44 	bl	8001418 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001994:	f7ff fd40 	bl	8001418 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b64      	cmp	r3, #100	; 0x64
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e262      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019a6:	4b88      	ldr	r3, [pc, #544]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x2d0>
 80019b2:	e000      	b.n	80019b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d060      	beq.n	8001a84 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d005      	beq.n	80019d4 <HAL_RCC_OscConfig+0x310>
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	2b0c      	cmp	r3, #12
 80019cc:	d119      	bne.n	8001a02 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d116      	bne.n	8001a02 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019d4:	4b7c      	ldr	r3, [pc, #496]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d005      	beq.n	80019ec <HAL_RCC_OscConfig+0x328>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e23f      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ec:	4b76      	ldr	r3, [pc, #472]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	061b      	lsls	r3, r3, #24
 80019fa:	4973      	ldr	r1, [pc, #460]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a00:	e040      	b.n	8001a84 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d023      	beq.n	8001a52 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a0a:	4b6f      	ldr	r3, [pc, #444]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a6e      	ldr	r2, [pc, #440]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a16:	f7ff fcff 	bl	8001418 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a1e:	f7ff fcfb 	bl	8001418 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e21d      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a30:	4b65      	ldr	r3, [pc, #404]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0f0      	beq.n	8001a1e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3c:	4b62      	ldr	r3, [pc, #392]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	061b      	lsls	r3, r3, #24
 8001a4a:	495f      	ldr	r1, [pc, #380]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]
 8001a50:	e018      	b.n	8001a84 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a52:	4b5d      	ldr	r3, [pc, #372]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a5c      	ldr	r2, [pc, #368]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001a58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5e:	f7ff fcdb 	bl	8001418 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a66:	f7ff fcd7 	bl	8001418 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e1f9      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a78:	4b53      	ldr	r3, [pc, #332]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1f0      	bne.n	8001a66 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d03c      	beq.n	8001b0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d01c      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a98:	4b4b      	ldr	r3, [pc, #300]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a9e:	4a4a      	ldr	r2, [pc, #296]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa8:	f7ff fcb6 	bl	8001418 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab0:	f7ff fcb2 	bl	8001418 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e1d4      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ac2:	4b41      	ldr	r3, [pc, #260]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0ef      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x3ec>
 8001ad0:	e01b      	b.n	8001b0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ad2:	4b3d      	ldr	r3, [pc, #244]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad8:	4a3b      	ldr	r2, [pc, #236]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001ada:	f023 0301 	bic.w	r3, r3, #1
 8001ade:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae2:	f7ff fc99 	bl	8001418 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aea:	f7ff fc95 	bl	8001418 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e1b7      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001afc:	4b32      	ldr	r3, [pc, #200]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1ef      	bne.n	8001aea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 80a6 	beq.w	8001c64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b1c:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10d      	bne.n	8001b44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b28:	4b27      	ldr	r3, [pc, #156]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2c:	4a26      	ldr	r2, [pc, #152]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001b2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b32:	6593      	str	r3, [r2, #88]	; 0x58
 8001b34:	4b24      	ldr	r3, [pc, #144]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b40:	2301      	movs	r3, #1
 8001b42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b44:	4b21      	ldr	r3, [pc, #132]	; (8001bcc <HAL_RCC_OscConfig+0x508>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d118      	bne.n	8001b82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b50:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <HAL_RCC_OscConfig+0x508>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a1d      	ldr	r2, [pc, #116]	; (8001bcc <HAL_RCC_OscConfig+0x508>)
 8001b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b5c:	f7ff fc5c 	bl	8001418 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b64:	f7ff fc58 	bl	8001418 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e17a      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <HAL_RCC_OscConfig+0x508>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f0      	beq.n	8001b64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d108      	bne.n	8001b9c <HAL_RCC_OscConfig+0x4d8>
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b90:	4a0d      	ldr	r2, [pc, #52]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b9a:	e029      	b.n	8001bf0 <HAL_RCC_OscConfig+0x52c>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b05      	cmp	r3, #5
 8001ba2:	d115      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x50c>
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001baa:	4a07      	ldr	r2, [pc, #28]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001bac:	f043 0304 	orr.w	r3, r3, #4
 8001bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bba:	4a03      	ldr	r2, [pc, #12]	; (8001bc8 <HAL_RCC_OscConfig+0x504>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bc4:	e014      	b.n	8001bf0 <HAL_RCC_OscConfig+0x52c>
 8001bc6:	bf00      	nop
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40007000 	.word	0x40007000
 8001bd0:	4b9c      	ldr	r3, [pc, #624]	; (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd6:	4a9b      	ldr	r2, [pc, #620]	; (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001bd8:	f023 0301 	bic.w	r3, r3, #1
 8001bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001be0:	4b98      	ldr	r3, [pc, #608]	; (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be6:	4a97      	ldr	r2, [pc, #604]	; (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001be8:	f023 0304 	bic.w	r3, r3, #4
 8001bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d016      	beq.n	8001c26 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf8:	f7ff fc0e 	bl	8001418 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bfe:	e00a      	b.n	8001c16 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c00:	f7ff fc0a 	bl	8001418 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e12a      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c16:	4b8b      	ldr	r3, [pc, #556]	; (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0ed      	beq.n	8001c00 <HAL_RCC_OscConfig+0x53c>
 8001c24:	e015      	b.n	8001c52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c26:	f7ff fbf7 	bl	8001418 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c2c:	e00a      	b.n	8001c44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2e:	f7ff fbf3 	bl	8001418 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e113      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c44:	4b7f      	ldr	r3, [pc, #508]	; (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1ed      	bne.n	8001c2e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c52:	7ffb      	ldrb	r3, [r7, #31]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d105      	bne.n	8001c64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c58:	4b7a      	ldr	r3, [pc, #488]	; (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5c:	4a79      	ldr	r2, [pc, #484]	; (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001c5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c62:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 80fe 	beq.w	8001e6a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	f040 80d0 	bne.w	8001e18 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c78:	4b72      	ldr	r3, [pc, #456]	; (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f003 0203 	and.w	r2, r3, #3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d130      	bne.n	8001cee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	3b01      	subs	r3, #1
 8001c98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d127      	bne.n	8001cee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d11f      	bne.n	8001cee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cb8:	2a07      	cmp	r2, #7
 8001cba:	bf14      	ite	ne
 8001cbc:	2201      	movne	r2, #1
 8001cbe:	2200      	moveq	r2, #0
 8001cc0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d113      	bne.n	8001cee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd0:	085b      	lsrs	r3, r3, #1
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d109      	bne.n	8001cee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	085b      	lsrs	r3, r3, #1
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d06e      	beq.n	8001dcc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	2b0c      	cmp	r3, #12
 8001cf2:	d069      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cf4:	4b53      	ldr	r3, [pc, #332]	; (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d105      	bne.n	8001d0c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d00:	4b50      	ldr	r3, [pc, #320]	; (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e0ad      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d10:	4b4c      	ldr	r3, [pc, #304]	; (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a4b      	ldr	r2, [pc, #300]	; (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001d16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d1a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d1c:	f7ff fb7c 	bl	8001418 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d24:	f7ff fb78 	bl	8001418 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e09a      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d36:	4b43      	ldr	r3, [pc, #268]	; (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d42:	4b40      	ldr	r3, [pc, #256]	; (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	4b40      	ldr	r3, [pc, #256]	; (8001e48 <HAL_RCC_OscConfig+0x784>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d52:	3a01      	subs	r2, #1
 8001d54:	0112      	lsls	r2, r2, #4
 8001d56:	4311      	orrs	r1, r2
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d5c:	0212      	lsls	r2, r2, #8
 8001d5e:	4311      	orrs	r1, r2
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d64:	0852      	lsrs	r2, r2, #1
 8001d66:	3a01      	subs	r2, #1
 8001d68:	0552      	lsls	r2, r2, #21
 8001d6a:	4311      	orrs	r1, r2
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d70:	0852      	lsrs	r2, r2, #1
 8001d72:	3a01      	subs	r2, #1
 8001d74:	0652      	lsls	r2, r2, #25
 8001d76:	4311      	orrs	r1, r2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d7c:	0912      	lsrs	r2, r2, #4
 8001d7e:	0452      	lsls	r2, r2, #17
 8001d80:	430a      	orrs	r2, r1
 8001d82:	4930      	ldr	r1, [pc, #192]	; (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d88:	4b2e      	ldr	r3, [pc, #184]	; (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a2d      	ldr	r2, [pc, #180]	; (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d94:	4b2b      	ldr	r3, [pc, #172]	; (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	4a2a      	ldr	r2, [pc, #168]	; (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001da0:	f7ff fb3a 	bl	8001418 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da8:	f7ff fb36 	bl	8001418 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e058      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dba:	4b22      	ldr	r3, [pc, #136]	; (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dc6:	e050      	b.n	8001e6a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e04f      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d148      	bne.n	8001e6a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001dd8:	4b1a      	ldr	r3, [pc, #104]	; (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a19      	ldr	r2, [pc, #100]	; (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001dde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001de2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001de4:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	4a16      	ldr	r2, [pc, #88]	; (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001df0:	f7ff fb12 	bl	8001418 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df8:	f7ff fb0e 	bl	8001418 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e030      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x734>
 8001e16:	e028      	b.n	8001e6a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	2b0c      	cmp	r3, #12
 8001e1c:	d023      	beq.n	8001e66 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a08      	ldr	r2, [pc, #32]	; (8001e44 <HAL_RCC_OscConfig+0x780>)
 8001e24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2a:	f7ff faf5 	bl	8001418 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e30:	e00c      	b.n	8001e4c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e32:	f7ff faf1 	bl	8001418 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d905      	bls.n	8001e4c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e013      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
 8001e44:	40021000 	.word	0x40021000
 8001e48:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e4c:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <HAL_RCC_OscConfig+0x7b0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1ec      	bne.n	8001e32 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <HAL_RCC_OscConfig+0x7b0>)
 8001e5a:	68da      	ldr	r2, [r3, #12]
 8001e5c:	4905      	ldr	r1, [pc, #20]	; (8001e74 <HAL_RCC_OscConfig+0x7b0>)
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <HAL_RCC_OscConfig+0x7b4>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	60cb      	str	r3, [r1, #12]
 8001e64:	e001      	b.n	8001e6a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3720      	adds	r7, #32
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40021000 	.word	0x40021000
 8001e78:	feeefffc 	.word	0xfeeefffc

08001e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0e7      	b.n	8002060 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e90:	4b75      	ldr	r3, [pc, #468]	; (8002068 <HAL_RCC_ClockConfig+0x1ec>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d910      	bls.n	8001ec0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9e:	4b72      	ldr	r3, [pc, #456]	; (8002068 <HAL_RCC_ClockConfig+0x1ec>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f023 0207 	bic.w	r2, r3, #7
 8001ea6:	4970      	ldr	r1, [pc, #448]	; (8002068 <HAL_RCC_ClockConfig+0x1ec>)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eae:	4b6e      	ldr	r3, [pc, #440]	; (8002068 <HAL_RCC_ClockConfig+0x1ec>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d001      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0cf      	b.n	8002060 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d010      	beq.n	8001eee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	4b66      	ldr	r3, [pc, #408]	; (800206c <HAL_RCC_ClockConfig+0x1f0>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d908      	bls.n	8001eee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001edc:	4b63      	ldr	r3, [pc, #396]	; (800206c <HAL_RCC_ClockConfig+0x1f0>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	4960      	ldr	r1, [pc, #384]	; (800206c <HAL_RCC_ClockConfig+0x1f0>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d04c      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d107      	bne.n	8001f12 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f02:	4b5a      	ldr	r3, [pc, #360]	; (800206c <HAL_RCC_ClockConfig+0x1f0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d121      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e0a6      	b.n	8002060 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d107      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f1a:	4b54      	ldr	r3, [pc, #336]	; (800206c <HAL_RCC_ClockConfig+0x1f0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d115      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e09a      	b.n	8002060 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d107      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f32:	4b4e      	ldr	r3, [pc, #312]	; (800206c <HAL_RCC_ClockConfig+0x1f0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d109      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e08e      	b.n	8002060 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f42:	4b4a      	ldr	r3, [pc, #296]	; (800206c <HAL_RCC_ClockConfig+0x1f0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e086      	b.n	8002060 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f52:	4b46      	ldr	r3, [pc, #280]	; (800206c <HAL_RCC_ClockConfig+0x1f0>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f023 0203 	bic.w	r2, r3, #3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	4943      	ldr	r1, [pc, #268]	; (800206c <HAL_RCC_ClockConfig+0x1f0>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f64:	f7ff fa58 	bl	8001418 <HAL_GetTick>
 8001f68:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6a:	e00a      	b.n	8001f82 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f6c:	f7ff fa54 	bl	8001418 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e06e      	b.n	8002060 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f82:	4b3a      	ldr	r3, [pc, #232]	; (800206c <HAL_RCC_ClockConfig+0x1f0>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 020c 	and.w	r2, r3, #12
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d1eb      	bne.n	8001f6c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d010      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	4b31      	ldr	r3, [pc, #196]	; (800206c <HAL_RCC_ClockConfig+0x1f0>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d208      	bcs.n	8001fc2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb0:	4b2e      	ldr	r3, [pc, #184]	; (800206c <HAL_RCC_ClockConfig+0x1f0>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	492b      	ldr	r1, [pc, #172]	; (800206c <HAL_RCC_ClockConfig+0x1f0>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc2:	4b29      	ldr	r3, [pc, #164]	; (8002068 <HAL_RCC_ClockConfig+0x1ec>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d210      	bcs.n	8001ff2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd0:	4b25      	ldr	r3, [pc, #148]	; (8002068 <HAL_RCC_ClockConfig+0x1ec>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f023 0207 	bic.w	r2, r3, #7
 8001fd8:	4923      	ldr	r1, [pc, #140]	; (8002068 <HAL_RCC_ClockConfig+0x1ec>)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe0:	4b21      	ldr	r3, [pc, #132]	; (8002068 <HAL_RCC_ClockConfig+0x1ec>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d001      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e036      	b.n	8002060 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d008      	beq.n	8002010 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ffe:	4b1b      	ldr	r3, [pc, #108]	; (800206c <HAL_RCC_ClockConfig+0x1f0>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	4918      	ldr	r1, [pc, #96]	; (800206c <HAL_RCC_ClockConfig+0x1f0>)
 800200c:	4313      	orrs	r3, r2
 800200e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d009      	beq.n	8002030 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800201c:	4b13      	ldr	r3, [pc, #76]	; (800206c <HAL_RCC_ClockConfig+0x1f0>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4910      	ldr	r1, [pc, #64]	; (800206c <HAL_RCC_ClockConfig+0x1f0>)
 800202c:	4313      	orrs	r3, r2
 800202e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002030:	f000 f824 	bl	800207c <HAL_RCC_GetSysClockFreq>
 8002034:	4602      	mov	r2, r0
 8002036:	4b0d      	ldr	r3, [pc, #52]	; (800206c <HAL_RCC_ClockConfig+0x1f0>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	f003 030f 	and.w	r3, r3, #15
 8002040:	490b      	ldr	r1, [pc, #44]	; (8002070 <HAL_RCC_ClockConfig+0x1f4>)
 8002042:	5ccb      	ldrb	r3, [r1, r3]
 8002044:	f003 031f 	and.w	r3, r3, #31
 8002048:	fa22 f303 	lsr.w	r3, r2, r3
 800204c:	4a09      	ldr	r2, [pc, #36]	; (8002074 <HAL_RCC_ClockConfig+0x1f8>)
 800204e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <HAL_RCC_ClockConfig+0x1fc>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff f98f 	bl	8001378 <HAL_InitTick>
 800205a:	4603      	mov	r3, r0
 800205c:	72fb      	strb	r3, [r7, #11]

  return status;
 800205e:	7afb      	ldrb	r3, [r7, #11]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40022000 	.word	0x40022000
 800206c:	40021000 	.word	0x40021000
 8002070:	08003ea8 	.word	0x08003ea8
 8002074:	20000000 	.word	0x20000000
 8002078:	20000004 	.word	0x20000004

0800207c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800207c:	b480      	push	{r7}
 800207e:	b089      	sub	sp, #36	; 0x24
 8002080:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800208a:	4b3e      	ldr	r3, [pc, #248]	; (8002184 <HAL_RCC_GetSysClockFreq+0x108>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002094:	4b3b      	ldr	r3, [pc, #236]	; (8002184 <HAL_RCC_GetSysClockFreq+0x108>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_RCC_GetSysClockFreq+0x34>
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	2b0c      	cmp	r3, #12
 80020a8:	d121      	bne.n	80020ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d11e      	bne.n	80020ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020b0:	4b34      	ldr	r3, [pc, #208]	; (8002184 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d107      	bne.n	80020cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020bc:	4b31      	ldr	r3, [pc, #196]	; (8002184 <HAL_RCC_GetSysClockFreq+0x108>)
 80020be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c2:	0a1b      	lsrs	r3, r3, #8
 80020c4:	f003 030f 	and.w	r3, r3, #15
 80020c8:	61fb      	str	r3, [r7, #28]
 80020ca:	e005      	b.n	80020d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020cc:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	091b      	lsrs	r3, r3, #4
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020d8:	4a2b      	ldr	r2, [pc, #172]	; (8002188 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10d      	bne.n	8002104 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020ec:	e00a      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d102      	bne.n	80020fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020f4:	4b25      	ldr	r3, [pc, #148]	; (800218c <HAL_RCC_GetSysClockFreq+0x110>)
 80020f6:	61bb      	str	r3, [r7, #24]
 80020f8:	e004      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	2b08      	cmp	r3, #8
 80020fe:	d101      	bne.n	8002104 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002100:	4b23      	ldr	r3, [pc, #140]	; (8002190 <HAL_RCC_GetSysClockFreq+0x114>)
 8002102:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	2b0c      	cmp	r3, #12
 8002108:	d134      	bne.n	8002174 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800210a:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <HAL_RCC_GetSysClockFreq+0x108>)
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d003      	beq.n	8002122 <HAL_RCC_GetSysClockFreq+0xa6>
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2b03      	cmp	r3, #3
 800211e:	d003      	beq.n	8002128 <HAL_RCC_GetSysClockFreq+0xac>
 8002120:	e005      	b.n	800212e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002122:	4b1a      	ldr	r3, [pc, #104]	; (800218c <HAL_RCC_GetSysClockFreq+0x110>)
 8002124:	617b      	str	r3, [r7, #20]
      break;
 8002126:	e005      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <HAL_RCC_GetSysClockFreq+0x114>)
 800212a:	617b      	str	r3, [r7, #20]
      break;
 800212c:	e002      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	617b      	str	r3, [r7, #20]
      break;
 8002132:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002134:	4b13      	ldr	r3, [pc, #76]	; (8002184 <HAL_RCC_GetSysClockFreq+0x108>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	091b      	lsrs	r3, r3, #4
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	3301      	adds	r3, #1
 8002140:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002142:	4b10      	ldr	r3, [pc, #64]	; (8002184 <HAL_RCC_GetSysClockFreq+0x108>)
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	0a1b      	lsrs	r3, r3, #8
 8002148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	fb03 f202 	mul.w	r2, r3, r2
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	fbb2 f3f3 	udiv	r3, r2, r3
 8002158:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800215a:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <HAL_RCC_GetSysClockFreq+0x108>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	0e5b      	lsrs	r3, r3, #25
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	3301      	adds	r3, #1
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002172:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002174:	69bb      	ldr	r3, [r7, #24]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3724      	adds	r7, #36	; 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000
 8002188:	08003eb8 	.word	0x08003eb8
 800218c:	00f42400 	.word	0x00f42400
 8002190:	007a1200 	.word	0x007a1200

08002194 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800219c:	2300      	movs	r3, #0
 800219e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021a0:	4b2a      	ldr	r3, [pc, #168]	; (800224c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021ac:	f7ff fa26 	bl	80015fc <HAL_PWREx_GetVoltageRange>
 80021b0:	6178      	str	r0, [r7, #20]
 80021b2:	e014      	b.n	80021de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021b4:	4b25      	ldr	r3, [pc, #148]	; (800224c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b8:	4a24      	ldr	r2, [pc, #144]	; (800224c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021be:	6593      	str	r3, [r2, #88]	; 0x58
 80021c0:	4b22      	ldr	r3, [pc, #136]	; (800224c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021cc:	f7ff fa16 	bl	80015fc <HAL_PWREx_GetVoltageRange>
 80021d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021d2:	4b1e      	ldr	r3, [pc, #120]	; (800224c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d6:	4a1d      	ldr	r2, [pc, #116]	; (800224c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021e4:	d10b      	bne.n	80021fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b80      	cmp	r3, #128	; 0x80
 80021ea:	d919      	bls.n	8002220 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2ba0      	cmp	r3, #160	; 0xa0
 80021f0:	d902      	bls.n	80021f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021f2:	2302      	movs	r3, #2
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	e013      	b.n	8002220 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021f8:	2301      	movs	r3, #1
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	e010      	b.n	8002220 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b80      	cmp	r3, #128	; 0x80
 8002202:	d902      	bls.n	800220a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002204:	2303      	movs	r3, #3
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	e00a      	b.n	8002220 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b80      	cmp	r3, #128	; 0x80
 800220e:	d102      	bne.n	8002216 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002210:	2302      	movs	r3, #2
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	e004      	b.n	8002220 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b70      	cmp	r3, #112	; 0x70
 800221a:	d101      	bne.n	8002220 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800221c:	2301      	movs	r3, #1
 800221e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f023 0207 	bic.w	r2, r3, #7
 8002228:	4909      	ldr	r1, [pc, #36]	; (8002250 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002230:	4b07      	ldr	r3, [pc, #28]	; (8002250 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	429a      	cmp	r2, r3
 800223c:	d001      	beq.n	8002242 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40021000 	.word	0x40021000
 8002250:	40022000 	.word	0x40022000

08002254 <arm_max_f32>:
 8002254:	f101 3cff 	add.w	ip, r1, #4294967295
 8002258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800225a:	4607      	mov	r7, r0
 800225c:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 8002260:	ecf7 7a01 	vldmia	r7!, {s15}
 8002264:	d060      	beq.n	8002328 <arm_max_f32+0xd4>
 8002266:	2400      	movs	r4, #0
 8002268:	3014      	adds	r0, #20
 800226a:	4625      	mov	r5, r4
 800226c:	ea4f 068e 	mov.w	r6, lr, lsl #2
 8002270:	ed10 7a04 	vldr	s14, [r0, #-16]
 8002274:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227c:	bf48      	it	mi
 800227e:	eef0 7a47 	vmovmi.f32	s15, s14
 8002282:	ed10 7a03 	vldr	s14, [r0, #-12]
 8002286:	eef4 7ac7 	vcmpe.f32	s15, s14
 800228a:	bf48      	it	mi
 800228c:	1c65      	addmi	r5, r4, #1
 800228e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002292:	bf48      	it	mi
 8002294:	eef0 7a47 	vmovmi.f32	s15, s14
 8002298:	ed10 7a02 	vldr	s14, [r0, #-8]
 800229c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022a0:	bf48      	it	mi
 80022a2:	1ca5      	addmi	r5, r4, #2
 80022a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a8:	bf48      	it	mi
 80022aa:	eef0 7a47 	vmovmi.f32	s15, s14
 80022ae:	ed10 7a01 	vldr	s14, [r0, #-4]
 80022b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022b6:	bf48      	it	mi
 80022b8:	1ce5      	addmi	r5, r4, #3
 80022ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022be:	f104 0404 	add.w	r4, r4, #4
 80022c2:	bf44      	itt	mi
 80022c4:	eef0 7a47 	vmovmi.f32	s15, s14
 80022c8:	4625      	movmi	r5, r4
 80022ca:	42a6      	cmp	r6, r4
 80022cc:	f100 0010 	add.w	r0, r0, #16
 80022d0:	d1ce      	bne.n	8002270 <arm_max_f32+0x1c>
 80022d2:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 80022d6:	f01c 0003 	ands.w	r0, ip, #3
 80022da:	d021      	beq.n	8002320 <arm_max_f32+0xcc>
 80022dc:	ed97 7a00 	vldr	s14, [r7]
 80022e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e8:	bfc4      	itt	gt
 80022ea:	eef0 7a47 	vmovgt.f32	s15, s14
 80022ee:	1a0d      	subgt	r5, r1, r0
 80022f0:	3801      	subs	r0, #1
 80022f2:	d015      	beq.n	8002320 <arm_max_f32+0xcc>
 80022f4:	ed97 7a01 	vldr	s14, [r7, #4]
 80022f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002300:	bf44      	itt	mi
 8002302:	eef0 7a47 	vmovmi.f32	s15, s14
 8002306:	1a0d      	submi	r5, r1, r0
 8002308:	2801      	cmp	r0, #1
 800230a:	d009      	beq.n	8002320 <arm_max_f32+0xcc>
 800230c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002310:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002318:	bfc4      	itt	gt
 800231a:	eef0 7a47 	vmovgt.f32	s15, s14
 800231e:	4665      	movgt	r5, ip
 8002320:	edc2 7a00 	vstr	s15, [r2]
 8002324:	601d      	str	r5, [r3, #0]
 8002326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002328:	4675      	mov	r5, lr
 800232a:	e7d4      	b.n	80022d6 <arm_max_f32+0x82>

0800232c <arm_sin_f32>:
 800232c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80023ac <arm_sin_f32+0x80>
 8002330:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002334:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002340:	d504      	bpl.n	800234c <arm_sin_f32+0x20>
 8002342:	ee17 3a90 	vmov	r3, s15
 8002346:	3b01      	subs	r3, #1
 8002348:	ee07 3a90 	vmov	s15, r3
 800234c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002350:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80023b0 <arm_sin_f32+0x84>
 8002354:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002358:	ee20 0a07 	vmul.f32	s0, s0, s14
 800235c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8002360:	ee17 3a90 	vmov	r3, s15
 8002364:	b29b      	uxth	r3, r3
 8002366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800236a:	d21a      	bcs.n	80023a2 <arm_sin_f32+0x76>
 800236c:	ee07 3a90 	vmov	s15, r3
 8002370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002374:	1c59      	adds	r1, r3, #1
 8002376:	ee30 0a67 	vsub.f32	s0, s0, s15
 800237a:	4a0e      	ldr	r2, [pc, #56]	; (80023b4 <arm_sin_f32+0x88>)
 800237c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002380:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002384:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8002388:	ed93 7a00 	vldr	s14, [r3]
 800238c:	edd2 6a00 	vldr	s13, [r2]
 8002390:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8002394:	ee20 0a26 	vmul.f32	s0, s0, s13
 8002398:	ee67 7a87 	vmul.f32	s15, s15, s14
 800239c:	ee37 0a80 	vadd.f32	s0, s15, s0
 80023a0:	4770      	bx	lr
 80023a2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80023a6:	2101      	movs	r1, #1
 80023a8:	2300      	movs	r3, #0
 80023aa:	e7e6      	b.n	800237a <arm_sin_f32+0x4e>
 80023ac:	3e22f983 	.word	0x3e22f983
 80023b0:	44000000 	.word	0x44000000
 80023b4:	08003ee8 	.word	0x08003ee8

080023b8 <arm_cos_f32>:
 80023b8:	eddf 7a21 	vldr	s15, [pc, #132]	; 8002440 <arm_cos_f32+0x88>
 80023bc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80023c0:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80023c4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80023c8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80023cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80023d4:	d504      	bpl.n	80023e0 <arm_cos_f32+0x28>
 80023d6:	ee17 3a90 	vmov	r3, s15
 80023da:	3b01      	subs	r3, #1
 80023dc:	ee07 3a90 	vmov	s15, r3
 80023e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023e4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002444 <arm_cos_f32+0x8c>
 80023e8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80023ec:	ee20 0a07 	vmul.f32	s0, s0, s14
 80023f0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80023f4:	ee17 3a90 	vmov	r3, s15
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023fe:	d21a      	bcs.n	8002436 <arm_cos_f32+0x7e>
 8002400:	ee07 3a90 	vmov	s15, r3
 8002404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002408:	1c59      	adds	r1, r3, #1
 800240a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800240e:	4a0e      	ldr	r2, [pc, #56]	; (8002448 <arm_cos_f32+0x90>)
 8002410:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002414:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002418:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800241c:	ed93 7a00 	vldr	s14, [r3]
 8002420:	edd2 6a00 	vldr	s13, [r2]
 8002424:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8002428:	ee20 0a26 	vmul.f32	s0, s0, s13
 800242c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002430:	ee37 0a80 	vadd.f32	s0, s15, s0
 8002434:	4770      	bx	lr
 8002436:	ee30 0a47 	vsub.f32	s0, s0, s14
 800243a:	2101      	movs	r1, #1
 800243c:	2300      	movs	r3, #0
 800243e:	e7e6      	b.n	800240e <arm_cos_f32+0x56>
 8002440:	3e22f983 	.word	0x3e22f983
 8002444:	44000000 	.word	0x44000000
 8002448:	08003ee8 	.word	0x08003ee8

0800244c <memset>:
 800244c:	4402      	add	r2, r0
 800244e:	4603      	mov	r3, r0
 8002450:	4293      	cmp	r3, r2
 8002452:	d100      	bne.n	8002456 <memset+0xa>
 8002454:	4770      	bx	lr
 8002456:	f803 1b01 	strb.w	r1, [r3], #1
 800245a:	e7f9      	b.n	8002450 <memset+0x4>

0800245c <__errno>:
 800245c:	4b01      	ldr	r3, [pc, #4]	; (8002464 <__errno+0x8>)
 800245e:	6818      	ldr	r0, [r3, #0]
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000058 	.word	0x20000058

08002468 <__libc_init_array>:
 8002468:	b570      	push	{r4, r5, r6, lr}
 800246a:	4d0d      	ldr	r5, [pc, #52]	; (80024a0 <__libc_init_array+0x38>)
 800246c:	4c0d      	ldr	r4, [pc, #52]	; (80024a4 <__libc_init_array+0x3c>)
 800246e:	1b64      	subs	r4, r4, r5
 8002470:	10a4      	asrs	r4, r4, #2
 8002472:	2600      	movs	r6, #0
 8002474:	42a6      	cmp	r6, r4
 8002476:	d109      	bne.n	800248c <__libc_init_array+0x24>
 8002478:	4d0b      	ldr	r5, [pc, #44]	; (80024a8 <__libc_init_array+0x40>)
 800247a:	4c0c      	ldr	r4, [pc, #48]	; (80024ac <__libc_init_array+0x44>)
 800247c:	f001 fcf2 	bl	8003e64 <_init>
 8002480:	1b64      	subs	r4, r4, r5
 8002482:	10a4      	asrs	r4, r4, #2
 8002484:	2600      	movs	r6, #0
 8002486:	42a6      	cmp	r6, r4
 8002488:	d105      	bne.n	8002496 <__libc_init_array+0x2e>
 800248a:	bd70      	pop	{r4, r5, r6, pc}
 800248c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002490:	4798      	blx	r3
 8002492:	3601      	adds	r6, #1
 8002494:	e7ee      	b.n	8002474 <__libc_init_array+0xc>
 8002496:	f855 3b04 	ldr.w	r3, [r5], #4
 800249a:	4798      	blx	r3
 800249c:	3601      	adds	r6, #1
 800249e:	e7f2      	b.n	8002486 <__libc_init_array+0x1e>
 80024a0:	08004af0 	.word	0x08004af0
 80024a4:	08004af0 	.word	0x08004af0
 80024a8:	08004af0 	.word	0x08004af0
 80024ac:	08004af4 	.word	0x08004af4

080024b0 <pow>:
 80024b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b2:	ed2d 8b02 	vpush	{d8}
 80024b6:	eeb0 8a40 	vmov.f32	s16, s0
 80024ba:	eef0 8a60 	vmov.f32	s17, s1
 80024be:	ec55 4b11 	vmov	r4, r5, d1
 80024c2:	f000 f91d 	bl	8002700 <__ieee754_pow>
 80024c6:	4622      	mov	r2, r4
 80024c8:	462b      	mov	r3, r5
 80024ca:	4620      	mov	r0, r4
 80024cc:	4629      	mov	r1, r5
 80024ce:	ec57 6b10 	vmov	r6, r7, d0
 80024d2:	f7fe facf 	bl	8000a74 <__aeabi_dcmpun>
 80024d6:	2800      	cmp	r0, #0
 80024d8:	d13b      	bne.n	8002552 <pow+0xa2>
 80024da:	ec51 0b18 	vmov	r0, r1, d8
 80024de:	2200      	movs	r2, #0
 80024e0:	2300      	movs	r3, #0
 80024e2:	f7fe fa95 	bl	8000a10 <__aeabi_dcmpeq>
 80024e6:	b1b8      	cbz	r0, 8002518 <pow+0x68>
 80024e8:	2200      	movs	r2, #0
 80024ea:	2300      	movs	r3, #0
 80024ec:	4620      	mov	r0, r4
 80024ee:	4629      	mov	r1, r5
 80024f0:	f7fe fa8e 	bl	8000a10 <__aeabi_dcmpeq>
 80024f4:	2800      	cmp	r0, #0
 80024f6:	d146      	bne.n	8002586 <pow+0xd6>
 80024f8:	ec45 4b10 	vmov	d0, r4, r5
 80024fc:	f000 f8f0 	bl	80026e0 <finite>
 8002500:	b338      	cbz	r0, 8002552 <pow+0xa2>
 8002502:	2200      	movs	r2, #0
 8002504:	2300      	movs	r3, #0
 8002506:	4620      	mov	r0, r4
 8002508:	4629      	mov	r1, r5
 800250a:	f7fe fa8b 	bl	8000a24 <__aeabi_dcmplt>
 800250e:	b300      	cbz	r0, 8002552 <pow+0xa2>
 8002510:	f7ff ffa4 	bl	800245c <__errno>
 8002514:	2322      	movs	r3, #34	; 0x22
 8002516:	e01b      	b.n	8002550 <pow+0xa0>
 8002518:	ec47 6b10 	vmov	d0, r6, r7
 800251c:	f000 f8e0 	bl	80026e0 <finite>
 8002520:	b9e0      	cbnz	r0, 800255c <pow+0xac>
 8002522:	eeb0 0a48 	vmov.f32	s0, s16
 8002526:	eef0 0a68 	vmov.f32	s1, s17
 800252a:	f000 f8d9 	bl	80026e0 <finite>
 800252e:	b1a8      	cbz	r0, 800255c <pow+0xac>
 8002530:	ec45 4b10 	vmov	d0, r4, r5
 8002534:	f000 f8d4 	bl	80026e0 <finite>
 8002538:	b180      	cbz	r0, 800255c <pow+0xac>
 800253a:	4632      	mov	r2, r6
 800253c:	463b      	mov	r3, r7
 800253e:	4630      	mov	r0, r6
 8002540:	4639      	mov	r1, r7
 8002542:	f7fe fa97 	bl	8000a74 <__aeabi_dcmpun>
 8002546:	2800      	cmp	r0, #0
 8002548:	d0e2      	beq.n	8002510 <pow+0x60>
 800254a:	f7ff ff87 	bl	800245c <__errno>
 800254e:	2321      	movs	r3, #33	; 0x21
 8002550:	6003      	str	r3, [r0, #0]
 8002552:	ecbd 8b02 	vpop	{d8}
 8002556:	ec47 6b10 	vmov	d0, r6, r7
 800255a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800255c:	2200      	movs	r2, #0
 800255e:	2300      	movs	r3, #0
 8002560:	4630      	mov	r0, r6
 8002562:	4639      	mov	r1, r7
 8002564:	f7fe fa54 	bl	8000a10 <__aeabi_dcmpeq>
 8002568:	2800      	cmp	r0, #0
 800256a:	d0f2      	beq.n	8002552 <pow+0xa2>
 800256c:	eeb0 0a48 	vmov.f32	s0, s16
 8002570:	eef0 0a68 	vmov.f32	s1, s17
 8002574:	f000 f8b4 	bl	80026e0 <finite>
 8002578:	2800      	cmp	r0, #0
 800257a:	d0ea      	beq.n	8002552 <pow+0xa2>
 800257c:	ec45 4b10 	vmov	d0, r4, r5
 8002580:	f000 f8ae 	bl	80026e0 <finite>
 8002584:	e7c3      	b.n	800250e <pow+0x5e>
 8002586:	4f01      	ldr	r7, [pc, #4]	; (800258c <pow+0xdc>)
 8002588:	2600      	movs	r6, #0
 800258a:	e7e2      	b.n	8002552 <pow+0xa2>
 800258c:	3ff00000 	.word	0x3ff00000

08002590 <sqrtf>:
 8002590:	b508      	push	{r3, lr}
 8002592:	ed2d 8b02 	vpush	{d8}
 8002596:	eeb0 8a40 	vmov.f32	s16, s0
 800259a:	f000 f8ac 	bl	80026f6 <__ieee754_sqrtf>
 800259e:	eeb4 8a48 	vcmp.f32	s16, s16
 80025a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a6:	d60c      	bvs.n	80025c2 <sqrtf+0x32>
 80025a8:	eddf 8a07 	vldr	s17, [pc, #28]	; 80025c8 <sqrtf+0x38>
 80025ac:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80025b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b4:	d505      	bpl.n	80025c2 <sqrtf+0x32>
 80025b6:	f7ff ff51 	bl	800245c <__errno>
 80025ba:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80025be:	2321      	movs	r3, #33	; 0x21
 80025c0:	6003      	str	r3, [r0, #0]
 80025c2:	ecbd 8b02 	vpop	{d8}
 80025c6:	bd08      	pop	{r3, pc}
 80025c8:	00000000 	.word	0x00000000

080025cc <cosf>:
 80025cc:	ee10 3a10 	vmov	r3, s0
 80025d0:	b507      	push	{r0, r1, r2, lr}
 80025d2:	4a1e      	ldr	r2, [pc, #120]	; (800264c <cosf+0x80>)
 80025d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025d8:	4293      	cmp	r3, r2
 80025da:	dc06      	bgt.n	80025ea <cosf+0x1e>
 80025dc:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8002650 <cosf+0x84>
 80025e0:	b003      	add	sp, #12
 80025e2:	f85d eb04 	ldr.w	lr, [sp], #4
 80025e6:	f000 bdbf 	b.w	8003168 <__kernel_cosf>
 80025ea:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80025ee:	db04      	blt.n	80025fa <cosf+0x2e>
 80025f0:	ee30 0a40 	vsub.f32	s0, s0, s0
 80025f4:	b003      	add	sp, #12
 80025f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80025fa:	4668      	mov	r0, sp
 80025fc:	f000 fe5a 	bl	80032b4 <__ieee754_rem_pio2f>
 8002600:	f000 0003 	and.w	r0, r0, #3
 8002604:	2801      	cmp	r0, #1
 8002606:	d009      	beq.n	800261c <cosf+0x50>
 8002608:	2802      	cmp	r0, #2
 800260a:	d010      	beq.n	800262e <cosf+0x62>
 800260c:	b9b0      	cbnz	r0, 800263c <cosf+0x70>
 800260e:	eddd 0a01 	vldr	s1, [sp, #4]
 8002612:	ed9d 0a00 	vldr	s0, [sp]
 8002616:	f000 fda7 	bl	8003168 <__kernel_cosf>
 800261a:	e7eb      	b.n	80025f4 <cosf+0x28>
 800261c:	eddd 0a01 	vldr	s1, [sp, #4]
 8002620:	ed9d 0a00 	vldr	s0, [sp]
 8002624:	f000 fdfe 	bl	8003224 <__kernel_sinf>
 8002628:	eeb1 0a40 	vneg.f32	s0, s0
 800262c:	e7e2      	b.n	80025f4 <cosf+0x28>
 800262e:	eddd 0a01 	vldr	s1, [sp, #4]
 8002632:	ed9d 0a00 	vldr	s0, [sp]
 8002636:	f000 fd97 	bl	8003168 <__kernel_cosf>
 800263a:	e7f5      	b.n	8002628 <cosf+0x5c>
 800263c:	eddd 0a01 	vldr	s1, [sp, #4]
 8002640:	ed9d 0a00 	vldr	s0, [sp]
 8002644:	2001      	movs	r0, #1
 8002646:	f000 fded 	bl	8003224 <__kernel_sinf>
 800264a:	e7d3      	b.n	80025f4 <cosf+0x28>
 800264c:	3f490fd8 	.word	0x3f490fd8
 8002650:	00000000 	.word	0x00000000

08002654 <sinf>:
 8002654:	ee10 3a10 	vmov	r3, s0
 8002658:	b507      	push	{r0, r1, r2, lr}
 800265a:	4a1f      	ldr	r2, [pc, #124]	; (80026d8 <sinf+0x84>)
 800265c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002660:	4293      	cmp	r3, r2
 8002662:	dc07      	bgt.n	8002674 <sinf+0x20>
 8002664:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80026dc <sinf+0x88>
 8002668:	2000      	movs	r0, #0
 800266a:	b003      	add	sp, #12
 800266c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002670:	f000 bdd8 	b.w	8003224 <__kernel_sinf>
 8002674:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8002678:	db04      	blt.n	8002684 <sinf+0x30>
 800267a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800267e:	b003      	add	sp, #12
 8002680:	f85d fb04 	ldr.w	pc, [sp], #4
 8002684:	4668      	mov	r0, sp
 8002686:	f000 fe15 	bl	80032b4 <__ieee754_rem_pio2f>
 800268a:	f000 0003 	and.w	r0, r0, #3
 800268e:	2801      	cmp	r0, #1
 8002690:	d00a      	beq.n	80026a8 <sinf+0x54>
 8002692:	2802      	cmp	r0, #2
 8002694:	d00f      	beq.n	80026b6 <sinf+0x62>
 8002696:	b9c0      	cbnz	r0, 80026ca <sinf+0x76>
 8002698:	eddd 0a01 	vldr	s1, [sp, #4]
 800269c:	ed9d 0a00 	vldr	s0, [sp]
 80026a0:	2001      	movs	r0, #1
 80026a2:	f000 fdbf 	bl	8003224 <__kernel_sinf>
 80026a6:	e7ea      	b.n	800267e <sinf+0x2a>
 80026a8:	eddd 0a01 	vldr	s1, [sp, #4]
 80026ac:	ed9d 0a00 	vldr	s0, [sp]
 80026b0:	f000 fd5a 	bl	8003168 <__kernel_cosf>
 80026b4:	e7e3      	b.n	800267e <sinf+0x2a>
 80026b6:	eddd 0a01 	vldr	s1, [sp, #4]
 80026ba:	ed9d 0a00 	vldr	s0, [sp]
 80026be:	2001      	movs	r0, #1
 80026c0:	f000 fdb0 	bl	8003224 <__kernel_sinf>
 80026c4:	eeb1 0a40 	vneg.f32	s0, s0
 80026c8:	e7d9      	b.n	800267e <sinf+0x2a>
 80026ca:	eddd 0a01 	vldr	s1, [sp, #4]
 80026ce:	ed9d 0a00 	vldr	s0, [sp]
 80026d2:	f000 fd49 	bl	8003168 <__kernel_cosf>
 80026d6:	e7f5      	b.n	80026c4 <sinf+0x70>
 80026d8:	3f490fd8 	.word	0x3f490fd8
 80026dc:	00000000 	.word	0x00000000

080026e0 <finite>:
 80026e0:	b082      	sub	sp, #8
 80026e2:	ed8d 0b00 	vstr	d0, [sp]
 80026e6:	9801      	ldr	r0, [sp, #4]
 80026e8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80026ec:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80026f0:	0fc0      	lsrs	r0, r0, #31
 80026f2:	b002      	add	sp, #8
 80026f4:	4770      	bx	lr

080026f6 <__ieee754_sqrtf>:
 80026f6:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80026fa:	4770      	bx	lr
 80026fc:	0000      	movs	r0, r0
	...

08002700 <__ieee754_pow>:
 8002700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002704:	ed2d 8b06 	vpush	{d8-d10}
 8002708:	b089      	sub	sp, #36	; 0x24
 800270a:	ed8d 1b00 	vstr	d1, [sp]
 800270e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8002712:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8002716:	ea58 0102 	orrs.w	r1, r8, r2
 800271a:	ec57 6b10 	vmov	r6, r7, d0
 800271e:	d115      	bne.n	800274c <__ieee754_pow+0x4c>
 8002720:	19b3      	adds	r3, r6, r6
 8002722:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8002726:	4152      	adcs	r2, r2
 8002728:	4299      	cmp	r1, r3
 800272a:	4b89      	ldr	r3, [pc, #548]	; (8002950 <__ieee754_pow+0x250>)
 800272c:	4193      	sbcs	r3, r2
 800272e:	f080 84d1 	bcs.w	80030d4 <__ieee754_pow+0x9d4>
 8002732:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002736:	4630      	mov	r0, r6
 8002738:	4639      	mov	r1, r7
 800273a:	f7fd fd4b 	bl	80001d4 <__adddf3>
 800273e:	ec41 0b10 	vmov	d0, r0, r1
 8002742:	b009      	add	sp, #36	; 0x24
 8002744:	ecbd 8b06 	vpop	{d8-d10}
 8002748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800274c:	4b81      	ldr	r3, [pc, #516]	; (8002954 <__ieee754_pow+0x254>)
 800274e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8002752:	429c      	cmp	r4, r3
 8002754:	ee10 aa10 	vmov	sl, s0
 8002758:	463d      	mov	r5, r7
 800275a:	dc06      	bgt.n	800276a <__ieee754_pow+0x6a>
 800275c:	d101      	bne.n	8002762 <__ieee754_pow+0x62>
 800275e:	2e00      	cmp	r6, #0
 8002760:	d1e7      	bne.n	8002732 <__ieee754_pow+0x32>
 8002762:	4598      	cmp	r8, r3
 8002764:	dc01      	bgt.n	800276a <__ieee754_pow+0x6a>
 8002766:	d10f      	bne.n	8002788 <__ieee754_pow+0x88>
 8002768:	b172      	cbz	r2, 8002788 <__ieee754_pow+0x88>
 800276a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800276e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8002772:	ea55 050a 	orrs.w	r5, r5, sl
 8002776:	d1dc      	bne.n	8002732 <__ieee754_pow+0x32>
 8002778:	e9dd 3200 	ldrd	r3, r2, [sp]
 800277c:	18db      	adds	r3, r3, r3
 800277e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8002782:	4152      	adcs	r2, r2
 8002784:	429d      	cmp	r5, r3
 8002786:	e7d0      	b.n	800272a <__ieee754_pow+0x2a>
 8002788:	2d00      	cmp	r5, #0
 800278a:	da3b      	bge.n	8002804 <__ieee754_pow+0x104>
 800278c:	4b72      	ldr	r3, [pc, #456]	; (8002958 <__ieee754_pow+0x258>)
 800278e:	4598      	cmp	r8, r3
 8002790:	dc51      	bgt.n	8002836 <__ieee754_pow+0x136>
 8002792:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8002796:	4598      	cmp	r8, r3
 8002798:	f340 84ab 	ble.w	80030f2 <__ieee754_pow+0x9f2>
 800279c:	ea4f 5328 	mov.w	r3, r8, asr #20
 80027a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80027a4:	2b14      	cmp	r3, #20
 80027a6:	dd0f      	ble.n	80027c8 <__ieee754_pow+0xc8>
 80027a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80027ac:	fa22 f103 	lsr.w	r1, r2, r3
 80027b0:	fa01 f303 	lsl.w	r3, r1, r3
 80027b4:	4293      	cmp	r3, r2
 80027b6:	f040 849c 	bne.w	80030f2 <__ieee754_pow+0x9f2>
 80027ba:	f001 0101 	and.w	r1, r1, #1
 80027be:	f1c1 0302 	rsb	r3, r1, #2
 80027c2:	9304      	str	r3, [sp, #16]
 80027c4:	b182      	cbz	r2, 80027e8 <__ieee754_pow+0xe8>
 80027c6:	e05f      	b.n	8002888 <__ieee754_pow+0x188>
 80027c8:	2a00      	cmp	r2, #0
 80027ca:	d15b      	bne.n	8002884 <__ieee754_pow+0x184>
 80027cc:	f1c3 0314 	rsb	r3, r3, #20
 80027d0:	fa48 f103 	asr.w	r1, r8, r3
 80027d4:	fa01 f303 	lsl.w	r3, r1, r3
 80027d8:	4543      	cmp	r3, r8
 80027da:	f040 8487 	bne.w	80030ec <__ieee754_pow+0x9ec>
 80027de:	f001 0101 	and.w	r1, r1, #1
 80027e2:	f1c1 0302 	rsb	r3, r1, #2
 80027e6:	9304      	str	r3, [sp, #16]
 80027e8:	4b5c      	ldr	r3, [pc, #368]	; (800295c <__ieee754_pow+0x25c>)
 80027ea:	4598      	cmp	r8, r3
 80027ec:	d132      	bne.n	8002854 <__ieee754_pow+0x154>
 80027ee:	f1b9 0f00 	cmp.w	r9, #0
 80027f2:	f280 8477 	bge.w	80030e4 <__ieee754_pow+0x9e4>
 80027f6:	4959      	ldr	r1, [pc, #356]	; (800295c <__ieee754_pow+0x25c>)
 80027f8:	4632      	mov	r2, r6
 80027fa:	463b      	mov	r3, r7
 80027fc:	2000      	movs	r0, #0
 80027fe:	f7fd ffc9 	bl	8000794 <__aeabi_ddiv>
 8002802:	e79c      	b.n	800273e <__ieee754_pow+0x3e>
 8002804:	2300      	movs	r3, #0
 8002806:	9304      	str	r3, [sp, #16]
 8002808:	2a00      	cmp	r2, #0
 800280a:	d13d      	bne.n	8002888 <__ieee754_pow+0x188>
 800280c:	4b51      	ldr	r3, [pc, #324]	; (8002954 <__ieee754_pow+0x254>)
 800280e:	4598      	cmp	r8, r3
 8002810:	d1ea      	bne.n	80027e8 <__ieee754_pow+0xe8>
 8002812:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8002816:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800281a:	ea53 030a 	orrs.w	r3, r3, sl
 800281e:	f000 8459 	beq.w	80030d4 <__ieee754_pow+0x9d4>
 8002822:	4b4f      	ldr	r3, [pc, #316]	; (8002960 <__ieee754_pow+0x260>)
 8002824:	429c      	cmp	r4, r3
 8002826:	dd08      	ble.n	800283a <__ieee754_pow+0x13a>
 8002828:	f1b9 0f00 	cmp.w	r9, #0
 800282c:	f2c0 8456 	blt.w	80030dc <__ieee754_pow+0x9dc>
 8002830:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002834:	e783      	b.n	800273e <__ieee754_pow+0x3e>
 8002836:	2302      	movs	r3, #2
 8002838:	e7e5      	b.n	8002806 <__ieee754_pow+0x106>
 800283a:	f1b9 0f00 	cmp.w	r9, #0
 800283e:	f04f 0000 	mov.w	r0, #0
 8002842:	f04f 0100 	mov.w	r1, #0
 8002846:	f6bf af7a 	bge.w	800273e <__ieee754_pow+0x3e>
 800284a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800284e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8002852:	e774      	b.n	800273e <__ieee754_pow+0x3e>
 8002854:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8002858:	d106      	bne.n	8002868 <__ieee754_pow+0x168>
 800285a:	4632      	mov	r2, r6
 800285c:	463b      	mov	r3, r7
 800285e:	4630      	mov	r0, r6
 8002860:	4639      	mov	r1, r7
 8002862:	f7fd fe6d 	bl	8000540 <__aeabi_dmul>
 8002866:	e76a      	b.n	800273e <__ieee754_pow+0x3e>
 8002868:	4b3e      	ldr	r3, [pc, #248]	; (8002964 <__ieee754_pow+0x264>)
 800286a:	4599      	cmp	r9, r3
 800286c:	d10c      	bne.n	8002888 <__ieee754_pow+0x188>
 800286e:	2d00      	cmp	r5, #0
 8002870:	db0a      	blt.n	8002888 <__ieee754_pow+0x188>
 8002872:	ec47 6b10 	vmov	d0, r6, r7
 8002876:	b009      	add	sp, #36	; 0x24
 8002878:	ecbd 8b06 	vpop	{d8-d10}
 800287c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002880:	f000 befc 	b.w	800367c <__ieee754_sqrt>
 8002884:	2300      	movs	r3, #0
 8002886:	9304      	str	r3, [sp, #16]
 8002888:	ec47 6b10 	vmov	d0, r6, r7
 800288c:	f000 fc62 	bl	8003154 <fabs>
 8002890:	ec51 0b10 	vmov	r0, r1, d0
 8002894:	f1ba 0f00 	cmp.w	sl, #0
 8002898:	d129      	bne.n	80028ee <__ieee754_pow+0x1ee>
 800289a:	b124      	cbz	r4, 80028a6 <__ieee754_pow+0x1a6>
 800289c:	4b2f      	ldr	r3, [pc, #188]	; (800295c <__ieee754_pow+0x25c>)
 800289e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d123      	bne.n	80028ee <__ieee754_pow+0x1ee>
 80028a6:	f1b9 0f00 	cmp.w	r9, #0
 80028aa:	da05      	bge.n	80028b8 <__ieee754_pow+0x1b8>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	2000      	movs	r0, #0
 80028b2:	492a      	ldr	r1, [pc, #168]	; (800295c <__ieee754_pow+0x25c>)
 80028b4:	f7fd ff6e 	bl	8000794 <__aeabi_ddiv>
 80028b8:	2d00      	cmp	r5, #0
 80028ba:	f6bf af40 	bge.w	800273e <__ieee754_pow+0x3e>
 80028be:	9b04      	ldr	r3, [sp, #16]
 80028c0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80028c4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80028c8:	431c      	orrs	r4, r3
 80028ca:	d108      	bne.n	80028de <__ieee754_pow+0x1de>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4610      	mov	r0, r2
 80028d2:	4619      	mov	r1, r3
 80028d4:	f7fd fc7c 	bl	80001d0 <__aeabi_dsub>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	e78f      	b.n	80027fe <__ieee754_pow+0xfe>
 80028de:	9b04      	ldr	r3, [sp, #16]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	f47f af2c 	bne.w	800273e <__ieee754_pow+0x3e>
 80028e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80028ea:	4619      	mov	r1, r3
 80028ec:	e727      	b.n	800273e <__ieee754_pow+0x3e>
 80028ee:	0feb      	lsrs	r3, r5, #31
 80028f0:	3b01      	subs	r3, #1
 80028f2:	9306      	str	r3, [sp, #24]
 80028f4:	9a06      	ldr	r2, [sp, #24]
 80028f6:	9b04      	ldr	r3, [sp, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	d102      	bne.n	8002902 <__ieee754_pow+0x202>
 80028fc:	4632      	mov	r2, r6
 80028fe:	463b      	mov	r3, r7
 8002900:	e7e6      	b.n	80028d0 <__ieee754_pow+0x1d0>
 8002902:	4b19      	ldr	r3, [pc, #100]	; (8002968 <__ieee754_pow+0x268>)
 8002904:	4598      	cmp	r8, r3
 8002906:	f340 80fb 	ble.w	8002b00 <__ieee754_pow+0x400>
 800290a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800290e:	4598      	cmp	r8, r3
 8002910:	4b13      	ldr	r3, [pc, #76]	; (8002960 <__ieee754_pow+0x260>)
 8002912:	dd0c      	ble.n	800292e <__ieee754_pow+0x22e>
 8002914:	429c      	cmp	r4, r3
 8002916:	dc0f      	bgt.n	8002938 <__ieee754_pow+0x238>
 8002918:	f1b9 0f00 	cmp.w	r9, #0
 800291c:	da0f      	bge.n	800293e <__ieee754_pow+0x23e>
 800291e:	2000      	movs	r0, #0
 8002920:	b009      	add	sp, #36	; 0x24
 8002922:	ecbd 8b06 	vpop	{d8-d10}
 8002926:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800292a:	f000 be9e 	b.w	800366a <__math_oflow>
 800292e:	429c      	cmp	r4, r3
 8002930:	dbf2      	blt.n	8002918 <__ieee754_pow+0x218>
 8002932:	4b0a      	ldr	r3, [pc, #40]	; (800295c <__ieee754_pow+0x25c>)
 8002934:	429c      	cmp	r4, r3
 8002936:	dd19      	ble.n	800296c <__ieee754_pow+0x26c>
 8002938:	f1b9 0f00 	cmp.w	r9, #0
 800293c:	dcef      	bgt.n	800291e <__ieee754_pow+0x21e>
 800293e:	2000      	movs	r0, #0
 8002940:	b009      	add	sp, #36	; 0x24
 8002942:	ecbd 8b06 	vpop	{d8-d10}
 8002946:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800294a:	f000 be85 	b.w	8003658 <__math_uflow>
 800294e:	bf00      	nop
 8002950:	fff00000 	.word	0xfff00000
 8002954:	7ff00000 	.word	0x7ff00000
 8002958:	433fffff 	.word	0x433fffff
 800295c:	3ff00000 	.word	0x3ff00000
 8002960:	3fefffff 	.word	0x3fefffff
 8002964:	3fe00000 	.word	0x3fe00000
 8002968:	41e00000 	.word	0x41e00000
 800296c:	4b60      	ldr	r3, [pc, #384]	; (8002af0 <__ieee754_pow+0x3f0>)
 800296e:	2200      	movs	r2, #0
 8002970:	f7fd fc2e 	bl	80001d0 <__aeabi_dsub>
 8002974:	a354      	add	r3, pc, #336	; (adr r3, 8002ac8 <__ieee754_pow+0x3c8>)
 8002976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297a:	4604      	mov	r4, r0
 800297c:	460d      	mov	r5, r1
 800297e:	f7fd fddf 	bl	8000540 <__aeabi_dmul>
 8002982:	a353      	add	r3, pc, #332	; (adr r3, 8002ad0 <__ieee754_pow+0x3d0>)
 8002984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002988:	4606      	mov	r6, r0
 800298a:	460f      	mov	r7, r1
 800298c:	4620      	mov	r0, r4
 800298e:	4629      	mov	r1, r5
 8002990:	f7fd fdd6 	bl	8000540 <__aeabi_dmul>
 8002994:	4b57      	ldr	r3, [pc, #348]	; (8002af4 <__ieee754_pow+0x3f4>)
 8002996:	4682      	mov	sl, r0
 8002998:	468b      	mov	fp, r1
 800299a:	2200      	movs	r2, #0
 800299c:	4620      	mov	r0, r4
 800299e:	4629      	mov	r1, r5
 80029a0:	f7fd fdce 	bl	8000540 <__aeabi_dmul>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	a14b      	add	r1, pc, #300	; (adr r1, 8002ad8 <__ieee754_pow+0x3d8>)
 80029aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029ae:	f7fd fc0f 	bl	80001d0 <__aeabi_dsub>
 80029b2:	4622      	mov	r2, r4
 80029b4:	462b      	mov	r3, r5
 80029b6:	f7fd fdc3 	bl	8000540 <__aeabi_dmul>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	2000      	movs	r0, #0
 80029c0:	494d      	ldr	r1, [pc, #308]	; (8002af8 <__ieee754_pow+0x3f8>)
 80029c2:	f7fd fc05 	bl	80001d0 <__aeabi_dsub>
 80029c6:	4622      	mov	r2, r4
 80029c8:	4680      	mov	r8, r0
 80029ca:	4689      	mov	r9, r1
 80029cc:	462b      	mov	r3, r5
 80029ce:	4620      	mov	r0, r4
 80029d0:	4629      	mov	r1, r5
 80029d2:	f7fd fdb5 	bl	8000540 <__aeabi_dmul>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	4640      	mov	r0, r8
 80029dc:	4649      	mov	r1, r9
 80029de:	f7fd fdaf 	bl	8000540 <__aeabi_dmul>
 80029e2:	a33f      	add	r3, pc, #252	; (adr r3, 8002ae0 <__ieee754_pow+0x3e0>)
 80029e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e8:	f7fd fdaa 	bl	8000540 <__aeabi_dmul>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4650      	mov	r0, sl
 80029f2:	4659      	mov	r1, fp
 80029f4:	f7fd fbec 	bl	80001d0 <__aeabi_dsub>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4680      	mov	r8, r0
 80029fe:	4689      	mov	r9, r1
 8002a00:	4630      	mov	r0, r6
 8002a02:	4639      	mov	r1, r7
 8002a04:	f7fd fbe6 	bl	80001d4 <__adddf3>
 8002a08:	2000      	movs	r0, #0
 8002a0a:	4632      	mov	r2, r6
 8002a0c:	463b      	mov	r3, r7
 8002a0e:	4604      	mov	r4, r0
 8002a10:	460d      	mov	r5, r1
 8002a12:	f7fd fbdd 	bl	80001d0 <__aeabi_dsub>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4640      	mov	r0, r8
 8002a1c:	4649      	mov	r1, r9
 8002a1e:	f7fd fbd7 	bl	80001d0 <__aeabi_dsub>
 8002a22:	9b04      	ldr	r3, [sp, #16]
 8002a24:	9a06      	ldr	r2, [sp, #24]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	4682      	mov	sl, r0
 8002a2c:	468b      	mov	fp, r1
 8002a2e:	f040 81e7 	bne.w	8002e00 <__ieee754_pow+0x700>
 8002a32:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8002ae8 <__ieee754_pow+0x3e8>
 8002a36:	eeb0 8a47 	vmov.f32	s16, s14
 8002a3a:	eef0 8a67 	vmov.f32	s17, s15
 8002a3e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8002a42:	2600      	movs	r6, #0
 8002a44:	4632      	mov	r2, r6
 8002a46:	463b      	mov	r3, r7
 8002a48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002a4c:	f7fd fbc0 	bl	80001d0 <__aeabi_dsub>
 8002a50:	4622      	mov	r2, r4
 8002a52:	462b      	mov	r3, r5
 8002a54:	f7fd fd74 	bl	8000540 <__aeabi_dmul>
 8002a58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002a5c:	4680      	mov	r8, r0
 8002a5e:	4689      	mov	r9, r1
 8002a60:	4650      	mov	r0, sl
 8002a62:	4659      	mov	r1, fp
 8002a64:	f7fd fd6c 	bl	8000540 <__aeabi_dmul>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4640      	mov	r0, r8
 8002a6e:	4649      	mov	r1, r9
 8002a70:	f7fd fbb0 	bl	80001d4 <__adddf3>
 8002a74:	4632      	mov	r2, r6
 8002a76:	463b      	mov	r3, r7
 8002a78:	4680      	mov	r8, r0
 8002a7a:	4689      	mov	r9, r1
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	4629      	mov	r1, r5
 8002a80:	f7fd fd5e 	bl	8000540 <__aeabi_dmul>
 8002a84:	460b      	mov	r3, r1
 8002a86:	4604      	mov	r4, r0
 8002a88:	460d      	mov	r5, r1
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	4649      	mov	r1, r9
 8002a8e:	4640      	mov	r0, r8
 8002a90:	f7fd fba0 	bl	80001d4 <__adddf3>
 8002a94:	4b19      	ldr	r3, [pc, #100]	; (8002afc <__ieee754_pow+0x3fc>)
 8002a96:	4299      	cmp	r1, r3
 8002a98:	ec45 4b19 	vmov	d9, r4, r5
 8002a9c:	4606      	mov	r6, r0
 8002a9e:	460f      	mov	r7, r1
 8002aa0:	468b      	mov	fp, r1
 8002aa2:	f340 82f0 	ble.w	8003086 <__ieee754_pow+0x986>
 8002aa6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8002aaa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8002aae:	4303      	orrs	r3, r0
 8002ab0:	f000 81e4 	beq.w	8002e7c <__ieee754_pow+0x77c>
 8002ab4:	ec51 0b18 	vmov	r0, r1, d8
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2300      	movs	r3, #0
 8002abc:	f7fd ffb2 	bl	8000a24 <__aeabi_dcmplt>
 8002ac0:	3800      	subs	r0, #0
 8002ac2:	bf18      	it	ne
 8002ac4:	2001      	movne	r0, #1
 8002ac6:	e72b      	b.n	8002920 <__ieee754_pow+0x220>
 8002ac8:	60000000 	.word	0x60000000
 8002acc:	3ff71547 	.word	0x3ff71547
 8002ad0:	f85ddf44 	.word	0xf85ddf44
 8002ad4:	3e54ae0b 	.word	0x3e54ae0b
 8002ad8:	55555555 	.word	0x55555555
 8002adc:	3fd55555 	.word	0x3fd55555
 8002ae0:	652b82fe 	.word	0x652b82fe
 8002ae4:	3ff71547 	.word	0x3ff71547
 8002ae8:	00000000 	.word	0x00000000
 8002aec:	bff00000 	.word	0xbff00000
 8002af0:	3ff00000 	.word	0x3ff00000
 8002af4:	3fd00000 	.word	0x3fd00000
 8002af8:	3fe00000 	.word	0x3fe00000
 8002afc:	408fffff 	.word	0x408fffff
 8002b00:	4bd5      	ldr	r3, [pc, #852]	; (8002e58 <__ieee754_pow+0x758>)
 8002b02:	402b      	ands	r3, r5
 8002b04:	2200      	movs	r2, #0
 8002b06:	b92b      	cbnz	r3, 8002b14 <__ieee754_pow+0x414>
 8002b08:	4bd4      	ldr	r3, [pc, #848]	; (8002e5c <__ieee754_pow+0x75c>)
 8002b0a:	f7fd fd19 	bl	8000540 <__aeabi_dmul>
 8002b0e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8002b12:	460c      	mov	r4, r1
 8002b14:	1523      	asrs	r3, r4, #20
 8002b16:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002b1a:	4413      	add	r3, r2
 8002b1c:	9305      	str	r3, [sp, #20]
 8002b1e:	4bd0      	ldr	r3, [pc, #832]	; (8002e60 <__ieee754_pow+0x760>)
 8002b20:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8002b24:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8002b28:	429c      	cmp	r4, r3
 8002b2a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8002b2e:	dd08      	ble.n	8002b42 <__ieee754_pow+0x442>
 8002b30:	4bcc      	ldr	r3, [pc, #816]	; (8002e64 <__ieee754_pow+0x764>)
 8002b32:	429c      	cmp	r4, r3
 8002b34:	f340 8162 	ble.w	8002dfc <__ieee754_pow+0x6fc>
 8002b38:	9b05      	ldr	r3, [sp, #20]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	9305      	str	r3, [sp, #20]
 8002b3e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8002b42:	2400      	movs	r4, #0
 8002b44:	00e3      	lsls	r3, r4, #3
 8002b46:	9307      	str	r3, [sp, #28]
 8002b48:	4bc7      	ldr	r3, [pc, #796]	; (8002e68 <__ieee754_pow+0x768>)
 8002b4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002b4e:	ed93 7b00 	vldr	d7, [r3]
 8002b52:	4629      	mov	r1, r5
 8002b54:	ec53 2b17 	vmov	r2, r3, d7
 8002b58:	eeb0 9a47 	vmov.f32	s18, s14
 8002b5c:	eef0 9a67 	vmov.f32	s19, s15
 8002b60:	4682      	mov	sl, r0
 8002b62:	f7fd fb35 	bl	80001d0 <__aeabi_dsub>
 8002b66:	4652      	mov	r2, sl
 8002b68:	4606      	mov	r6, r0
 8002b6a:	460f      	mov	r7, r1
 8002b6c:	462b      	mov	r3, r5
 8002b6e:	ec51 0b19 	vmov	r0, r1, d9
 8002b72:	f7fd fb2f 	bl	80001d4 <__adddf3>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	49bb      	ldr	r1, [pc, #748]	; (8002e6c <__ieee754_pow+0x76c>)
 8002b7e:	f7fd fe09 	bl	8000794 <__aeabi_ddiv>
 8002b82:	ec41 0b1a 	vmov	d10, r0, r1
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4630      	mov	r0, r6
 8002b8c:	4639      	mov	r1, r7
 8002b8e:	f7fd fcd7 	bl	8000540 <__aeabi_dmul>
 8002b92:	2300      	movs	r3, #0
 8002b94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002b98:	9302      	str	r3, [sp, #8]
 8002b9a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8002b9e:	46ab      	mov	fp, r5
 8002ba0:	106d      	asrs	r5, r5, #1
 8002ba2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002ba6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8002baa:	ec41 0b18 	vmov	d8, r0, r1
 8002bae:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	4640      	mov	r0, r8
 8002bb6:	4649      	mov	r1, r9
 8002bb8:	4614      	mov	r4, r2
 8002bba:	461d      	mov	r5, r3
 8002bbc:	f7fd fcc0 	bl	8000540 <__aeabi_dmul>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4630      	mov	r0, r6
 8002bc6:	4639      	mov	r1, r7
 8002bc8:	f7fd fb02 	bl	80001d0 <__aeabi_dsub>
 8002bcc:	ec53 2b19 	vmov	r2, r3, d9
 8002bd0:	4606      	mov	r6, r0
 8002bd2:	460f      	mov	r7, r1
 8002bd4:	4620      	mov	r0, r4
 8002bd6:	4629      	mov	r1, r5
 8002bd8:	f7fd fafa 	bl	80001d0 <__aeabi_dsub>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	4650      	mov	r0, sl
 8002be2:	4659      	mov	r1, fp
 8002be4:	f7fd faf4 	bl	80001d0 <__aeabi_dsub>
 8002be8:	4642      	mov	r2, r8
 8002bea:	464b      	mov	r3, r9
 8002bec:	f7fd fca8 	bl	8000540 <__aeabi_dmul>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4630      	mov	r0, r6
 8002bf6:	4639      	mov	r1, r7
 8002bf8:	f7fd faea 	bl	80001d0 <__aeabi_dsub>
 8002bfc:	ec53 2b1a 	vmov	r2, r3, d10
 8002c00:	f7fd fc9e 	bl	8000540 <__aeabi_dmul>
 8002c04:	ec53 2b18 	vmov	r2, r3, d8
 8002c08:	ec41 0b19 	vmov	d9, r0, r1
 8002c0c:	ec51 0b18 	vmov	r0, r1, d8
 8002c10:	f7fd fc96 	bl	8000540 <__aeabi_dmul>
 8002c14:	a37c      	add	r3, pc, #496	; (adr r3, 8002e08 <__ieee754_pow+0x708>)
 8002c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1a:	4604      	mov	r4, r0
 8002c1c:	460d      	mov	r5, r1
 8002c1e:	f7fd fc8f 	bl	8000540 <__aeabi_dmul>
 8002c22:	a37b      	add	r3, pc, #492	; (adr r3, 8002e10 <__ieee754_pow+0x710>)
 8002c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c28:	f7fd fad4 	bl	80001d4 <__adddf3>
 8002c2c:	4622      	mov	r2, r4
 8002c2e:	462b      	mov	r3, r5
 8002c30:	f7fd fc86 	bl	8000540 <__aeabi_dmul>
 8002c34:	a378      	add	r3, pc, #480	; (adr r3, 8002e18 <__ieee754_pow+0x718>)
 8002c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3a:	f7fd facb 	bl	80001d4 <__adddf3>
 8002c3e:	4622      	mov	r2, r4
 8002c40:	462b      	mov	r3, r5
 8002c42:	f7fd fc7d 	bl	8000540 <__aeabi_dmul>
 8002c46:	a376      	add	r3, pc, #472	; (adr r3, 8002e20 <__ieee754_pow+0x720>)
 8002c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4c:	f7fd fac2 	bl	80001d4 <__adddf3>
 8002c50:	4622      	mov	r2, r4
 8002c52:	462b      	mov	r3, r5
 8002c54:	f7fd fc74 	bl	8000540 <__aeabi_dmul>
 8002c58:	a373      	add	r3, pc, #460	; (adr r3, 8002e28 <__ieee754_pow+0x728>)
 8002c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5e:	f7fd fab9 	bl	80001d4 <__adddf3>
 8002c62:	4622      	mov	r2, r4
 8002c64:	462b      	mov	r3, r5
 8002c66:	f7fd fc6b 	bl	8000540 <__aeabi_dmul>
 8002c6a:	a371      	add	r3, pc, #452	; (adr r3, 8002e30 <__ieee754_pow+0x730>)
 8002c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c70:	f7fd fab0 	bl	80001d4 <__adddf3>
 8002c74:	4622      	mov	r2, r4
 8002c76:	4606      	mov	r6, r0
 8002c78:	460f      	mov	r7, r1
 8002c7a:	462b      	mov	r3, r5
 8002c7c:	4620      	mov	r0, r4
 8002c7e:	4629      	mov	r1, r5
 8002c80:	f7fd fc5e 	bl	8000540 <__aeabi_dmul>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4630      	mov	r0, r6
 8002c8a:	4639      	mov	r1, r7
 8002c8c:	f7fd fc58 	bl	8000540 <__aeabi_dmul>
 8002c90:	4642      	mov	r2, r8
 8002c92:	4604      	mov	r4, r0
 8002c94:	460d      	mov	r5, r1
 8002c96:	464b      	mov	r3, r9
 8002c98:	ec51 0b18 	vmov	r0, r1, d8
 8002c9c:	f7fd fa9a 	bl	80001d4 <__adddf3>
 8002ca0:	ec53 2b19 	vmov	r2, r3, d9
 8002ca4:	f7fd fc4c 	bl	8000540 <__aeabi_dmul>
 8002ca8:	4622      	mov	r2, r4
 8002caa:	462b      	mov	r3, r5
 8002cac:	f7fd fa92 	bl	80001d4 <__adddf3>
 8002cb0:	4642      	mov	r2, r8
 8002cb2:	4682      	mov	sl, r0
 8002cb4:	468b      	mov	fp, r1
 8002cb6:	464b      	mov	r3, r9
 8002cb8:	4640      	mov	r0, r8
 8002cba:	4649      	mov	r1, r9
 8002cbc:	f7fd fc40 	bl	8000540 <__aeabi_dmul>
 8002cc0:	4b6b      	ldr	r3, [pc, #428]	; (8002e70 <__ieee754_pow+0x770>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	4606      	mov	r6, r0
 8002cc6:	460f      	mov	r7, r1
 8002cc8:	f7fd fa84 	bl	80001d4 <__adddf3>
 8002ccc:	4652      	mov	r2, sl
 8002cce:	465b      	mov	r3, fp
 8002cd0:	f7fd fa80 	bl	80001d4 <__adddf3>
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	4604      	mov	r4, r0
 8002cd8:	460d      	mov	r5, r1
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4640      	mov	r0, r8
 8002ce0:	4649      	mov	r1, r9
 8002ce2:	f7fd fc2d 	bl	8000540 <__aeabi_dmul>
 8002ce6:	4b62      	ldr	r3, [pc, #392]	; (8002e70 <__ieee754_pow+0x770>)
 8002ce8:	4680      	mov	r8, r0
 8002cea:	4689      	mov	r9, r1
 8002cec:	2200      	movs	r2, #0
 8002cee:	4620      	mov	r0, r4
 8002cf0:	4629      	mov	r1, r5
 8002cf2:	f7fd fa6d 	bl	80001d0 <__aeabi_dsub>
 8002cf6:	4632      	mov	r2, r6
 8002cf8:	463b      	mov	r3, r7
 8002cfa:	f7fd fa69 	bl	80001d0 <__aeabi_dsub>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	4650      	mov	r0, sl
 8002d04:	4659      	mov	r1, fp
 8002d06:	f7fd fa63 	bl	80001d0 <__aeabi_dsub>
 8002d0a:	ec53 2b18 	vmov	r2, r3, d8
 8002d0e:	f7fd fc17 	bl	8000540 <__aeabi_dmul>
 8002d12:	4622      	mov	r2, r4
 8002d14:	4606      	mov	r6, r0
 8002d16:	460f      	mov	r7, r1
 8002d18:	462b      	mov	r3, r5
 8002d1a:	ec51 0b19 	vmov	r0, r1, d9
 8002d1e:	f7fd fc0f 	bl	8000540 <__aeabi_dmul>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4630      	mov	r0, r6
 8002d28:	4639      	mov	r1, r7
 8002d2a:	f7fd fa53 	bl	80001d4 <__adddf3>
 8002d2e:	4606      	mov	r6, r0
 8002d30:	460f      	mov	r7, r1
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4640      	mov	r0, r8
 8002d38:	4649      	mov	r1, r9
 8002d3a:	f7fd fa4b 	bl	80001d4 <__adddf3>
 8002d3e:	a33e      	add	r3, pc, #248	; (adr r3, 8002e38 <__ieee754_pow+0x738>)
 8002d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d44:	2000      	movs	r0, #0
 8002d46:	4604      	mov	r4, r0
 8002d48:	460d      	mov	r5, r1
 8002d4a:	f7fd fbf9 	bl	8000540 <__aeabi_dmul>
 8002d4e:	4642      	mov	r2, r8
 8002d50:	ec41 0b18 	vmov	d8, r0, r1
 8002d54:	464b      	mov	r3, r9
 8002d56:	4620      	mov	r0, r4
 8002d58:	4629      	mov	r1, r5
 8002d5a:	f7fd fa39 	bl	80001d0 <__aeabi_dsub>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4630      	mov	r0, r6
 8002d64:	4639      	mov	r1, r7
 8002d66:	f7fd fa33 	bl	80001d0 <__aeabi_dsub>
 8002d6a:	a335      	add	r3, pc, #212	; (adr r3, 8002e40 <__ieee754_pow+0x740>)
 8002d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d70:	f7fd fbe6 	bl	8000540 <__aeabi_dmul>
 8002d74:	a334      	add	r3, pc, #208	; (adr r3, 8002e48 <__ieee754_pow+0x748>)
 8002d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7a:	4606      	mov	r6, r0
 8002d7c:	460f      	mov	r7, r1
 8002d7e:	4620      	mov	r0, r4
 8002d80:	4629      	mov	r1, r5
 8002d82:	f7fd fbdd 	bl	8000540 <__aeabi_dmul>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4630      	mov	r0, r6
 8002d8c:	4639      	mov	r1, r7
 8002d8e:	f7fd fa21 	bl	80001d4 <__adddf3>
 8002d92:	9a07      	ldr	r2, [sp, #28]
 8002d94:	4b37      	ldr	r3, [pc, #220]	; (8002e74 <__ieee754_pow+0x774>)
 8002d96:	4413      	add	r3, r2
 8002d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9c:	f7fd fa1a 	bl	80001d4 <__adddf3>
 8002da0:	4682      	mov	sl, r0
 8002da2:	9805      	ldr	r0, [sp, #20]
 8002da4:	468b      	mov	fp, r1
 8002da6:	f7fd fb61 	bl	800046c <__aeabi_i2d>
 8002daa:	9a07      	ldr	r2, [sp, #28]
 8002dac:	4b32      	ldr	r3, [pc, #200]	; (8002e78 <__ieee754_pow+0x778>)
 8002dae:	4413      	add	r3, r2
 8002db0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002db4:	4606      	mov	r6, r0
 8002db6:	460f      	mov	r7, r1
 8002db8:	4652      	mov	r2, sl
 8002dba:	465b      	mov	r3, fp
 8002dbc:	ec51 0b18 	vmov	r0, r1, d8
 8002dc0:	f7fd fa08 	bl	80001d4 <__adddf3>
 8002dc4:	4642      	mov	r2, r8
 8002dc6:	464b      	mov	r3, r9
 8002dc8:	f7fd fa04 	bl	80001d4 <__adddf3>
 8002dcc:	4632      	mov	r2, r6
 8002dce:	463b      	mov	r3, r7
 8002dd0:	f7fd fa00 	bl	80001d4 <__adddf3>
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	4632      	mov	r2, r6
 8002dd8:	463b      	mov	r3, r7
 8002dda:	4604      	mov	r4, r0
 8002ddc:	460d      	mov	r5, r1
 8002dde:	f7fd f9f7 	bl	80001d0 <__aeabi_dsub>
 8002de2:	4642      	mov	r2, r8
 8002de4:	464b      	mov	r3, r9
 8002de6:	f7fd f9f3 	bl	80001d0 <__aeabi_dsub>
 8002dea:	ec53 2b18 	vmov	r2, r3, d8
 8002dee:	f7fd f9ef 	bl	80001d0 <__aeabi_dsub>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4650      	mov	r0, sl
 8002df8:	4659      	mov	r1, fp
 8002dfa:	e610      	b.n	8002a1e <__ieee754_pow+0x31e>
 8002dfc:	2401      	movs	r4, #1
 8002dfe:	e6a1      	b.n	8002b44 <__ieee754_pow+0x444>
 8002e00:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8002e50 <__ieee754_pow+0x750>
 8002e04:	e617      	b.n	8002a36 <__ieee754_pow+0x336>
 8002e06:	bf00      	nop
 8002e08:	4a454eef 	.word	0x4a454eef
 8002e0c:	3fca7e28 	.word	0x3fca7e28
 8002e10:	93c9db65 	.word	0x93c9db65
 8002e14:	3fcd864a 	.word	0x3fcd864a
 8002e18:	a91d4101 	.word	0xa91d4101
 8002e1c:	3fd17460 	.word	0x3fd17460
 8002e20:	518f264d 	.word	0x518f264d
 8002e24:	3fd55555 	.word	0x3fd55555
 8002e28:	db6fabff 	.word	0xdb6fabff
 8002e2c:	3fdb6db6 	.word	0x3fdb6db6
 8002e30:	33333303 	.word	0x33333303
 8002e34:	3fe33333 	.word	0x3fe33333
 8002e38:	e0000000 	.word	0xe0000000
 8002e3c:	3feec709 	.word	0x3feec709
 8002e40:	dc3a03fd 	.word	0xdc3a03fd
 8002e44:	3feec709 	.word	0x3feec709
 8002e48:	145b01f5 	.word	0x145b01f5
 8002e4c:	be3e2fe0 	.word	0xbe3e2fe0
 8002e50:	00000000 	.word	0x00000000
 8002e54:	3ff00000 	.word	0x3ff00000
 8002e58:	7ff00000 	.word	0x7ff00000
 8002e5c:	43400000 	.word	0x43400000
 8002e60:	0003988e 	.word	0x0003988e
 8002e64:	000bb679 	.word	0x000bb679
 8002e68:	080046f0 	.word	0x080046f0
 8002e6c:	3ff00000 	.word	0x3ff00000
 8002e70:	40080000 	.word	0x40080000
 8002e74:	08004710 	.word	0x08004710
 8002e78:	08004700 	.word	0x08004700
 8002e7c:	a3b3      	add	r3, pc, #716	; (adr r3, 800314c <__ieee754_pow+0xa4c>)
 8002e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e82:	4640      	mov	r0, r8
 8002e84:	4649      	mov	r1, r9
 8002e86:	f7fd f9a5 	bl	80001d4 <__adddf3>
 8002e8a:	4622      	mov	r2, r4
 8002e8c:	ec41 0b1a 	vmov	d10, r0, r1
 8002e90:	462b      	mov	r3, r5
 8002e92:	4630      	mov	r0, r6
 8002e94:	4639      	mov	r1, r7
 8002e96:	f7fd f99b 	bl	80001d0 <__aeabi_dsub>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	ec51 0b1a 	vmov	r0, r1, d10
 8002ea2:	f7fd fddd 	bl	8000a60 <__aeabi_dcmpgt>
 8002ea6:	2800      	cmp	r0, #0
 8002ea8:	f47f ae04 	bne.w	8002ab4 <__ieee754_pow+0x3b4>
 8002eac:	4aa2      	ldr	r2, [pc, #648]	; (8003138 <__ieee754_pow+0xa38>)
 8002eae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	f340 8107 	ble.w	80030c6 <__ieee754_pow+0x9c6>
 8002eb8:	151b      	asrs	r3, r3, #20
 8002eba:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8002ebe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8002ec2:	fa4a fa03 	asr.w	sl, sl, r3
 8002ec6:	44da      	add	sl, fp
 8002ec8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8002ecc:	489b      	ldr	r0, [pc, #620]	; (800313c <__ieee754_pow+0xa3c>)
 8002ece:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8002ed2:	4108      	asrs	r0, r1
 8002ed4:	ea00 030a 	and.w	r3, r0, sl
 8002ed8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8002edc:	f1c1 0114 	rsb	r1, r1, #20
 8002ee0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8002ee4:	fa4a fa01 	asr.w	sl, sl, r1
 8002ee8:	f1bb 0f00 	cmp.w	fp, #0
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	4629      	mov	r1, r5
 8002ef4:	bfb8      	it	lt
 8002ef6:	f1ca 0a00 	rsblt	sl, sl, #0
 8002efa:	f7fd f969 	bl	80001d0 <__aeabi_dsub>
 8002efe:	ec41 0b19 	vmov	d9, r0, r1
 8002f02:	4642      	mov	r2, r8
 8002f04:	464b      	mov	r3, r9
 8002f06:	ec51 0b19 	vmov	r0, r1, d9
 8002f0a:	f7fd f963 	bl	80001d4 <__adddf3>
 8002f0e:	a37a      	add	r3, pc, #488	; (adr r3, 80030f8 <__ieee754_pow+0x9f8>)
 8002f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f14:	2000      	movs	r0, #0
 8002f16:	4604      	mov	r4, r0
 8002f18:	460d      	mov	r5, r1
 8002f1a:	f7fd fb11 	bl	8000540 <__aeabi_dmul>
 8002f1e:	ec53 2b19 	vmov	r2, r3, d9
 8002f22:	4606      	mov	r6, r0
 8002f24:	460f      	mov	r7, r1
 8002f26:	4620      	mov	r0, r4
 8002f28:	4629      	mov	r1, r5
 8002f2a:	f7fd f951 	bl	80001d0 <__aeabi_dsub>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	4640      	mov	r0, r8
 8002f34:	4649      	mov	r1, r9
 8002f36:	f7fd f94b 	bl	80001d0 <__aeabi_dsub>
 8002f3a:	a371      	add	r3, pc, #452	; (adr r3, 8003100 <__ieee754_pow+0xa00>)
 8002f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f40:	f7fd fafe 	bl	8000540 <__aeabi_dmul>
 8002f44:	a370      	add	r3, pc, #448	; (adr r3, 8003108 <__ieee754_pow+0xa08>)
 8002f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4a:	4680      	mov	r8, r0
 8002f4c:	4689      	mov	r9, r1
 8002f4e:	4620      	mov	r0, r4
 8002f50:	4629      	mov	r1, r5
 8002f52:	f7fd faf5 	bl	8000540 <__aeabi_dmul>
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	4640      	mov	r0, r8
 8002f5c:	4649      	mov	r1, r9
 8002f5e:	f7fd f939 	bl	80001d4 <__adddf3>
 8002f62:	4604      	mov	r4, r0
 8002f64:	460d      	mov	r5, r1
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4630      	mov	r0, r6
 8002f6c:	4639      	mov	r1, r7
 8002f6e:	f7fd f931 	bl	80001d4 <__adddf3>
 8002f72:	4632      	mov	r2, r6
 8002f74:	463b      	mov	r3, r7
 8002f76:	4680      	mov	r8, r0
 8002f78:	4689      	mov	r9, r1
 8002f7a:	f7fd f929 	bl	80001d0 <__aeabi_dsub>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	4620      	mov	r0, r4
 8002f84:	4629      	mov	r1, r5
 8002f86:	f7fd f923 	bl	80001d0 <__aeabi_dsub>
 8002f8a:	4642      	mov	r2, r8
 8002f8c:	4606      	mov	r6, r0
 8002f8e:	460f      	mov	r7, r1
 8002f90:	464b      	mov	r3, r9
 8002f92:	4640      	mov	r0, r8
 8002f94:	4649      	mov	r1, r9
 8002f96:	f7fd fad3 	bl	8000540 <__aeabi_dmul>
 8002f9a:	a35d      	add	r3, pc, #372	; (adr r3, 8003110 <__ieee754_pow+0xa10>)
 8002f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa0:	4604      	mov	r4, r0
 8002fa2:	460d      	mov	r5, r1
 8002fa4:	f7fd facc 	bl	8000540 <__aeabi_dmul>
 8002fa8:	a35b      	add	r3, pc, #364	; (adr r3, 8003118 <__ieee754_pow+0xa18>)
 8002faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fae:	f7fd f90f 	bl	80001d0 <__aeabi_dsub>
 8002fb2:	4622      	mov	r2, r4
 8002fb4:	462b      	mov	r3, r5
 8002fb6:	f7fd fac3 	bl	8000540 <__aeabi_dmul>
 8002fba:	a359      	add	r3, pc, #356	; (adr r3, 8003120 <__ieee754_pow+0xa20>)
 8002fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc0:	f7fd f908 	bl	80001d4 <__adddf3>
 8002fc4:	4622      	mov	r2, r4
 8002fc6:	462b      	mov	r3, r5
 8002fc8:	f7fd faba 	bl	8000540 <__aeabi_dmul>
 8002fcc:	a356      	add	r3, pc, #344	; (adr r3, 8003128 <__ieee754_pow+0xa28>)
 8002fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd2:	f7fd f8fd 	bl	80001d0 <__aeabi_dsub>
 8002fd6:	4622      	mov	r2, r4
 8002fd8:	462b      	mov	r3, r5
 8002fda:	f7fd fab1 	bl	8000540 <__aeabi_dmul>
 8002fde:	a354      	add	r3, pc, #336	; (adr r3, 8003130 <__ieee754_pow+0xa30>)
 8002fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe4:	f7fd f8f6 	bl	80001d4 <__adddf3>
 8002fe8:	4622      	mov	r2, r4
 8002fea:	462b      	mov	r3, r5
 8002fec:	f7fd faa8 	bl	8000540 <__aeabi_dmul>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4640      	mov	r0, r8
 8002ff6:	4649      	mov	r1, r9
 8002ff8:	f7fd f8ea 	bl	80001d0 <__aeabi_dsub>
 8002ffc:	4604      	mov	r4, r0
 8002ffe:	460d      	mov	r5, r1
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4640      	mov	r0, r8
 8003006:	4649      	mov	r1, r9
 8003008:	f7fd fa9a 	bl	8000540 <__aeabi_dmul>
 800300c:	2200      	movs	r2, #0
 800300e:	ec41 0b19 	vmov	d9, r0, r1
 8003012:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003016:	4620      	mov	r0, r4
 8003018:	4629      	mov	r1, r5
 800301a:	f7fd f8d9 	bl	80001d0 <__aeabi_dsub>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	ec51 0b19 	vmov	r0, r1, d9
 8003026:	f7fd fbb5 	bl	8000794 <__aeabi_ddiv>
 800302a:	4632      	mov	r2, r6
 800302c:	4604      	mov	r4, r0
 800302e:	460d      	mov	r5, r1
 8003030:	463b      	mov	r3, r7
 8003032:	4640      	mov	r0, r8
 8003034:	4649      	mov	r1, r9
 8003036:	f7fd fa83 	bl	8000540 <__aeabi_dmul>
 800303a:	4632      	mov	r2, r6
 800303c:	463b      	mov	r3, r7
 800303e:	f7fd f8c9 	bl	80001d4 <__adddf3>
 8003042:	4602      	mov	r2, r0
 8003044:	460b      	mov	r3, r1
 8003046:	4620      	mov	r0, r4
 8003048:	4629      	mov	r1, r5
 800304a:	f7fd f8c1 	bl	80001d0 <__aeabi_dsub>
 800304e:	4642      	mov	r2, r8
 8003050:	464b      	mov	r3, r9
 8003052:	f7fd f8bd 	bl	80001d0 <__aeabi_dsub>
 8003056:	460b      	mov	r3, r1
 8003058:	4602      	mov	r2, r0
 800305a:	4939      	ldr	r1, [pc, #228]	; (8003140 <__ieee754_pow+0xa40>)
 800305c:	2000      	movs	r0, #0
 800305e:	f7fd f8b7 	bl	80001d0 <__aeabi_dsub>
 8003062:	ec41 0b10 	vmov	d0, r0, r1
 8003066:	ee10 3a90 	vmov	r3, s1
 800306a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800306e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003072:	da2b      	bge.n	80030cc <__ieee754_pow+0x9cc>
 8003074:	4650      	mov	r0, sl
 8003076:	f000 fa53 	bl	8003520 <scalbn>
 800307a:	ec51 0b10 	vmov	r0, r1, d0
 800307e:	ec53 2b18 	vmov	r2, r3, d8
 8003082:	f7ff bbee 	b.w	8002862 <__ieee754_pow+0x162>
 8003086:	4b2f      	ldr	r3, [pc, #188]	; (8003144 <__ieee754_pow+0xa44>)
 8003088:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800308c:	429e      	cmp	r6, r3
 800308e:	f77f af0d 	ble.w	8002eac <__ieee754_pow+0x7ac>
 8003092:	4b2d      	ldr	r3, [pc, #180]	; (8003148 <__ieee754_pow+0xa48>)
 8003094:	440b      	add	r3, r1
 8003096:	4303      	orrs	r3, r0
 8003098:	d009      	beq.n	80030ae <__ieee754_pow+0x9ae>
 800309a:	ec51 0b18 	vmov	r0, r1, d8
 800309e:	2200      	movs	r2, #0
 80030a0:	2300      	movs	r3, #0
 80030a2:	f7fd fcbf 	bl	8000a24 <__aeabi_dcmplt>
 80030a6:	3800      	subs	r0, #0
 80030a8:	bf18      	it	ne
 80030aa:	2001      	movne	r0, #1
 80030ac:	e448      	b.n	8002940 <__ieee754_pow+0x240>
 80030ae:	4622      	mov	r2, r4
 80030b0:	462b      	mov	r3, r5
 80030b2:	f7fd f88d 	bl	80001d0 <__aeabi_dsub>
 80030b6:	4642      	mov	r2, r8
 80030b8:	464b      	mov	r3, r9
 80030ba:	f7fd fcc7 	bl	8000a4c <__aeabi_dcmpge>
 80030be:	2800      	cmp	r0, #0
 80030c0:	f43f aef4 	beq.w	8002eac <__ieee754_pow+0x7ac>
 80030c4:	e7e9      	b.n	800309a <__ieee754_pow+0x99a>
 80030c6:	f04f 0a00 	mov.w	sl, #0
 80030ca:	e71a      	b.n	8002f02 <__ieee754_pow+0x802>
 80030cc:	ec51 0b10 	vmov	r0, r1, d0
 80030d0:	4619      	mov	r1, r3
 80030d2:	e7d4      	b.n	800307e <__ieee754_pow+0x97e>
 80030d4:	491a      	ldr	r1, [pc, #104]	; (8003140 <__ieee754_pow+0xa40>)
 80030d6:	2000      	movs	r0, #0
 80030d8:	f7ff bb31 	b.w	800273e <__ieee754_pow+0x3e>
 80030dc:	2000      	movs	r0, #0
 80030de:	2100      	movs	r1, #0
 80030e0:	f7ff bb2d 	b.w	800273e <__ieee754_pow+0x3e>
 80030e4:	4630      	mov	r0, r6
 80030e6:	4639      	mov	r1, r7
 80030e8:	f7ff bb29 	b.w	800273e <__ieee754_pow+0x3e>
 80030ec:	9204      	str	r2, [sp, #16]
 80030ee:	f7ff bb7b 	b.w	80027e8 <__ieee754_pow+0xe8>
 80030f2:	2300      	movs	r3, #0
 80030f4:	f7ff bb65 	b.w	80027c2 <__ieee754_pow+0xc2>
 80030f8:	00000000 	.word	0x00000000
 80030fc:	3fe62e43 	.word	0x3fe62e43
 8003100:	fefa39ef 	.word	0xfefa39ef
 8003104:	3fe62e42 	.word	0x3fe62e42
 8003108:	0ca86c39 	.word	0x0ca86c39
 800310c:	be205c61 	.word	0xbe205c61
 8003110:	72bea4d0 	.word	0x72bea4d0
 8003114:	3e663769 	.word	0x3e663769
 8003118:	c5d26bf1 	.word	0xc5d26bf1
 800311c:	3ebbbd41 	.word	0x3ebbbd41
 8003120:	af25de2c 	.word	0xaf25de2c
 8003124:	3f11566a 	.word	0x3f11566a
 8003128:	16bebd93 	.word	0x16bebd93
 800312c:	3f66c16c 	.word	0x3f66c16c
 8003130:	5555553e 	.word	0x5555553e
 8003134:	3fc55555 	.word	0x3fc55555
 8003138:	3fe00000 	.word	0x3fe00000
 800313c:	fff00000 	.word	0xfff00000
 8003140:	3ff00000 	.word	0x3ff00000
 8003144:	4090cbff 	.word	0x4090cbff
 8003148:	3f6f3400 	.word	0x3f6f3400
 800314c:	652b82fe 	.word	0x652b82fe
 8003150:	3c971547 	.word	0x3c971547

08003154 <fabs>:
 8003154:	ec51 0b10 	vmov	r0, r1, d0
 8003158:	ee10 2a10 	vmov	r2, s0
 800315c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003160:	ec43 2b10 	vmov	d0, r2, r3
 8003164:	4770      	bx	lr
	...

08003168 <__kernel_cosf>:
 8003168:	ee10 3a10 	vmov	r3, s0
 800316c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003170:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8003174:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003178:	da05      	bge.n	8003186 <__kernel_cosf+0x1e>
 800317a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800317e:	ee17 2a90 	vmov	r2, s15
 8003182:	2a00      	cmp	r2, #0
 8003184:	d03b      	beq.n	80031fe <__kernel_cosf+0x96>
 8003186:	ee20 7a00 	vmul.f32	s14, s0, s0
 800318a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8003204 <__kernel_cosf+0x9c>
 800318e:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8003208 <__kernel_cosf+0xa0>
 8003192:	4a1e      	ldr	r2, [pc, #120]	; (800320c <__kernel_cosf+0xa4>)
 8003194:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003198:	4293      	cmp	r3, r2
 800319a:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8003210 <__kernel_cosf+0xa8>
 800319e:	eee6 7a07 	vfma.f32	s15, s12, s14
 80031a2:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8003214 <__kernel_cosf+0xac>
 80031a6:	eea7 6a87 	vfma.f32	s12, s15, s14
 80031aa:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8003218 <__kernel_cosf+0xb0>
 80031ae:	eee6 7a07 	vfma.f32	s15, s12, s14
 80031b2:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 800321c <__kernel_cosf+0xb4>
 80031b6:	eea7 6a87 	vfma.f32	s12, s15, s14
 80031ba:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80031be:	ee26 6a07 	vmul.f32	s12, s12, s14
 80031c2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80031c6:	eee7 0a06 	vfma.f32	s1, s14, s12
 80031ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ce:	dc04      	bgt.n	80031da <__kernel_cosf+0x72>
 80031d0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80031d4:	ee36 0ae7 	vsub.f32	s0, s13, s15
 80031d8:	4770      	bx	lr
 80031da:	4a11      	ldr	r2, [pc, #68]	; (8003220 <__kernel_cosf+0xb8>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	bfda      	itte	le
 80031e0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80031e4:	ee07 3a10 	vmovle	s14, r3
 80031e8:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80031ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031f0:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80031f4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80031f8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80031fc:	4770      	bx	lr
 80031fe:	eeb0 0a66 	vmov.f32	s0, s13
 8003202:	4770      	bx	lr
 8003204:	ad47d74e 	.word	0xad47d74e
 8003208:	310f74f6 	.word	0x310f74f6
 800320c:	3e999999 	.word	0x3e999999
 8003210:	b493f27c 	.word	0xb493f27c
 8003214:	37d00d01 	.word	0x37d00d01
 8003218:	bab60b61 	.word	0xbab60b61
 800321c:	3d2aaaab 	.word	0x3d2aaaab
 8003220:	3f480000 	.word	0x3f480000

08003224 <__kernel_sinf>:
 8003224:	ee10 3a10 	vmov	r3, s0
 8003228:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800322c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8003230:	da04      	bge.n	800323c <__kernel_sinf+0x18>
 8003232:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003236:	ee17 3a90 	vmov	r3, s15
 800323a:	b35b      	cbz	r3, 8003294 <__kernel_sinf+0x70>
 800323c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8003240:	eddf 7a15 	vldr	s15, [pc, #84]	; 8003298 <__kernel_sinf+0x74>
 8003244:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800329c <__kernel_sinf+0x78>
 8003248:	eea7 6a27 	vfma.f32	s12, s14, s15
 800324c:	eddf 7a14 	vldr	s15, [pc, #80]	; 80032a0 <__kernel_sinf+0x7c>
 8003250:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003254:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80032a4 <__kernel_sinf+0x80>
 8003258:	eea7 6a87 	vfma.f32	s12, s15, s14
 800325c:	eddf 7a12 	vldr	s15, [pc, #72]	; 80032a8 <__kernel_sinf+0x84>
 8003260:	ee60 6a07 	vmul.f32	s13, s0, s14
 8003264:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003268:	b930      	cbnz	r0, 8003278 <__kernel_sinf+0x54>
 800326a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80032ac <__kernel_sinf+0x88>
 800326e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003272:	eea6 0a26 	vfma.f32	s0, s12, s13
 8003276:	4770      	bx	lr
 8003278:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800327c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8003280:	eee0 7a86 	vfma.f32	s15, s1, s12
 8003284:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8003288:	eddf 7a09 	vldr	s15, [pc, #36]	; 80032b0 <__kernel_sinf+0x8c>
 800328c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8003290:	ee30 0a60 	vsub.f32	s0, s0, s1
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	2f2ec9d3 	.word	0x2f2ec9d3
 800329c:	b2d72f34 	.word	0xb2d72f34
 80032a0:	3638ef1b 	.word	0x3638ef1b
 80032a4:	b9500d01 	.word	0xb9500d01
 80032a8:	3c088889 	.word	0x3c088889
 80032ac:	be2aaaab 	.word	0xbe2aaaab
 80032b0:	3e2aaaab 	.word	0x3e2aaaab

080032b4 <__ieee754_rem_pio2f>:
 80032b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032b6:	ee10 6a10 	vmov	r6, s0
 80032ba:	4b86      	ldr	r3, [pc, #536]	; (80034d4 <__ieee754_rem_pio2f+0x220>)
 80032bc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80032c0:	429d      	cmp	r5, r3
 80032c2:	b087      	sub	sp, #28
 80032c4:	4604      	mov	r4, r0
 80032c6:	dc05      	bgt.n	80032d4 <__ieee754_rem_pio2f+0x20>
 80032c8:	2300      	movs	r3, #0
 80032ca:	ed80 0a00 	vstr	s0, [r0]
 80032ce:	6043      	str	r3, [r0, #4]
 80032d0:	2000      	movs	r0, #0
 80032d2:	e020      	b.n	8003316 <__ieee754_rem_pio2f+0x62>
 80032d4:	4b80      	ldr	r3, [pc, #512]	; (80034d8 <__ieee754_rem_pio2f+0x224>)
 80032d6:	429d      	cmp	r5, r3
 80032d8:	dc38      	bgt.n	800334c <__ieee754_rem_pio2f+0x98>
 80032da:	2e00      	cmp	r6, #0
 80032dc:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80034dc <__ieee754_rem_pio2f+0x228>
 80032e0:	4b7f      	ldr	r3, [pc, #508]	; (80034e0 <__ieee754_rem_pio2f+0x22c>)
 80032e2:	f025 050f 	bic.w	r5, r5, #15
 80032e6:	dd18      	ble.n	800331a <__ieee754_rem_pio2f+0x66>
 80032e8:	429d      	cmp	r5, r3
 80032ea:	ee70 7a47 	vsub.f32	s15, s0, s14
 80032ee:	bf09      	itett	eq
 80032f0:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80034e4 <__ieee754_rem_pio2f+0x230>
 80032f4:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80034e8 <__ieee754_rem_pio2f+0x234>
 80032f8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80032fc:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80034ec <__ieee754_rem_pio2f+0x238>
 8003300:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8003304:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003308:	edc0 6a00 	vstr	s13, [r0]
 800330c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003310:	edc0 7a01 	vstr	s15, [r0, #4]
 8003314:	2001      	movs	r0, #1
 8003316:	b007      	add	sp, #28
 8003318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800331a:	429d      	cmp	r5, r3
 800331c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8003320:	bf09      	itett	eq
 8003322:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80034e4 <__ieee754_rem_pio2f+0x230>
 8003326:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80034e8 <__ieee754_rem_pio2f+0x234>
 800332a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800332e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80034ec <__ieee754_rem_pio2f+0x238>
 8003332:	ee77 6a87 	vadd.f32	s13, s15, s14
 8003336:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800333a:	edc0 6a00 	vstr	s13, [r0]
 800333e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003342:	edc0 7a01 	vstr	s15, [r0, #4]
 8003346:	f04f 30ff 	mov.w	r0, #4294967295
 800334a:	e7e4      	b.n	8003316 <__ieee754_rem_pio2f+0x62>
 800334c:	4b68      	ldr	r3, [pc, #416]	; (80034f0 <__ieee754_rem_pio2f+0x23c>)
 800334e:	429d      	cmp	r5, r3
 8003350:	dc71      	bgt.n	8003436 <__ieee754_rem_pio2f+0x182>
 8003352:	f000 f8db 	bl	800350c <fabsf>
 8003356:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80034f4 <__ieee754_rem_pio2f+0x240>
 800335a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800335e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003366:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800336a:	ee17 0a90 	vmov	r0, s15
 800336e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80034dc <__ieee754_rem_pio2f+0x228>
 8003372:	eea7 0a67 	vfms.f32	s0, s14, s15
 8003376:	281f      	cmp	r0, #31
 8003378:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80034e8 <__ieee754_rem_pio2f+0x234>
 800337c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003380:	eeb1 6a47 	vneg.f32	s12, s14
 8003384:	ee70 6a67 	vsub.f32	s13, s0, s15
 8003388:	ee16 2a90 	vmov	r2, s13
 800338c:	dc1c      	bgt.n	80033c8 <__ieee754_rem_pio2f+0x114>
 800338e:	495a      	ldr	r1, [pc, #360]	; (80034f8 <__ieee754_rem_pio2f+0x244>)
 8003390:	1e47      	subs	r7, r0, #1
 8003392:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8003396:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800339a:	428b      	cmp	r3, r1
 800339c:	d014      	beq.n	80033c8 <__ieee754_rem_pio2f+0x114>
 800339e:	6022      	str	r2, [r4, #0]
 80033a0:	ed94 7a00 	vldr	s14, [r4]
 80033a4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80033a8:	2e00      	cmp	r6, #0
 80033aa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80033ae:	ed84 0a01 	vstr	s0, [r4, #4]
 80033b2:	dab0      	bge.n	8003316 <__ieee754_rem_pio2f+0x62>
 80033b4:	eeb1 7a47 	vneg.f32	s14, s14
 80033b8:	eeb1 0a40 	vneg.f32	s0, s0
 80033bc:	ed84 7a00 	vstr	s14, [r4]
 80033c0:	ed84 0a01 	vstr	s0, [r4, #4]
 80033c4:	4240      	negs	r0, r0
 80033c6:	e7a6      	b.n	8003316 <__ieee754_rem_pio2f+0x62>
 80033c8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80033cc:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 80033d0:	2908      	cmp	r1, #8
 80033d2:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80033d6:	dde2      	ble.n	800339e <__ieee754_rem_pio2f+0xea>
 80033d8:	eddf 5a42 	vldr	s11, [pc, #264]	; 80034e4 <__ieee754_rem_pio2f+0x230>
 80033dc:	eef0 6a40 	vmov.f32	s13, s0
 80033e0:	eee6 6a25 	vfma.f32	s13, s12, s11
 80033e4:	ee70 7a66 	vsub.f32	s15, s0, s13
 80033e8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80033ec:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80034ec <__ieee754_rem_pio2f+0x238>
 80033f0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80033f4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80033f8:	ee15 2a90 	vmov	r2, s11
 80033fc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8003400:	1a5b      	subs	r3, r3, r1
 8003402:	2b19      	cmp	r3, #25
 8003404:	dc04      	bgt.n	8003410 <__ieee754_rem_pio2f+0x15c>
 8003406:	edc4 5a00 	vstr	s11, [r4]
 800340a:	eeb0 0a66 	vmov.f32	s0, s13
 800340e:	e7c7      	b.n	80033a0 <__ieee754_rem_pio2f+0xec>
 8003410:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80034fc <__ieee754_rem_pio2f+0x248>
 8003414:	eeb0 0a66 	vmov.f32	s0, s13
 8003418:	eea6 0a25 	vfma.f32	s0, s12, s11
 800341c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8003420:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003500 <__ieee754_rem_pio2f+0x24c>
 8003424:	eee6 7a25 	vfma.f32	s15, s12, s11
 8003428:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800342c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8003430:	ed84 7a00 	vstr	s14, [r4]
 8003434:	e7b4      	b.n	80033a0 <__ieee754_rem_pio2f+0xec>
 8003436:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800343a:	db06      	blt.n	800344a <__ieee754_rem_pio2f+0x196>
 800343c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8003440:	edc0 7a01 	vstr	s15, [r0, #4]
 8003444:	edc0 7a00 	vstr	s15, [r0]
 8003448:	e742      	b.n	80032d0 <__ieee754_rem_pio2f+0x1c>
 800344a:	15ea      	asrs	r2, r5, #23
 800344c:	3a86      	subs	r2, #134	; 0x86
 800344e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8003452:	ee07 3a90 	vmov	s15, r3
 8003456:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800345a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8003504 <__ieee754_rem_pio2f+0x250>
 800345e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003462:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003466:	ed8d 7a03 	vstr	s14, [sp, #12]
 800346a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800346e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003472:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003476:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800347a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800347e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003482:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800348a:	edcd 7a05 	vstr	s15, [sp, #20]
 800348e:	d11e      	bne.n	80034ce <__ieee754_rem_pio2f+0x21a>
 8003490:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8003494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003498:	bf14      	ite	ne
 800349a:	2302      	movne	r3, #2
 800349c:	2301      	moveq	r3, #1
 800349e:	491a      	ldr	r1, [pc, #104]	; (8003508 <__ieee754_rem_pio2f+0x254>)
 80034a0:	9101      	str	r1, [sp, #4]
 80034a2:	2102      	movs	r1, #2
 80034a4:	9100      	str	r1, [sp, #0]
 80034a6:	a803      	add	r0, sp, #12
 80034a8:	4621      	mov	r1, r4
 80034aa:	f000 f9c1 	bl	8003830 <__kernel_rem_pio2f>
 80034ae:	2e00      	cmp	r6, #0
 80034b0:	f6bf af31 	bge.w	8003316 <__ieee754_rem_pio2f+0x62>
 80034b4:	edd4 7a00 	vldr	s15, [r4]
 80034b8:	eef1 7a67 	vneg.f32	s15, s15
 80034bc:	edc4 7a00 	vstr	s15, [r4]
 80034c0:	edd4 7a01 	vldr	s15, [r4, #4]
 80034c4:	eef1 7a67 	vneg.f32	s15, s15
 80034c8:	edc4 7a01 	vstr	s15, [r4, #4]
 80034cc:	e77a      	b.n	80033c4 <__ieee754_rem_pio2f+0x110>
 80034ce:	2303      	movs	r3, #3
 80034d0:	e7e5      	b.n	800349e <__ieee754_rem_pio2f+0x1ea>
 80034d2:	bf00      	nop
 80034d4:	3f490fd8 	.word	0x3f490fd8
 80034d8:	4016cbe3 	.word	0x4016cbe3
 80034dc:	3fc90f80 	.word	0x3fc90f80
 80034e0:	3fc90fd0 	.word	0x3fc90fd0
 80034e4:	37354400 	.word	0x37354400
 80034e8:	37354443 	.word	0x37354443
 80034ec:	2e85a308 	.word	0x2e85a308
 80034f0:	43490f80 	.word	0x43490f80
 80034f4:	3f22f984 	.word	0x3f22f984
 80034f8:	08004720 	.word	0x08004720
 80034fc:	2e85a300 	.word	0x2e85a300
 8003500:	248d3132 	.word	0x248d3132
 8003504:	43800000 	.word	0x43800000
 8003508:	080047a0 	.word	0x080047a0

0800350c <fabsf>:
 800350c:	ee10 3a10 	vmov	r3, s0
 8003510:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003514:	ee00 3a10 	vmov	s0, r3
 8003518:	4770      	bx	lr
 800351a:	0000      	movs	r0, r0
 800351c:	0000      	movs	r0, r0
	...

08003520 <scalbn>:
 8003520:	b570      	push	{r4, r5, r6, lr}
 8003522:	ec55 4b10 	vmov	r4, r5, d0
 8003526:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800352a:	4606      	mov	r6, r0
 800352c:	462b      	mov	r3, r5
 800352e:	b999      	cbnz	r1, 8003558 <scalbn+0x38>
 8003530:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003534:	4323      	orrs	r3, r4
 8003536:	d03f      	beq.n	80035b8 <scalbn+0x98>
 8003538:	4b35      	ldr	r3, [pc, #212]	; (8003610 <scalbn+0xf0>)
 800353a:	4629      	mov	r1, r5
 800353c:	ee10 0a10 	vmov	r0, s0
 8003540:	2200      	movs	r2, #0
 8003542:	f7fc fffd 	bl	8000540 <__aeabi_dmul>
 8003546:	4b33      	ldr	r3, [pc, #204]	; (8003614 <scalbn+0xf4>)
 8003548:	429e      	cmp	r6, r3
 800354a:	4604      	mov	r4, r0
 800354c:	460d      	mov	r5, r1
 800354e:	da10      	bge.n	8003572 <scalbn+0x52>
 8003550:	a327      	add	r3, pc, #156	; (adr r3, 80035f0 <scalbn+0xd0>)
 8003552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003556:	e01f      	b.n	8003598 <scalbn+0x78>
 8003558:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800355c:	4291      	cmp	r1, r2
 800355e:	d10c      	bne.n	800357a <scalbn+0x5a>
 8003560:	ee10 2a10 	vmov	r2, s0
 8003564:	4620      	mov	r0, r4
 8003566:	4629      	mov	r1, r5
 8003568:	f7fc fe34 	bl	80001d4 <__adddf3>
 800356c:	4604      	mov	r4, r0
 800356e:	460d      	mov	r5, r1
 8003570:	e022      	b.n	80035b8 <scalbn+0x98>
 8003572:	460b      	mov	r3, r1
 8003574:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8003578:	3936      	subs	r1, #54	; 0x36
 800357a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800357e:	4296      	cmp	r6, r2
 8003580:	dd0d      	ble.n	800359e <scalbn+0x7e>
 8003582:	2d00      	cmp	r5, #0
 8003584:	a11c      	add	r1, pc, #112	; (adr r1, 80035f8 <scalbn+0xd8>)
 8003586:	e9d1 0100 	ldrd	r0, r1, [r1]
 800358a:	da02      	bge.n	8003592 <scalbn+0x72>
 800358c:	a11c      	add	r1, pc, #112	; (adr r1, 8003600 <scalbn+0xe0>)
 800358e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003592:	a319      	add	r3, pc, #100	; (adr r3, 80035f8 <scalbn+0xd8>)
 8003594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003598:	f7fc ffd2 	bl	8000540 <__aeabi_dmul>
 800359c:	e7e6      	b.n	800356c <scalbn+0x4c>
 800359e:	1872      	adds	r2, r6, r1
 80035a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80035a4:	428a      	cmp	r2, r1
 80035a6:	dcec      	bgt.n	8003582 <scalbn+0x62>
 80035a8:	2a00      	cmp	r2, #0
 80035aa:	dd08      	ble.n	80035be <scalbn+0x9e>
 80035ac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80035b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80035b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80035b8:	ec45 4b10 	vmov	d0, r4, r5
 80035bc:	bd70      	pop	{r4, r5, r6, pc}
 80035be:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80035c2:	da08      	bge.n	80035d6 <scalbn+0xb6>
 80035c4:	2d00      	cmp	r5, #0
 80035c6:	a10a      	add	r1, pc, #40	; (adr r1, 80035f0 <scalbn+0xd0>)
 80035c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035cc:	dac0      	bge.n	8003550 <scalbn+0x30>
 80035ce:	a10e      	add	r1, pc, #56	; (adr r1, 8003608 <scalbn+0xe8>)
 80035d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035d4:	e7bc      	b.n	8003550 <scalbn+0x30>
 80035d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80035da:	3236      	adds	r2, #54	; 0x36
 80035dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80035e0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80035e4:	4620      	mov	r0, r4
 80035e6:	4b0c      	ldr	r3, [pc, #48]	; (8003618 <scalbn+0xf8>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	e7d5      	b.n	8003598 <scalbn+0x78>
 80035ec:	f3af 8000 	nop.w
 80035f0:	c2f8f359 	.word	0xc2f8f359
 80035f4:	01a56e1f 	.word	0x01a56e1f
 80035f8:	8800759c 	.word	0x8800759c
 80035fc:	7e37e43c 	.word	0x7e37e43c
 8003600:	8800759c 	.word	0x8800759c
 8003604:	fe37e43c 	.word	0xfe37e43c
 8003608:	c2f8f359 	.word	0xc2f8f359
 800360c:	81a56e1f 	.word	0x81a56e1f
 8003610:	43500000 	.word	0x43500000
 8003614:	ffff3cb0 	.word	0xffff3cb0
 8003618:	3c900000 	.word	0x3c900000

0800361c <with_errno>:
 800361c:	b570      	push	{r4, r5, r6, lr}
 800361e:	4604      	mov	r4, r0
 8003620:	460d      	mov	r5, r1
 8003622:	4616      	mov	r6, r2
 8003624:	f7fe ff1a 	bl	800245c <__errno>
 8003628:	4629      	mov	r1, r5
 800362a:	6006      	str	r6, [r0, #0]
 800362c:	4620      	mov	r0, r4
 800362e:	bd70      	pop	{r4, r5, r6, pc}

08003630 <xflow>:
 8003630:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003632:	4614      	mov	r4, r2
 8003634:	461d      	mov	r5, r3
 8003636:	b108      	cbz	r0, 800363c <xflow+0xc>
 8003638:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800363c:	e9cd 2300 	strd	r2, r3, [sp]
 8003640:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003644:	4620      	mov	r0, r4
 8003646:	4629      	mov	r1, r5
 8003648:	f7fc ff7a 	bl	8000540 <__aeabi_dmul>
 800364c:	2222      	movs	r2, #34	; 0x22
 800364e:	b003      	add	sp, #12
 8003650:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003654:	f7ff bfe2 	b.w	800361c <with_errno>

08003658 <__math_uflow>:
 8003658:	b508      	push	{r3, lr}
 800365a:	2200      	movs	r2, #0
 800365c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003660:	f7ff ffe6 	bl	8003630 <xflow>
 8003664:	ec41 0b10 	vmov	d0, r0, r1
 8003668:	bd08      	pop	{r3, pc}

0800366a <__math_oflow>:
 800366a:	b508      	push	{r3, lr}
 800366c:	2200      	movs	r2, #0
 800366e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8003672:	f7ff ffdd 	bl	8003630 <xflow>
 8003676:	ec41 0b10 	vmov	d0, r0, r1
 800367a:	bd08      	pop	{r3, pc}

0800367c <__ieee754_sqrt>:
 800367c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003680:	ec55 4b10 	vmov	r4, r5, d0
 8003684:	4e67      	ldr	r6, [pc, #412]	; (8003824 <__ieee754_sqrt+0x1a8>)
 8003686:	43ae      	bics	r6, r5
 8003688:	ee10 0a10 	vmov	r0, s0
 800368c:	ee10 2a10 	vmov	r2, s0
 8003690:	4629      	mov	r1, r5
 8003692:	462b      	mov	r3, r5
 8003694:	d10d      	bne.n	80036b2 <__ieee754_sqrt+0x36>
 8003696:	f7fc ff53 	bl	8000540 <__aeabi_dmul>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4620      	mov	r0, r4
 80036a0:	4629      	mov	r1, r5
 80036a2:	f7fc fd97 	bl	80001d4 <__adddf3>
 80036a6:	4604      	mov	r4, r0
 80036a8:	460d      	mov	r5, r1
 80036aa:	ec45 4b10 	vmov	d0, r4, r5
 80036ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036b2:	2d00      	cmp	r5, #0
 80036b4:	dc0b      	bgt.n	80036ce <__ieee754_sqrt+0x52>
 80036b6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80036ba:	4326      	orrs	r6, r4
 80036bc:	d0f5      	beq.n	80036aa <__ieee754_sqrt+0x2e>
 80036be:	b135      	cbz	r5, 80036ce <__ieee754_sqrt+0x52>
 80036c0:	f7fc fd86 	bl	80001d0 <__aeabi_dsub>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	f7fd f864 	bl	8000794 <__aeabi_ddiv>
 80036cc:	e7eb      	b.n	80036a6 <__ieee754_sqrt+0x2a>
 80036ce:	1509      	asrs	r1, r1, #20
 80036d0:	f000 808d 	beq.w	80037ee <__ieee754_sqrt+0x172>
 80036d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036d8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80036dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036e0:	07c9      	lsls	r1, r1, #31
 80036e2:	bf5c      	itt	pl
 80036e4:	005b      	lslpl	r3, r3, #1
 80036e6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80036ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80036ee:	bf58      	it	pl
 80036f0:	0052      	lslpl	r2, r2, #1
 80036f2:	2500      	movs	r5, #0
 80036f4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80036f8:	1076      	asrs	r6, r6, #1
 80036fa:	0052      	lsls	r2, r2, #1
 80036fc:	f04f 0e16 	mov.w	lr, #22
 8003700:	46ac      	mov	ip, r5
 8003702:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003706:	eb0c 0001 	add.w	r0, ip, r1
 800370a:	4298      	cmp	r0, r3
 800370c:	bfde      	ittt	le
 800370e:	1a1b      	suble	r3, r3, r0
 8003710:	eb00 0c01 	addle.w	ip, r0, r1
 8003714:	186d      	addle	r5, r5, r1
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	f1be 0e01 	subs.w	lr, lr, #1
 800371c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8003720:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8003724:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003728:	d1ed      	bne.n	8003706 <__ieee754_sqrt+0x8a>
 800372a:	4674      	mov	r4, lr
 800372c:	2720      	movs	r7, #32
 800372e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003732:	4563      	cmp	r3, ip
 8003734:	eb01 000e 	add.w	r0, r1, lr
 8003738:	dc02      	bgt.n	8003740 <__ieee754_sqrt+0xc4>
 800373a:	d113      	bne.n	8003764 <__ieee754_sqrt+0xe8>
 800373c:	4290      	cmp	r0, r2
 800373e:	d811      	bhi.n	8003764 <__ieee754_sqrt+0xe8>
 8003740:	2800      	cmp	r0, #0
 8003742:	eb00 0e01 	add.w	lr, r0, r1
 8003746:	da57      	bge.n	80037f8 <__ieee754_sqrt+0x17c>
 8003748:	f1be 0f00 	cmp.w	lr, #0
 800374c:	db54      	blt.n	80037f8 <__ieee754_sqrt+0x17c>
 800374e:	f10c 0801 	add.w	r8, ip, #1
 8003752:	eba3 030c 	sub.w	r3, r3, ip
 8003756:	4290      	cmp	r0, r2
 8003758:	bf88      	it	hi
 800375a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800375e:	1a12      	subs	r2, r2, r0
 8003760:	440c      	add	r4, r1
 8003762:	46c4      	mov	ip, r8
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	3f01      	subs	r7, #1
 8003768:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800376c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8003770:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003774:	d1dd      	bne.n	8003732 <__ieee754_sqrt+0xb6>
 8003776:	4313      	orrs	r3, r2
 8003778:	d01b      	beq.n	80037b2 <__ieee754_sqrt+0x136>
 800377a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8003828 <__ieee754_sqrt+0x1ac>
 800377e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800382c <__ieee754_sqrt+0x1b0>
 8003782:	e9da 0100 	ldrd	r0, r1, [sl]
 8003786:	e9db 2300 	ldrd	r2, r3, [fp]
 800378a:	f7fc fd21 	bl	80001d0 <__aeabi_dsub>
 800378e:	e9da 8900 	ldrd	r8, r9, [sl]
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	4640      	mov	r0, r8
 8003798:	4649      	mov	r1, r9
 800379a:	f7fd f94d 	bl	8000a38 <__aeabi_dcmple>
 800379e:	b140      	cbz	r0, 80037b2 <__ieee754_sqrt+0x136>
 80037a0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80037a4:	e9da 0100 	ldrd	r0, r1, [sl]
 80037a8:	e9db 2300 	ldrd	r2, r3, [fp]
 80037ac:	d126      	bne.n	80037fc <__ieee754_sqrt+0x180>
 80037ae:	3501      	adds	r5, #1
 80037b0:	463c      	mov	r4, r7
 80037b2:	106a      	asrs	r2, r5, #1
 80037b4:	0863      	lsrs	r3, r4, #1
 80037b6:	07e9      	lsls	r1, r5, #31
 80037b8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80037bc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80037c0:	bf48      	it	mi
 80037c2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80037c6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80037ca:	461c      	mov	r4, r3
 80037cc:	e76d      	b.n	80036aa <__ieee754_sqrt+0x2e>
 80037ce:	0ad3      	lsrs	r3, r2, #11
 80037d0:	3815      	subs	r0, #21
 80037d2:	0552      	lsls	r2, r2, #21
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0fa      	beq.n	80037ce <__ieee754_sqrt+0x152>
 80037d8:	02dc      	lsls	r4, r3, #11
 80037da:	d50a      	bpl.n	80037f2 <__ieee754_sqrt+0x176>
 80037dc:	f1c1 0420 	rsb	r4, r1, #32
 80037e0:	fa22 f404 	lsr.w	r4, r2, r4
 80037e4:	1e4d      	subs	r5, r1, #1
 80037e6:	408a      	lsls	r2, r1
 80037e8:	4323      	orrs	r3, r4
 80037ea:	1b41      	subs	r1, r0, r5
 80037ec:	e772      	b.n	80036d4 <__ieee754_sqrt+0x58>
 80037ee:	4608      	mov	r0, r1
 80037f0:	e7f0      	b.n	80037d4 <__ieee754_sqrt+0x158>
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	3101      	adds	r1, #1
 80037f6:	e7ef      	b.n	80037d8 <__ieee754_sqrt+0x15c>
 80037f8:	46e0      	mov	r8, ip
 80037fa:	e7aa      	b.n	8003752 <__ieee754_sqrt+0xd6>
 80037fc:	f7fc fcea 	bl	80001d4 <__adddf3>
 8003800:	e9da 8900 	ldrd	r8, r9, [sl]
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	4640      	mov	r0, r8
 800380a:	4649      	mov	r1, r9
 800380c:	f7fd f90a 	bl	8000a24 <__aeabi_dcmplt>
 8003810:	b120      	cbz	r0, 800381c <__ieee754_sqrt+0x1a0>
 8003812:	1ca0      	adds	r0, r4, #2
 8003814:	bf08      	it	eq
 8003816:	3501      	addeq	r5, #1
 8003818:	3402      	adds	r4, #2
 800381a:	e7ca      	b.n	80037b2 <__ieee754_sqrt+0x136>
 800381c:	3401      	adds	r4, #1
 800381e:	f024 0401 	bic.w	r4, r4, #1
 8003822:	e7c6      	b.n	80037b2 <__ieee754_sqrt+0x136>
 8003824:	7ff00000 	.word	0x7ff00000
 8003828:	20000060 	.word	0x20000060
 800382c:	20000068 	.word	0x20000068

08003830 <__kernel_rem_pio2f>:
 8003830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003834:	ed2d 8b04 	vpush	{d8-d9}
 8003838:	b0d9      	sub	sp, #356	; 0x164
 800383a:	4688      	mov	r8, r1
 800383c:	9002      	str	r0, [sp, #8]
 800383e:	49b8      	ldr	r1, [pc, #736]	; (8003b20 <__kernel_rem_pio2f+0x2f0>)
 8003840:	9866      	ldr	r0, [sp, #408]	; 0x198
 8003842:	9301      	str	r3, [sp, #4]
 8003844:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8003848:	9901      	ldr	r1, [sp, #4]
 800384a:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800384c:	f101 3bff 	add.w	fp, r1, #4294967295
 8003850:	1d11      	adds	r1, r2, #4
 8003852:	db25      	blt.n	80038a0 <__kernel_rem_pio2f+0x70>
 8003854:	1ed0      	subs	r0, r2, #3
 8003856:	bf48      	it	mi
 8003858:	1d10      	addmi	r0, r2, #4
 800385a:	10c0      	asrs	r0, r0, #3
 800385c:	1c45      	adds	r5, r0, #1
 800385e:	00e9      	lsls	r1, r5, #3
 8003860:	eba0 070b 	sub.w	r7, r0, fp
 8003864:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8003b30 <__kernel_rem_pio2f+0x300>
 8003868:	9103      	str	r1, [sp, #12]
 800386a:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800386e:	eb0a 0c0b 	add.w	ip, sl, fp
 8003872:	ae1c      	add	r6, sp, #112	; 0x70
 8003874:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8003878:	2400      	movs	r4, #0
 800387a:	4564      	cmp	r4, ip
 800387c:	dd12      	ble.n	80038a4 <__kernel_rem_pio2f+0x74>
 800387e:	9901      	ldr	r1, [sp, #4]
 8003880:	ac1c      	add	r4, sp, #112	; 0x70
 8003882:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8003886:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800388a:	f04f 0c00 	mov.w	ip, #0
 800388e:	45d4      	cmp	ip, sl
 8003890:	dc27      	bgt.n	80038e2 <__kernel_rem_pio2f+0xb2>
 8003892:	f8dd e008 	ldr.w	lr, [sp, #8]
 8003896:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8003b30 <__kernel_rem_pio2f+0x300>
 800389a:	4627      	mov	r7, r4
 800389c:	2600      	movs	r6, #0
 800389e:	e016      	b.n	80038ce <__kernel_rem_pio2f+0x9e>
 80038a0:	2000      	movs	r0, #0
 80038a2:	e7db      	b.n	800385c <__kernel_rem_pio2f+0x2c>
 80038a4:	42e7      	cmn	r7, r4
 80038a6:	bf5d      	ittte	pl
 80038a8:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 80038ac:	ee07 1a90 	vmovpl	s15, r1
 80038b0:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80038b4:	eef0 7a47 	vmovmi.f32	s15, s14
 80038b8:	ece6 7a01 	vstmia	r6!, {s15}
 80038bc:	3401      	adds	r4, #1
 80038be:	e7dc      	b.n	800387a <__kernel_rem_pio2f+0x4a>
 80038c0:	ecfe 6a01 	vldmia	lr!, {s13}
 80038c4:	ed97 7a00 	vldr	s14, [r7]
 80038c8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80038cc:	3601      	adds	r6, #1
 80038ce:	455e      	cmp	r6, fp
 80038d0:	f1a7 0704 	sub.w	r7, r7, #4
 80038d4:	ddf4      	ble.n	80038c0 <__kernel_rem_pio2f+0x90>
 80038d6:	ece9 7a01 	vstmia	r9!, {s15}
 80038da:	f10c 0c01 	add.w	ip, ip, #1
 80038de:	3404      	adds	r4, #4
 80038e0:	e7d5      	b.n	800388e <__kernel_rem_pio2f+0x5e>
 80038e2:	a908      	add	r1, sp, #32
 80038e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80038e8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80038ec:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8003b2c <__kernel_rem_pio2f+0x2fc>
 80038f0:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8003b28 <__kernel_rem_pio2f+0x2f8>
 80038f4:	9105      	str	r1, [sp, #20]
 80038f6:	9304      	str	r3, [sp, #16]
 80038f8:	4656      	mov	r6, sl
 80038fa:	00b3      	lsls	r3, r6, #2
 80038fc:	9306      	str	r3, [sp, #24]
 80038fe:	ab58      	add	r3, sp, #352	; 0x160
 8003900:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8003904:	ac08      	add	r4, sp, #32
 8003906:	ab44      	add	r3, sp, #272	; 0x110
 8003908:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800390c:	46a4      	mov	ip, r4
 800390e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8003912:	4637      	mov	r7, r6
 8003914:	2f00      	cmp	r7, #0
 8003916:	f1a0 0004 	sub.w	r0, r0, #4
 800391a:	dc4a      	bgt.n	80039b2 <__kernel_rem_pio2f+0x182>
 800391c:	4628      	mov	r0, r5
 800391e:	9207      	str	r2, [sp, #28]
 8003920:	f000 f9f8 	bl	8003d14 <scalbnf>
 8003924:	eeb0 8a40 	vmov.f32	s16, s0
 8003928:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800392c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8003930:	f000 fa56 	bl	8003de0 <floorf>
 8003934:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8003938:	eea0 8a67 	vfms.f32	s16, s0, s15
 800393c:	2d00      	cmp	r5, #0
 800393e:	9a07      	ldr	r2, [sp, #28]
 8003940:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8003944:	ee17 9a90 	vmov	r9, s15
 8003948:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800394c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8003950:	dd41      	ble.n	80039d6 <__kernel_rem_pio2f+0x1a6>
 8003952:	f106 3cff 	add.w	ip, r6, #4294967295
 8003956:	ab08      	add	r3, sp, #32
 8003958:	f1c5 0e08 	rsb	lr, r5, #8
 800395c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8003960:	fa47 f00e 	asr.w	r0, r7, lr
 8003964:	4481      	add	r9, r0
 8003966:	fa00 f00e 	lsl.w	r0, r0, lr
 800396a:	1a3f      	subs	r7, r7, r0
 800396c:	f1c5 0007 	rsb	r0, r5, #7
 8003970:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8003974:	4107      	asrs	r7, r0
 8003976:	2f00      	cmp	r7, #0
 8003978:	dd3c      	ble.n	80039f4 <__kernel_rem_pio2f+0x1c4>
 800397a:	f04f 0e00 	mov.w	lr, #0
 800397e:	f109 0901 	add.w	r9, r9, #1
 8003982:	4671      	mov	r1, lr
 8003984:	4576      	cmp	r6, lr
 8003986:	dc67      	bgt.n	8003a58 <__kernel_rem_pio2f+0x228>
 8003988:	2d00      	cmp	r5, #0
 800398a:	dd03      	ble.n	8003994 <__kernel_rem_pio2f+0x164>
 800398c:	2d01      	cmp	r5, #1
 800398e:	d074      	beq.n	8003a7a <__kernel_rem_pio2f+0x24a>
 8003990:	2d02      	cmp	r5, #2
 8003992:	d07b      	beq.n	8003a8c <__kernel_rem_pio2f+0x25c>
 8003994:	2f02      	cmp	r7, #2
 8003996:	d12d      	bne.n	80039f4 <__kernel_rem_pio2f+0x1c4>
 8003998:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800399c:	ee30 8a48 	vsub.f32	s16, s0, s16
 80039a0:	b341      	cbz	r1, 80039f4 <__kernel_rem_pio2f+0x1c4>
 80039a2:	4628      	mov	r0, r5
 80039a4:	9207      	str	r2, [sp, #28]
 80039a6:	f000 f9b5 	bl	8003d14 <scalbnf>
 80039aa:	9a07      	ldr	r2, [sp, #28]
 80039ac:	ee38 8a40 	vsub.f32	s16, s16, s0
 80039b0:	e020      	b.n	80039f4 <__kernel_rem_pio2f+0x1c4>
 80039b2:	ee60 7a28 	vmul.f32	s15, s0, s17
 80039b6:	3f01      	subs	r7, #1
 80039b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039c0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80039c4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80039c8:	ecac 0a01 	vstmia	ip!, {s0}
 80039cc:	ed90 0a00 	vldr	s0, [r0]
 80039d0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80039d4:	e79e      	b.n	8003914 <__kernel_rem_pio2f+0xe4>
 80039d6:	d105      	bne.n	80039e4 <__kernel_rem_pio2f+0x1b4>
 80039d8:	1e70      	subs	r0, r6, #1
 80039da:	ab08      	add	r3, sp, #32
 80039dc:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80039e0:	11ff      	asrs	r7, r7, #7
 80039e2:	e7c8      	b.n	8003976 <__kernel_rem_pio2f+0x146>
 80039e4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80039e8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80039ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f0:	da30      	bge.n	8003a54 <__kernel_rem_pio2f+0x224>
 80039f2:	2700      	movs	r7, #0
 80039f4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80039f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039fc:	f040 809a 	bne.w	8003b34 <__kernel_rem_pio2f+0x304>
 8003a00:	1e74      	subs	r4, r6, #1
 8003a02:	46a4      	mov	ip, r4
 8003a04:	2100      	movs	r1, #0
 8003a06:	45d4      	cmp	ip, sl
 8003a08:	da47      	bge.n	8003a9a <__kernel_rem_pio2f+0x26a>
 8003a0a:	2900      	cmp	r1, #0
 8003a0c:	d063      	beq.n	8003ad6 <__kernel_rem_pio2f+0x2a6>
 8003a0e:	ab08      	add	r3, sp, #32
 8003a10:	3d08      	subs	r5, #8
 8003a12:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d07f      	beq.n	8003b1a <__kernel_rem_pio2f+0x2ea>
 8003a1a:	4628      	mov	r0, r5
 8003a1c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003a20:	f000 f978 	bl	8003d14 <scalbnf>
 8003a24:	1c63      	adds	r3, r4, #1
 8003a26:	aa44      	add	r2, sp, #272	; 0x110
 8003a28:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8003b2c <__kernel_rem_pio2f+0x2fc>
 8003a2c:	0099      	lsls	r1, r3, #2
 8003a2e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8003a32:	4623      	mov	r3, r4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f280 80ad 	bge.w	8003b94 <__kernel_rem_pio2f+0x364>
 8003a3a:	4623      	mov	r3, r4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f2c0 80cb 	blt.w	8003bd8 <__kernel_rem_pio2f+0x3a8>
 8003a42:	aa44      	add	r2, sp, #272	; 0x110
 8003a44:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8003a48:	4e36      	ldr	r6, [pc, #216]	; (8003b24 <__kernel_rem_pio2f+0x2f4>)
 8003a4a:	eddf 7a39 	vldr	s15, [pc, #228]	; 8003b30 <__kernel_rem_pio2f+0x300>
 8003a4e:	2000      	movs	r0, #0
 8003a50:	1ae2      	subs	r2, r4, r3
 8003a52:	e0b6      	b.n	8003bc2 <__kernel_rem_pio2f+0x392>
 8003a54:	2702      	movs	r7, #2
 8003a56:	e790      	b.n	800397a <__kernel_rem_pio2f+0x14a>
 8003a58:	6820      	ldr	r0, [r4, #0]
 8003a5a:	b949      	cbnz	r1, 8003a70 <__kernel_rem_pio2f+0x240>
 8003a5c:	b118      	cbz	r0, 8003a66 <__kernel_rem_pio2f+0x236>
 8003a5e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8003a62:	6020      	str	r0, [r4, #0]
 8003a64:	2001      	movs	r0, #1
 8003a66:	f10e 0e01 	add.w	lr, lr, #1
 8003a6a:	3404      	adds	r4, #4
 8003a6c:	4601      	mov	r1, r0
 8003a6e:	e789      	b.n	8003984 <__kernel_rem_pio2f+0x154>
 8003a70:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8003a74:	6020      	str	r0, [r4, #0]
 8003a76:	4608      	mov	r0, r1
 8003a78:	e7f5      	b.n	8003a66 <__kernel_rem_pio2f+0x236>
 8003a7a:	1e74      	subs	r4, r6, #1
 8003a7c:	ab08      	add	r3, sp, #32
 8003a7e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003a82:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8003a86:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003a8a:	e783      	b.n	8003994 <__kernel_rem_pio2f+0x164>
 8003a8c:	1e74      	subs	r4, r6, #1
 8003a8e:	ab08      	add	r3, sp, #32
 8003a90:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003a94:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8003a98:	e7f5      	b.n	8003a86 <__kernel_rem_pio2f+0x256>
 8003a9a:	ab08      	add	r3, sp, #32
 8003a9c:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8003aa0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003aa4:	4301      	orrs	r1, r0
 8003aa6:	e7ae      	b.n	8003a06 <__kernel_rem_pio2f+0x1d6>
 8003aa8:	3001      	adds	r0, #1
 8003aaa:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8003aae:	2f00      	cmp	r7, #0
 8003ab0:	d0fa      	beq.n	8003aa8 <__kernel_rem_pio2f+0x278>
 8003ab2:	9b06      	ldr	r3, [sp, #24]
 8003ab4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003ab8:	eb0d 0403 	add.w	r4, sp, r3
 8003abc:	9b01      	ldr	r3, [sp, #4]
 8003abe:	18f7      	adds	r7, r6, r3
 8003ac0:	ab1c      	add	r3, sp, #112	; 0x70
 8003ac2:	f106 0c01 	add.w	ip, r6, #1
 8003ac6:	3c4c      	subs	r4, #76	; 0x4c
 8003ac8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8003acc:	4430      	add	r0, r6
 8003ace:	4560      	cmp	r0, ip
 8003ad0:	da04      	bge.n	8003adc <__kernel_rem_pio2f+0x2ac>
 8003ad2:	4606      	mov	r6, r0
 8003ad4:	e711      	b.n	80038fa <__kernel_rem_pio2f+0xca>
 8003ad6:	9c05      	ldr	r4, [sp, #20]
 8003ad8:	2001      	movs	r0, #1
 8003ada:	e7e6      	b.n	8003aaa <__kernel_rem_pio2f+0x27a>
 8003adc:	9b04      	ldr	r3, [sp, #16]
 8003ade:	f8dd e008 	ldr.w	lr, [sp, #8]
 8003ae2:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8003ae6:	9306      	str	r3, [sp, #24]
 8003ae8:	ee07 3a90 	vmov	s15, r3
 8003aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003af0:	2600      	movs	r6, #0
 8003af2:	ece7 7a01 	vstmia	r7!, {s15}
 8003af6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8003b30 <__kernel_rem_pio2f+0x300>
 8003afa:	46b9      	mov	r9, r7
 8003afc:	455e      	cmp	r6, fp
 8003afe:	dd04      	ble.n	8003b0a <__kernel_rem_pio2f+0x2da>
 8003b00:	ece4 7a01 	vstmia	r4!, {s15}
 8003b04:	f10c 0c01 	add.w	ip, ip, #1
 8003b08:	e7e1      	b.n	8003ace <__kernel_rem_pio2f+0x29e>
 8003b0a:	ecfe 6a01 	vldmia	lr!, {s13}
 8003b0e:	ed39 7a01 	vldmdb	r9!, {s14}
 8003b12:	3601      	adds	r6, #1
 8003b14:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003b18:	e7f0      	b.n	8003afc <__kernel_rem_pio2f+0x2cc>
 8003b1a:	3c01      	subs	r4, #1
 8003b1c:	e777      	b.n	8003a0e <__kernel_rem_pio2f+0x1de>
 8003b1e:	bf00      	nop
 8003b20:	08004ae4 	.word	0x08004ae4
 8003b24:	08004ab8 	.word	0x08004ab8
 8003b28:	43800000 	.word	0x43800000
 8003b2c:	3b800000 	.word	0x3b800000
 8003b30:	00000000 	.word	0x00000000
 8003b34:	9b03      	ldr	r3, [sp, #12]
 8003b36:	eeb0 0a48 	vmov.f32	s0, s16
 8003b3a:	1a98      	subs	r0, r3, r2
 8003b3c:	f000 f8ea 	bl	8003d14 <scalbnf>
 8003b40:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8003b28 <__kernel_rem_pio2f+0x2f8>
 8003b44:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8003b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b4c:	db19      	blt.n	8003b82 <__kernel_rem_pio2f+0x352>
 8003b4e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8003b2c <__kernel_rem_pio2f+0x2fc>
 8003b52:	ee60 7a27 	vmul.f32	s15, s0, s15
 8003b56:	aa08      	add	r2, sp, #32
 8003b58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b5c:	1c74      	adds	r4, r6, #1
 8003b5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b62:	3508      	adds	r5, #8
 8003b64:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8003b68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b6c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003b70:	ee10 3a10 	vmov	r3, s0
 8003b74:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8003b78:	ee17 3a90 	vmov	r3, s15
 8003b7c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8003b80:	e74b      	b.n	8003a1a <__kernel_rem_pio2f+0x1ea>
 8003b82:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003b86:	aa08      	add	r2, sp, #32
 8003b88:	ee10 3a10 	vmov	r3, s0
 8003b8c:	4634      	mov	r4, r6
 8003b8e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8003b92:	e742      	b.n	8003a1a <__kernel_rem_pio2f+0x1ea>
 8003b94:	a808      	add	r0, sp, #32
 8003b96:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8003b9a:	9001      	str	r0, [sp, #4]
 8003b9c:	ee07 0a90 	vmov	s15, r0
 8003ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	ee67 7a80 	vmul.f32	s15, s15, s0
 8003baa:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003bae:	ed62 7a01 	vstmdb	r2!, {s15}
 8003bb2:	e73f      	b.n	8003a34 <__kernel_rem_pio2f+0x204>
 8003bb4:	ecf6 6a01 	vldmia	r6!, {s13}
 8003bb8:	ecb5 7a01 	vldmia	r5!, {s14}
 8003bbc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003bc0:	3001      	adds	r0, #1
 8003bc2:	4550      	cmp	r0, sl
 8003bc4:	dc01      	bgt.n	8003bca <__kernel_rem_pio2f+0x39a>
 8003bc6:	4290      	cmp	r0, r2
 8003bc8:	ddf4      	ble.n	8003bb4 <__kernel_rem_pio2f+0x384>
 8003bca:	a858      	add	r0, sp, #352	; 0x160
 8003bcc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003bd0:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	e731      	b.n	8003a3c <__kernel_rem_pio2f+0x20c>
 8003bd8:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	dc09      	bgt.n	8003bf2 <__kernel_rem_pio2f+0x3c2>
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	dc2b      	bgt.n	8003c3a <__kernel_rem_pio2f+0x40a>
 8003be2:	d044      	beq.n	8003c6e <__kernel_rem_pio2f+0x43e>
 8003be4:	f009 0007 	and.w	r0, r9, #7
 8003be8:	b059      	add	sp, #356	; 0x164
 8003bea:	ecbd 8b04 	vpop	{d8-d9}
 8003bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bf2:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8003bf4:	2b03      	cmp	r3, #3
 8003bf6:	d1f5      	bne.n	8003be4 <__kernel_rem_pio2f+0x3b4>
 8003bf8:	aa30      	add	r2, sp, #192	; 0xc0
 8003bfa:	1f0b      	subs	r3, r1, #4
 8003bfc:	4413      	add	r3, r2
 8003bfe:	461a      	mov	r2, r3
 8003c00:	4620      	mov	r0, r4
 8003c02:	2800      	cmp	r0, #0
 8003c04:	f1a2 0204 	sub.w	r2, r2, #4
 8003c08:	dc52      	bgt.n	8003cb0 <__kernel_rem_pio2f+0x480>
 8003c0a:	4622      	mov	r2, r4
 8003c0c:	2a01      	cmp	r2, #1
 8003c0e:	f1a3 0304 	sub.w	r3, r3, #4
 8003c12:	dc5d      	bgt.n	8003cd0 <__kernel_rem_pio2f+0x4a0>
 8003c14:	ab30      	add	r3, sp, #192	; 0xc0
 8003c16:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8003b30 <__kernel_rem_pio2f+0x300>
 8003c1a:	440b      	add	r3, r1
 8003c1c:	2c01      	cmp	r4, #1
 8003c1e:	dc67      	bgt.n	8003cf0 <__kernel_rem_pio2f+0x4c0>
 8003c20:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8003c24:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8003c28:	2f00      	cmp	r7, #0
 8003c2a:	d167      	bne.n	8003cfc <__kernel_rem_pio2f+0x4cc>
 8003c2c:	edc8 6a00 	vstr	s13, [r8]
 8003c30:	ed88 7a01 	vstr	s14, [r8, #4]
 8003c34:	edc8 7a02 	vstr	s15, [r8, #8]
 8003c38:	e7d4      	b.n	8003be4 <__kernel_rem_pio2f+0x3b4>
 8003c3a:	ab30      	add	r3, sp, #192	; 0xc0
 8003c3c:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8003b30 <__kernel_rem_pio2f+0x300>
 8003c40:	440b      	add	r3, r1
 8003c42:	4622      	mov	r2, r4
 8003c44:	2a00      	cmp	r2, #0
 8003c46:	da24      	bge.n	8003c92 <__kernel_rem_pio2f+0x462>
 8003c48:	b34f      	cbz	r7, 8003c9e <__kernel_rem_pio2f+0x46e>
 8003c4a:	eef1 7a47 	vneg.f32	s15, s14
 8003c4e:	edc8 7a00 	vstr	s15, [r8]
 8003c52:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8003c56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c5a:	aa31      	add	r2, sp, #196	; 0xc4
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	429c      	cmp	r4, r3
 8003c60:	da20      	bge.n	8003ca4 <__kernel_rem_pio2f+0x474>
 8003c62:	b10f      	cbz	r7, 8003c68 <__kernel_rem_pio2f+0x438>
 8003c64:	eef1 7a67 	vneg.f32	s15, s15
 8003c68:	edc8 7a01 	vstr	s15, [r8, #4]
 8003c6c:	e7ba      	b.n	8003be4 <__kernel_rem_pio2f+0x3b4>
 8003c6e:	ab30      	add	r3, sp, #192	; 0xc0
 8003c70:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8003b30 <__kernel_rem_pio2f+0x300>
 8003c74:	440b      	add	r3, r1
 8003c76:	2c00      	cmp	r4, #0
 8003c78:	da05      	bge.n	8003c86 <__kernel_rem_pio2f+0x456>
 8003c7a:	b10f      	cbz	r7, 8003c80 <__kernel_rem_pio2f+0x450>
 8003c7c:	eef1 7a67 	vneg.f32	s15, s15
 8003c80:	edc8 7a00 	vstr	s15, [r8]
 8003c84:	e7ae      	b.n	8003be4 <__kernel_rem_pio2f+0x3b4>
 8003c86:	ed33 7a01 	vldmdb	r3!, {s14}
 8003c8a:	3c01      	subs	r4, #1
 8003c8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c90:	e7f1      	b.n	8003c76 <__kernel_rem_pio2f+0x446>
 8003c92:	ed73 7a01 	vldmdb	r3!, {s15}
 8003c96:	3a01      	subs	r2, #1
 8003c98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c9c:	e7d2      	b.n	8003c44 <__kernel_rem_pio2f+0x414>
 8003c9e:	eef0 7a47 	vmov.f32	s15, s14
 8003ca2:	e7d4      	b.n	8003c4e <__kernel_rem_pio2f+0x41e>
 8003ca4:	ecb2 7a01 	vldmia	r2!, {s14}
 8003ca8:	3301      	adds	r3, #1
 8003caa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003cae:	e7d6      	b.n	8003c5e <__kernel_rem_pio2f+0x42e>
 8003cb0:	edd2 7a00 	vldr	s15, [r2]
 8003cb4:	edd2 6a01 	vldr	s13, [r2, #4]
 8003cb8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003cbc:	3801      	subs	r0, #1
 8003cbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003cc2:	ed82 7a00 	vstr	s14, [r2]
 8003cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cca:	edc2 7a01 	vstr	s15, [r2, #4]
 8003cce:	e798      	b.n	8003c02 <__kernel_rem_pio2f+0x3d2>
 8003cd0:	edd3 7a00 	vldr	s15, [r3]
 8003cd4:	edd3 6a01 	vldr	s13, [r3, #4]
 8003cd8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003cdc:	3a01      	subs	r2, #1
 8003cde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ce2:	ed83 7a00 	vstr	s14, [r3]
 8003ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cea:	edc3 7a01 	vstr	s15, [r3, #4]
 8003cee:	e78d      	b.n	8003c0c <__kernel_rem_pio2f+0x3dc>
 8003cf0:	ed33 7a01 	vldmdb	r3!, {s14}
 8003cf4:	3c01      	subs	r4, #1
 8003cf6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003cfa:	e78f      	b.n	8003c1c <__kernel_rem_pio2f+0x3ec>
 8003cfc:	eef1 6a66 	vneg.f32	s13, s13
 8003d00:	eeb1 7a47 	vneg.f32	s14, s14
 8003d04:	edc8 6a00 	vstr	s13, [r8]
 8003d08:	ed88 7a01 	vstr	s14, [r8, #4]
 8003d0c:	eef1 7a67 	vneg.f32	s15, s15
 8003d10:	e790      	b.n	8003c34 <__kernel_rem_pio2f+0x404>
 8003d12:	bf00      	nop

08003d14 <scalbnf>:
 8003d14:	ee10 3a10 	vmov	r3, s0
 8003d18:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8003d1c:	d02b      	beq.n	8003d76 <scalbnf+0x62>
 8003d1e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8003d22:	d302      	bcc.n	8003d2a <scalbnf+0x16>
 8003d24:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003d28:	4770      	bx	lr
 8003d2a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8003d2e:	d123      	bne.n	8003d78 <scalbnf+0x64>
 8003d30:	4b24      	ldr	r3, [pc, #144]	; (8003dc4 <scalbnf+0xb0>)
 8003d32:	eddf 7a25 	vldr	s15, [pc, #148]	; 8003dc8 <scalbnf+0xb4>
 8003d36:	4298      	cmp	r0, r3
 8003d38:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003d3c:	db17      	blt.n	8003d6e <scalbnf+0x5a>
 8003d3e:	ee10 3a10 	vmov	r3, s0
 8003d42:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003d46:	3a19      	subs	r2, #25
 8003d48:	f24c 3150 	movw	r1, #50000	; 0xc350
 8003d4c:	4288      	cmp	r0, r1
 8003d4e:	dd15      	ble.n	8003d7c <scalbnf+0x68>
 8003d50:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8003dcc <scalbnf+0xb8>
 8003d54:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8003dd0 <scalbnf+0xbc>
 8003d58:	ee10 3a10 	vmov	r3, s0
 8003d5c:	eeb0 7a67 	vmov.f32	s14, s15
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	bfb8      	it	lt
 8003d64:	eef0 7a66 	vmovlt.f32	s15, s13
 8003d68:	ee27 0a87 	vmul.f32	s0, s15, s14
 8003d6c:	4770      	bx	lr
 8003d6e:	eddf 7a19 	vldr	s15, [pc, #100]	; 8003dd4 <scalbnf+0xc0>
 8003d72:	ee27 0a80 	vmul.f32	s0, s15, s0
 8003d76:	4770      	bx	lr
 8003d78:	0dd2      	lsrs	r2, r2, #23
 8003d7a:	e7e5      	b.n	8003d48 <scalbnf+0x34>
 8003d7c:	4410      	add	r0, r2
 8003d7e:	28fe      	cmp	r0, #254	; 0xfe
 8003d80:	dce6      	bgt.n	8003d50 <scalbnf+0x3c>
 8003d82:	2800      	cmp	r0, #0
 8003d84:	dd06      	ble.n	8003d94 <scalbnf+0x80>
 8003d86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003d8a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8003d8e:	ee00 3a10 	vmov	s0, r3
 8003d92:	4770      	bx	lr
 8003d94:	f110 0f16 	cmn.w	r0, #22
 8003d98:	da09      	bge.n	8003dae <scalbnf+0x9a>
 8003d9a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8003dd4 <scalbnf+0xc0>
 8003d9e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8003dd8 <scalbnf+0xc4>
 8003da2:	ee10 3a10 	vmov	r3, s0
 8003da6:	eeb0 7a67 	vmov.f32	s14, s15
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	e7d9      	b.n	8003d62 <scalbnf+0x4e>
 8003dae:	3019      	adds	r0, #25
 8003db0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003db4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8003db8:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8003ddc <scalbnf+0xc8>
 8003dbc:	ee07 3a90 	vmov	s15, r3
 8003dc0:	e7d7      	b.n	8003d72 <scalbnf+0x5e>
 8003dc2:	bf00      	nop
 8003dc4:	ffff3cb0 	.word	0xffff3cb0
 8003dc8:	4c000000 	.word	0x4c000000
 8003dcc:	7149f2ca 	.word	0x7149f2ca
 8003dd0:	f149f2ca 	.word	0xf149f2ca
 8003dd4:	0da24260 	.word	0x0da24260
 8003dd8:	8da24260 	.word	0x8da24260
 8003ddc:	33000000 	.word	0x33000000

08003de0 <floorf>:
 8003de0:	ee10 3a10 	vmov	r3, s0
 8003de4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003de8:	3a7f      	subs	r2, #127	; 0x7f
 8003dea:	2a16      	cmp	r2, #22
 8003dec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003df0:	dc2a      	bgt.n	8003e48 <floorf+0x68>
 8003df2:	2a00      	cmp	r2, #0
 8003df4:	da11      	bge.n	8003e1a <floorf+0x3a>
 8003df6:	eddf 7a18 	vldr	s15, [pc, #96]	; 8003e58 <floorf+0x78>
 8003dfa:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003dfe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e06:	dd05      	ble.n	8003e14 <floorf+0x34>
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	da23      	bge.n	8003e54 <floorf+0x74>
 8003e0c:	4a13      	ldr	r2, [pc, #76]	; (8003e5c <floorf+0x7c>)
 8003e0e:	2900      	cmp	r1, #0
 8003e10:	bf18      	it	ne
 8003e12:	4613      	movne	r3, r2
 8003e14:	ee00 3a10 	vmov	s0, r3
 8003e18:	4770      	bx	lr
 8003e1a:	4911      	ldr	r1, [pc, #68]	; (8003e60 <floorf+0x80>)
 8003e1c:	4111      	asrs	r1, r2
 8003e1e:	420b      	tst	r3, r1
 8003e20:	d0fa      	beq.n	8003e18 <floorf+0x38>
 8003e22:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8003e58 <floorf+0x78>
 8003e26:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003e2a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e32:	ddef      	ble.n	8003e14 <floorf+0x34>
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	bfbe      	ittt	lt
 8003e38:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8003e3c:	fa40 f202 	asrlt.w	r2, r0, r2
 8003e40:	189b      	addlt	r3, r3, r2
 8003e42:	ea23 0301 	bic.w	r3, r3, r1
 8003e46:	e7e5      	b.n	8003e14 <floorf+0x34>
 8003e48:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8003e4c:	d3e4      	bcc.n	8003e18 <floorf+0x38>
 8003e4e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003e52:	4770      	bx	lr
 8003e54:	2300      	movs	r3, #0
 8003e56:	e7dd      	b.n	8003e14 <floorf+0x34>
 8003e58:	7149f2ca 	.word	0x7149f2ca
 8003e5c:	bf800000 	.word	0xbf800000
 8003e60:	007fffff 	.word	0x007fffff

08003e64 <_init>:
 8003e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e66:	bf00      	nop
 8003e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e6a:	bc08      	pop	{r3}
 8003e6c:	469e      	mov	lr, r3
 8003e6e:	4770      	bx	lr

08003e70 <_fini>:
 8003e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e72:	bf00      	nop
 8003e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e76:	bc08      	pop	{r3}
 8003e78:	469e      	mov	lr, r3
 8003e7a:	4770      	bx	lr
